--- a/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -111,6 +_,17 @@
         this.dynamicShape = p_60452_.dynamicShape;
         this.requiredFeatures = p_60452_.requiredFeatures;
         this.properties = p_60452_;
+        final ResourceKey<LootTable> lootTableCache = p_60452_.drops;
+        if (lootTableCache != null) {
+            this.lootTableSupplier = () -> lootTableCache;
+        } else if (p_60452_.lootTableSupplier != null) {
+            this.lootTableSupplier = p_60452_.lootTableSupplier;
+        } else {
+            this.lootTableSupplier = () -> {
+                ResourceLocation resourcelocation = BuiltInRegistries.BLOCK.getKey(this.asBlock());
+                return ResourceKey.create(Registries.LOOT_TABLE, resourcelocation.withPrefix("blocks/"));
+            };
+        }
     }
 
     public BlockBehaviour.Properties properties() {
@@ -168,7 +_,7 @@
         if (!p_311951_.isAir() && p_312925_.getBlockInteraction() != Explosion.BlockInteraction.TRIGGER_BLOCK) {
             Block block = p_311951_.getBlock();
             boolean flag = p_312925_.getIndirectSourceEntity() instanceof Player;
-            if (block.dropFromExplosion(p_312925_) && p_312820_ instanceof ServerLevel serverlevel) {
+            if (p_311951_.canDropFromExplosion(p_312820_, p_312489_, p_312925_) && p_312820_ instanceof ServerLevel serverlevel) {
                 BlockEntity blockentity = p_311951_.hasBlockEntity() ? p_312820_.getBlockEntity(p_312489_) : null;
                 LootParams.Builder lootparams$builder = new LootParams.Builder(serverlevel)
                     .withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(p_312489_))
@@ -183,8 +_,7 @@
                 p_311951_.getDrops(lootparams$builder).forEach(p_311752_ -> p_312073_.accept(p_311752_, p_312489_));
             }
 
-            p_312820_.setBlock(p_312489_, Blocks.AIR.defaultBlockState(), 3);
-            block.wasExploded(p_312820_, p_312489_, p_312925_);
+            p_311951_.onBlockExploded(p_312820_, p_312489_, p_312925_);
         }
     }
 
@@ -335,8 +_,8 @@
         if (f == -1.0F) {
             return 0.0F;
         } else {
-            int i = p_60467_.hasCorrectToolForDrops(p_60466_) ? 30 : 100;
-            return p_60467_.getDestroySpeed(p_60466_) / f / (float)i;
+            int i = net.neoforged.neoforge.event.EventHooks.doPlayerHarvestCheck(p_60467_, p_60466_, p_60468_, p_60469_) ? 30 : 100;
+            return p_60467_.getDigSpeed(p_60466_, p_60469_) / f / (float)i;
         }
     }
 
@@ -359,8 +_,7 @@
 
     public final ResourceKey<LootTable> getLootTable() {
         if (this.drops == null) {
-            ResourceLocation resourcelocation = BuiltInRegistries.BLOCK.getKey(this.asBlock());
-            this.drops = ResourceKey.create(Registries.LOOT_TABLE, resourcelocation.withPrefix("blocks/"));
+            this.drops = this.lootTableSupplier.get();
         }
 
         return this.drops;
@@ -377,6 +_,7 @@
         return this.isRandomlyTicking;
     }
 
+    @Deprecated //Forge: Use more sensitive version {@link IForgeBlockState#getSoundType(IWorldReader, BlockPos, Entity) }
     protected SoundType getSoundType(BlockState p_320941_) {
         return this.soundType;
     }
@@ -393,7 +_,14 @@
         return this.properties.destroyTime;
     }
 
-    public abstract static class BlockStateBase extends StateHolder<Block, BlockState> {
+    protected boolean isAir(BlockState state) {
+        return ((BlockStateBase)state).isAir;
+    }
+
+    // Neo: Holds the loot table for this block's drops. Used for getLootTable method.
+    private final java.util.function.Supplier<ResourceKey<LootTable>> lootTableSupplier;
+
+    public abstract static class BlockStateBase extends StateHolder<Block, BlockState> implements ca.spottedleaf.moonrise.patches.starlight.blockstate.StarlightAbstractBlockState, ca.spottedleaf.moonrise.patches.collisions.block.CollisionBlockState { // Paper - rewrite chunk system // Paper - optimise collisions
         private final int lightEmission;
         private final boolean useShapeForLightOcclusion;
         private final boolean isAir;
@@ -422,6 +_,76 @@
         private FluidState fluidState = Fluids.EMPTY.defaultFluidState();
         private boolean isRandomlyTicking;
 
+        // Paper start - rewrite chunk system
+        private int opacityIfCached;
+        private boolean isConditionallyFullOpaque;
+
+        @Override
+        public final boolean starlight$isConditionallyFullOpaque() {
+            return this.isConditionallyFullOpaque;
+        }
+
+        @Override
+        public final int starlight$getOpacityIfCached() {
+            return this.opacityIfCached;
+        }
+        // Paper end - rewrite chunk system
+        // Paper start - optimise collisions
+        private static final int RANDOM_OFFSET = 704237939;
+        private static final Direction[] DIRECTIONS_CACHED = Direction.values();
+        private static final java.util.concurrent.atomic.AtomicInteger ID_GENERATOR = new java.util.concurrent.atomic.AtomicInteger();
+        private final int id1 = it.unimi.dsi.fastutil.HashCommon.murmurHash3(it.unimi.dsi.fastutil.HashCommon.murmurHash3(ID_GENERATOR.getAndIncrement() + RANDOM_OFFSET) + RANDOM_OFFSET);
+        private final int id2 = it.unimi.dsi.fastutil.HashCommon.murmurHash3(it.unimi.dsi.fastutil.HashCommon.murmurHash3(ID_GENERATOR.getAndIncrement() + RANDOM_OFFSET) + RANDOM_OFFSET);
+        private boolean occludesFullBlock;
+        private boolean emptyCollisionShape;
+        private VoxelShape constantCollisionShape;
+        private AABB constantAABBCollision;
+
+        private static void initCaches(final VoxelShape shape) {
+            ((ca.spottedleaf.moonrise.patches.collisions.shape.CollisionVoxelShape)shape).moonrise$isFullBlock();
+            ((ca.spottedleaf.moonrise.patches.collisions.shape.CollisionVoxelShape)shape).moonrise$occludesFullBlock();
+            shape.toAabbs();
+            if (!shape.isEmpty()) {
+                shape.bounds();
+            }
+        }
+
+        @Override
+        public final boolean moonrise$hasCache() {
+            return this.cache != null;
+        }
+
+        @Override
+        public final boolean moonrise$occludesFullBlock() {
+            return this.occludesFullBlock;
+        }
+
+        @Override
+        public final boolean moonrise$emptyCollisionShape() {
+            return this.emptyCollisionShape;
+        }
+
+        @Override
+        public final int moonrise$uniqueId1() {
+            return this.id1;
+        }
+
+        @Override
+        public final int moonrise$uniqueId2() {
+            return this.id2;
+        }
+
+        @Override
+        public final VoxelShape moonrise$getConstantCollisionShape() {
+            return this.constantCollisionShape;
+        }
+
+        @Override
+        public final AABB moonrise$getConstantCollisionAABB() {
+            return this.constantAABBCollision;
+        }
+        // Paper end - optimise collisions
+
         protected BlockStateBase(Block p_60608_, Reference2ObjectArrayMap<Property<?>, Comparable<?>> p_326208_, MapCodec<BlockState> p_60610_) {
             super(p_60608_, p_326208_, p_60610_);
             BlockBehaviour.Properties blockbehaviour$properties = p_60608_.properties;
@@ -472,6 +_,10 @@
             }
 
             this.legacySolid = this.calculateSolid();
+            // Paper start - rewrite chunk system
+            this.isConditionallyFullOpaque = this.canOcclude & this.useShapeForLightOcclusion;
+            this.opacityIfCached = this.cache == null || this.isConditionallyFullOpaque ? -1 : this.cache.lightBlock;
+            // Paper end - rewrite chunk system
         }
 
         public Block getBlock() {
@@ -523,12 +_,14 @@
             return this.useShapeForLightOcclusion;
         }
 
+        /** @deprecated Forge: Use {@link BlockState#getLightEmission(BlockGetter, BlockPos)} instead */
+        @Deprecated
         public int getLightEmission() {
             return this.lightEmission;
         }
 
         public boolean isAir() {
-            return this.isAir;
+            return this.getBlock().isAir((BlockState)this);
         }
 
         public boolean ignitedByLava() {
@@ -541,9 +_,11 @@
         }
 
         public MapColor getMapColor(BlockGetter p_285002_, BlockPos p_285293_) {
-            return this.mapColor;
+            return getBlock().getMapColor(this.asState(), p_285002_, p_285293_, this.mapColor);
         }
 
+        /** @deprecated use {@link BlockState#rotate(LevelAccessor, BlockPos, Rotation)} */
+        @Deprecated
         public BlockState rotate(Rotation p_60718_) {
             return this.getBlock().rotate(this.asState(), p_60718_);
         }
@@ -597,6 +_,8 @@
         }
 
         public PushReaction getPistonPushReaction() {
+            PushReaction reaction = getBlock().getPistonPushReaction(asState());
+            if (reaction != null) return reaction;
             return this.pushReaction;
         }
 
@@ -724,6 +_,9 @@
         }
 
         public ItemInteractionResult useItemOn(ItemStack p_316374_, Level p_316651_, Player p_316623_, InteractionHand p_316469_, BlockHitResult p_316877_) {
+            var useOnContext = new net.minecraft.world.item.context.UseOnContext(p_316651_, p_316623_, p_316469_, p_316623_.getItemInHand(p_316469_).copy(), p_316877_);
+            var e = net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.UseItemOnBlockEvent(useOnContext, net.neoforged.neoforge.event.entity.player.UseItemOnBlockEvent.UsePhase.BLOCK));
+            if (e.isCanceled()) return e.getCancellationResult();
             return this.getBlock().useItemOn(p_316374_, this.asState(), p_316651_, p_316877_.getBlockPos(), p_316623_, p_316469_, p_316877_);
         }
 
@@ -825,6 +_,7 @@
             return this.getBlock().getSeed(this.asState(), p_60727_);
         }
 
+        @Deprecated //Forge: Use more sensitive version {@link IForgeBlockState#getSoundType(IWorldReader, BlockPos, Entity) }
         public SoundType getSoundType() {
             return this.getBlock().getSoundType(this.asState());
         }
@@ -959,11 +_,12 @@
         PushReaction pushReaction = PushReaction.NORMAL;
         boolean spawnTerrainParticles = true;
         NoteBlockInstrument instrument = NoteBlockInstrument.HARP;
+        private java.util.function.Supplier<ResourceKey<LootTable>> lootTableSupplier;
         boolean replaceable;
         BlockBehaviour.StateArgumentPredicate<EntityType<?>> isValidSpawn = (p_284893_, p_284894_, p_284895_, p_284896_) -> p_284893_.isFaceSturdy(
                     p_284894_, p_284895_, Direction.UP
                 )
-                && p_284893_.getLightEmission() < 14;
+                && p_284893_.getLightEmission(p_284894_, p_284895_) < 14;
         BlockBehaviour.StatePredicate isRedstoneConductor = (p_284888_, p_284889_, p_284890_) -> p_284888_.isCollisionShapeFullBlock(p_284889_, p_284890_);
         BlockBehaviour.StatePredicate isSuffocating = (p_284885_, p_284886_, p_284887_) -> p_284885_.blocksMotion()
                 && p_284885_.isCollisionShapeFullBlock(p_284886_, p_284887_);
@@ -1105,9 +_,15 @@
             return this;
         }
 
+        @Deprecated // FORGE: Use the variant that takes a Supplier below
         public BlockBehaviour.Properties dropsLike(Block p_60917_) {
-            this.drops = p_60917_.getLootTable();
+            this.lootTableSupplier = () -> p_60917_.getLootTable();
             return this;
+        }
+
+        public BlockBehaviour.Properties lootFrom(java.util.function.Supplier<? extends Block> blockIn) {
+             this.lootTableSupplier = () -> blockIn.get().getLootTable();
+             return this;
         }
 
         public BlockBehaviour.Properties ignitedByLava() {
