--- a/net/minecraft/world/level/BaseSpawner.java
+++ b/net/minecraft/world/level/BaseSpawner.java
@@ -26,7 +_,7 @@
 import net.minecraft.world.phys.AABB;
 import org.slf4j.Logger;
 
-public abstract class BaseSpawner {
+public abstract class BaseSpawner implements net.neoforged.neoforge.common.extensions.IOwnedSpawner {
     public static final String SPAWN_DATA_TAG = "SpawnData";
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final int EVENT_SPAWN = 1;
@@ -44,6 +_,7 @@
     private int maxNearbyEntities = 6;
     private int requiredPlayerRange = 16;
     private int spawnRange = 4;
+    private int tickDelay = 0; // Paper - Configurable mob spawner tick rate
 
     public void setEntityId(EntityType<?> p_253682_, @Nullable Level p_254041_, RandomSource p_254221_, BlockPos p_254050_) {
         this.getOrCreateNextSpawnData(p_254041_, p_254221_, p_254050_)
@@ -77,13 +_,19 @@
     }
 
     public void serverTick(ServerLevel p_151312_, BlockPos p_151313_) {
+        if (spawnCount <= 0 || maxNearbyEntities <= 0) return; // Paper - Ignore impossible spawn tick
+        // Paper start - Configurable mob spawner tick rate
+        if (spawnDelay > 0 && --tickDelay > 0) return;
+        tickDelay = p_151312_.paperConfig().tickRates.mobSpawner;
+        if (tickDelay == -1) { return; } // If disabled
+        // Paper end - Configurable mob spawner tick rate
         if (this.isNearPlayer(p_151312_, p_151313_)) {
-            if (this.spawnDelay == -1) {
+            if (this.spawnDelay < -tickDelay) { // Paper - Configurable mob spawner tick rate
                 this.delay(p_151312_, p_151313_);
             }
 
             if (this.spawnDelay > 0) {
-                this.spawnDelay--;
+                this.spawnDelay -= tickDelay; // Paper - Configurable mob spawner tick rate
             } else {
                 boolean flag = false;
                 RandomSource randomsource = p_151312_.getRandom();
@@ -151,15 +_,14 @@
 
                         entity.moveTo(entity.getX(), entity.getY(), entity.getZ(), randomsource.nextFloat() * 360.0F, 0.0F);
                         if (entity instanceof Mob mob) {
-                            if (spawndata.getCustomSpawnRules().isEmpty() && !mob.checkSpawnRules(p_151312_, MobSpawnType.SPAWNER)
-                                || !mob.checkSpawnObstruction(p_151312_)) {
+                            if (!net.neoforged.neoforge.event.EventHooks.checkSpawnPositionSpawner(mob, p_151312_, MobSpawnType.SPAWNER, spawndata, this)) {
                                 continue;
                             }
 
                             boolean flag1 = spawndata.getEntityToSpawn().size() == 1 && spawndata.getEntityToSpawn().contains("id", 8);
-                            if (flag1) {
-                                ((Mob)entity).finalizeSpawn(p_151312_, p_151312_.getCurrentDifficultyAt(entity.blockPosition()), MobSpawnType.SPAWNER, null);
-                            }
+                            // Neo: Patch in FinalizeSpawn for spawners so it may be fired unconditionally, instead of only when vanilla would normally call it.
+                            // The local flag1 is the conditions under which the spawner will normally call Mob#finalizeSpawn.
+                            net.neoforged.neoforge.event.EventHooks.finalizeMobSpawnSpawner(mob, p_151312_, p_151312_.getCurrentDifficultyAt(entity.blockPosition()), MobSpawnType.SPAWNER, null, this, flag1);
 
                             spawndata.getEquipment().ifPresent(mob::equip);
                         }
@@ -308,5 +_,12 @@
 
     public double getoSpin() {
         return this.oSpin;
+    }
+
+    @Override
+    @org.jetbrains.annotations.Nullable
+    public com.mojang.datafixers.util.Either<net.minecraft.world.level.block.entity.BlockEntity, Entity> getOwner() {
+        // The vanilla anonymous classes have proper overrides, but we return null here for compatibility.
+        return null;
     }
 }
