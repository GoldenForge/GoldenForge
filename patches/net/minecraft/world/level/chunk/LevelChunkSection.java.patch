--- a/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -13,17 +_,39 @@
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.material.FluidState;
 
-public class LevelChunkSection {
+public class LevelChunkSection implements ca.spottedleaf.moonrise.patches.block_counting.BlockCountingChunkSection { // Paper - block counting
     public static final int SECTION_WIDTH = 16;
     public static final int SECTION_HEIGHT = 16;
     public static final int SECTION_SIZE = 4096;
     public static final int BIOME_CONTAINER_BITS = 2;
-    private short nonEmptyBlockCount;
+    public short nonEmptyBlockCount;
     private short tickingBlockCount;
     private short tickingFluidCount;
-    private final PalettedContainer<BlockState> states;
+    public final PalettedContainer<BlockState> states;
     private PalettedContainerRO<Holder<Biome>> biomes;
 
+    // Paper start - block counting
+    private static final it.unimi.dsi.fastutil.ints.IntArrayList FULL_LIST = new it.unimi.dsi.fastutil.ints.IntArrayList(16*16*16);
+    static {
+        for (int i = 0; i < (16*16*16); ++i) {
+            FULL_LIST.add(i);
+        }
+    }
+
+    private int specialCollidingBlocks;
+    private final ca.spottedleaf.moonrise.common.list.IBlockDataList tickingBlocks = new ca.spottedleaf.moonrise.common.list.IBlockDataList();
+
+    @Override
+    public final int moonrise$getSpecialCollidingBlocks() {
+        return this.specialCollidingBlocks;
+    }
+
+    @Override
+    public final ca.spottedleaf.moonrise.common.list.IBlockDataList moonrise$getTickingBlockList() {
+        return this.tickingBlocks;
+    }
+    // Paper end - block counting
+
     public LevelChunkSection(PalettedContainer<BlockState> p_282846_, PalettedContainerRO<Holder<Biome>> p_281695_) {
         this.states = p_282846_;
         this.biomes = p_281695_;
@@ -65,7 +_,7 @@
 
         FluidState fluidstate = blockstate.getFluidState();
         FluidState fluidstate1 = p_62995_.getFluidState();
-        if (!blockstate.isAir()) {
+        if (!blockstate.isEmpty()) { // Neo: Fix MC-232360 for modded blocks (Makes modded isAir blocks not be replaced with Blocks.AIR in all-air chunk sections)
             this.nonEmptyBlockCount--;
             if (blockstate.isRandomlyTicking()) {
                 this.tickingBlockCount--;
@@ -76,7 +_,7 @@
             this.tickingFluidCount--;
         }
 
-        if (!p_62995_.isAir()) {
+        if (!p_62995_.isEmpty()) { // Neo: Fix MC-232360 for modded blocks (Makes modded isAir blocks not be replaced with Blocks.AIR in all-air chunk sections)
             this.nonEmptyBlockCount++;
             if (p_62995_.isRandomlyTicking()) {
                 this.tickingBlockCount++;
@@ -114,7 +_,7 @@
 
             public void accept(BlockState p_204444_, int p_204445_) {
                 FluidState fluidstate = p_204444_.getFluidState();
-                if (!p_204444_.isAir()) {
+                if (!p_204444_.isEmpty()) { // Neo: Fix MC-232360 for modded blocks (Makes modded isAir blocks not be replaced with Blocks.AIR in all-air chunk sections)
                     this.nonEmptyBlockCount += p_204445_;
                     if (p_204444_.isRandomlyTicking()) {
                         this.tickingBlockCount += p_204445_;
