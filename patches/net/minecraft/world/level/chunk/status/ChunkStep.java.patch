--- a/net/minecraft/world/level/chunk/status/ChunkStep.java
+++ b/net/minecraft/world/level/chunk/status/ChunkStep.java
@@ -11,34 +_,124 @@
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ProtoChunk;
 
-public record ChunkStep(
-    ChunkStatus targetStatus, ChunkDependencies directDependencies, ChunkDependencies accumulatedDependencies, int blockStateWriteRadius, ChunkStatusTask task
-) {
-    public int getAccumulatedRadiusOf(ChunkStatus p_347454_) {
-        return p_347454_ == this.targetStatus ? 0 : this.accumulatedDependencies.getRadiusOf(p_347454_);
-    }
-
-    public CompletableFuture<ChunkAccess> apply(WorldGenContext p_347561_, StaticCache2D<GenerationChunkHolder> p_347614_, ChunkAccess p_347449_) {
-        if (p_347449_.getPersistedStatus().isBefore(this.targetStatus)) {
-            ProfiledDuration profiledduration = JvmProfiler.INSTANCE
-                .onChunkGenerate(p_347449_.getPos(), p_347561_.level().dimension(), this.targetStatus.getName());
-            return this.task.doWork(p_347561_, this, p_347614_, p_347449_).thenApply(p_347625_ -> this.completeChunkGeneration(p_347625_, profiledduration));
+// Paper start - rewerite chunk system - convert record to class
+public final class ChunkStep implements ca.spottedleaf.moonrise.patches.chunk_system.status.ChunkSystemChunkStep { // Paper - rewrite chunk system
+    private final ChunkStatus targetStatus;
+    private final ChunkDependencies directDependencies;
+    private final ChunkDependencies accumulatedDependencies;
+    private final int blockStateWriteRadius;
+    private final ChunkStatusTask task;
+
+    private final ChunkStatus[] byRadius; // Paper - rewrite chunk system
+
+    public ChunkStep(
+            ChunkStatus targetStatus, ChunkDependencies directDependencies, ChunkDependencies accumulatedDependencies, int blockStateWriteRadius, ChunkStatusTask task
+    ) {
+        this.targetStatus = targetStatus;
+        this.directDependencies = directDependencies;
+        this.accumulatedDependencies = accumulatedDependencies;
+        this.blockStateWriteRadius = blockStateWriteRadius;
+        this.task = task;
+
+        // Paper start - rewrite chunk system
+        this.byRadius = new ChunkStatus[this.getAccumulatedRadiusOf(ChunkStatus.EMPTY) + 1];
+        this.byRadius[0] = targetStatus.getParent();
+
+        for (ChunkStatus status = targetStatus.getParent(); status != ChunkStatus.EMPTY; status = status.getParent()) {
+            final int radius = this.getAccumulatedRadiusOf(status);
+
+            for (int j = 0; j <= radius; ++j) {
+                if (this.byRadius[j] == null) {
+                    this.byRadius[j] = status;
+                }
+            }
+        }
+        // Paper end - rewrite chunk system
+    }
+
+    // Paper start - rewrite chunk system
+    @Override
+    public final ChunkStatus moonrise$getRequiredStatusAtRadius(final int radius) {
+        return this.byRadius[radius];
+    }
+    // Paper end - rewrite chunk system
+
+    // Paper start - rewerite chunk system - convert record to class
+
+    public int getAccumulatedRadiusOf(ChunkStatus status) {
+        return status == this.targetStatus ? 0 : this.accumulatedDependencies.getRadiusOf(status);
+    }
+
+    public CompletableFuture<ChunkAccess> apply(WorldGenContext context, StaticCache2D<GenerationChunkHolder> staticCache2D, ChunkAccess chunk) {
+        if (chunk.getPersistedStatus().isBefore(this.targetStatus)) {
+            ProfiledDuration profiledDuration = JvmProfiler.INSTANCE.onChunkGenerate(chunk.getPos(), context.level().dimension(), this.targetStatus.getName());
+            return this.task.doWork(context, this, staticCache2D, chunk).thenApply(generated -> this.completeChunkGeneration(generated, profiledDuration));
         } else {
-            return this.task.doWork(p_347561_, this, p_347614_, p_347449_);
-        }
-    }
-
-    private ChunkAccess completeChunkGeneration(ChunkAccess p_347705_, @Nullable ProfiledDuration p_347691_) {
-        if (p_347705_ instanceof ProtoChunk protochunk && protochunk.getPersistedStatus().isBefore(this.targetStatus)) {
-            protochunk.setPersistedStatus(this.targetStatus);
-        }
-
-        if (p_347691_ != null) {
-            p_347691_.finish();
-        }
-
-        return p_347705_;
-    }
+            return this.task.doWork(context, this, staticCache2D, chunk);
+        }
+    }
+
+    private ChunkAccess completeChunkGeneration(ChunkAccess chunk, @Nullable ProfiledDuration finishCallback) {
+        if (chunk instanceof ProtoChunk protoChunk && protoChunk.getPersistedStatus().isBefore(this.targetStatus)) {
+            protoChunk.setPersistedStatus(this.targetStatus);
+        }
+
+        if (finishCallback != null) {
+            finishCallback.finish();
+        }
+
+        return chunk;
+    }
+
+    // Paper start - rewerite chunk system - convert record to class
+    public ChunkStatus targetStatus() {
+        return targetStatus;
+    }
+
+    public ChunkDependencies directDependencies() {
+        return directDependencies;
+    }
+
+    public ChunkDependencies accumulatedDependencies() {
+        return accumulatedDependencies;
+    }
+
+    public int blockStateWriteRadius() {
+        return blockStateWriteRadius;
+    }
+
+    public ChunkStatusTask task() {
+        return task;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (obj == this) return true;
+        if (obj == null || obj.getClass() != this.getClass()) return false;
+        var that = (net.minecraft.world.level.chunk.status.ChunkStep) obj;
+        return java.util.Objects.equals(this.targetStatus, that.targetStatus) &&
+                java.util.Objects.equals(this.directDependencies, that.directDependencies) &&
+                java.util.Objects.equals(this.accumulatedDependencies, that.accumulatedDependencies) &&
+                this.blockStateWriteRadius == that.blockStateWriteRadius &&
+                java.util.Objects.equals(this.task, that.task);
+    }
+
+    @Override
+    public int hashCode() {
+        return java.util.Objects.hash(targetStatus, directDependencies, accumulatedDependencies, blockStateWriteRadius, task);
+    }
+
+    @Override
+    public String toString() {
+        return "ChunkStep[" +
+                "targetStatus=" + targetStatus + ", " +
+                "directDependencies=" + directDependencies + ", " +
+                "accumulatedDependencies=" + accumulatedDependencies + ", " +
+                "blockStateWriteRadius=" + blockStateWriteRadius + ", " +
+                "task=" + task + ']';
+    }
+    // Paper end - rewerite chunk system - convert record to class
+
 
     public static class Builder {
         private final ChunkStatus status;
@@ -48,62 +_,62 @@
         private int blockStateWriteRadius = -1;
         private ChunkStatusTask task = ChunkStatusTasks::passThrough;
 
-        protected Builder(ChunkStatus p_347618_) {
-            if (p_347618_.getParent() != p_347618_) {
-                throw new IllegalArgumentException("Not starting with the first status: " + p_347618_);
+        protected Builder(ChunkStatus targetStatus) {
+            if (targetStatus.getParent() != targetStatus) {
+                throw new IllegalArgumentException("Not starting with the first status: " + targetStatus);
             } else {
-                this.status = p_347618_;
+                this.status = targetStatus;
                 this.parent = null;
                 this.directDependenciesByRadius = new ChunkStatus[0];
             }
         }
 
-        protected Builder(ChunkStatus p_347600_, ChunkStep p_347655_) {
-            if (p_347655_.targetStatus.getIndex() != p_347600_.getIndex() - 1) {
-                throw new IllegalArgumentException("Out of order status: " + p_347600_);
+        protected Builder(ChunkStatus blockStateWriteRadius, ChunkStep previousStep) {
+            if (previousStep.targetStatus.getIndex() != blockStateWriteRadius.getIndex() - 1) {
+                throw new IllegalArgumentException("Out of order status: " + blockStateWriteRadius);
             } else {
-                this.status = p_347600_;
-                this.parent = p_347655_;
-                this.directDependenciesByRadius = new ChunkStatus[]{p_347655_.targetStatus};
+                this.status = blockStateWriteRadius;
+                this.parent = previousStep;
+                this.directDependenciesByRadius = new ChunkStatus[]{previousStep.targetStatus};
             }
         }
 
-        public ChunkStep.Builder addRequirement(ChunkStatus p_347610_, int p_347602_) {
-            if (p_347610_.isOrAfter(this.status)) {
-                throw new IllegalArgumentException("Status " + p_347610_ + " can not be required by " + this.status);
+        public ChunkStep.Builder addRequirement(ChunkStatus status, int level) {
+            if (status.isOrAfter(this.status)) {
+                throw new IllegalArgumentException("Status " + status + " can not be required by " + this.status);
             } else {
-                ChunkStatus[] achunkstatus = this.directDependenciesByRadius;
-                int i = p_347602_ + 1;
-                if (i > achunkstatus.length) {
+                ChunkStatus[] chunkStatuss = this.directDependenciesByRadius;
+                int i = level + 1;
+                if (i > chunkStatuss.length) {
                     this.directDependenciesByRadius = new ChunkStatus[i];
-                    Arrays.fill(this.directDependenciesByRadius, p_347610_);
+                    Arrays.fill(this.directDependenciesByRadius, status);
                 }
 
-                for (int j = 0; j < Math.min(i, achunkstatus.length); j++) {
-                    this.directDependenciesByRadius[j] = ChunkStatus.max(achunkstatus[j], p_347610_);
+                for (int j = 0; j < Math.min(i, chunkStatuss.length); j++) {
+                    this.directDependenciesByRadius[j] = ChunkStatus.max(chunkStatuss[j], status);
                 }
 
                 return this;
             }
         }
 
-        public ChunkStep.Builder blockStateWriteRadius(int p_347450_) {
-            this.blockStateWriteRadius = p_347450_;
+        public ChunkStep.Builder blockStateWriteRadius(int blockStateWriteRadius) {
+            this.blockStateWriteRadius = blockStateWriteRadius;
             return this;
         }
 
-        public ChunkStep.Builder setTask(ChunkStatusTask p_347502_) {
-            this.task = p_347502_;
+        public ChunkStep.Builder setTask(ChunkStatusTask task) {
+            this.task = task;
             return this;
         }
 
         public ChunkStep build() {
             return new ChunkStep(
-                this.status,
-                new ChunkDependencies(ImmutableList.copyOf(this.directDependenciesByRadius)),
-                new ChunkDependencies(ImmutableList.copyOf(this.buildAccumulatedDependencies())),
-                this.blockStateWriteRadius,
-                this.task
+                    this.status,
+                    new ChunkDependencies(ImmutableList.copyOf(this.directDependenciesByRadius)),
+                    new ChunkDependencies(ImmutableList.copyOf(this.buildAccumulatedDependencies())),
+                    this.blockStateWriteRadius,
+                    this.task
             );
         }
 
@@ -112,27 +_,27 @@
                 return this.directDependenciesByRadius;
             } else {
                 int i = this.getRadiusOfParent(this.parent.targetStatus);
-                ChunkDependencies chunkdependencies = this.parent.accumulatedDependencies;
-                ChunkStatus[] achunkstatus = new ChunkStatus[Math.max(i + chunkdependencies.size(), this.directDependenciesByRadius.length)];
+                ChunkDependencies chunkDependencies = this.parent.accumulatedDependencies;
+                ChunkStatus[] chunkStatuss = new ChunkStatus[Math.max(i + chunkDependencies.size(), this.directDependenciesByRadius.length)];
 
-                for (int j = 0; j < achunkstatus.length; j++) {
+                for (int j = 0; j < chunkStatuss.length; j++) {
                     int k = j - i;
-                    if (k < 0 || k >= chunkdependencies.size()) {
-                        achunkstatus[j] = this.directDependenciesByRadius[j];
+                    if (k < 0 || k >= chunkDependencies.size()) {
+                        chunkStatuss[j] = this.directDependenciesByRadius[j];
                     } else if (j >= this.directDependenciesByRadius.length) {
-                        achunkstatus[j] = chunkdependencies.get(k);
+                        chunkStatuss[j] = chunkDependencies.get(k);
                     } else {
-                        achunkstatus[j] = ChunkStatus.max(this.directDependenciesByRadius[j], chunkdependencies.get(k));
+                        chunkStatuss[j] = ChunkStatus.max(this.directDependenciesByRadius[j], chunkDependencies.get(k));
                     }
                 }
 
-                return achunkstatus;
+                return chunkStatuss;
             }
         }
 
-        private int getRadiusOfParent(ChunkStatus p_347567_) {
+        private int getRadiusOfParent(ChunkStatus status) {
             for (int i = this.directDependenciesByRadius.length - 1; i >= 0; i--) {
-                if (this.directDependenciesByRadius[i].isOrAfter(p_347567_)) {
+                if (this.directDependenciesByRadius[i].isOrAfter(status)) {
                     return i;
                 }
             }
