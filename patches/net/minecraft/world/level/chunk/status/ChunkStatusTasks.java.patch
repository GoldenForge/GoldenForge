--- a/net/minecraft/world/level/chunk/status/ChunkStatusTasks.java
+++ b/net/minecraft/world/level/chunk/status/ChunkStatusTasks.java
@@ -196,15 +_,26 @@
                 if (protochunk instanceof ImposterProtoChunk) {
                     levelchunk = ((ImposterProtoChunk)protochunk).getWrapped();
                 } else {
-                    levelchunk = new LevelChunk(serverlevel, protochunk, p_347400_ -> postLoadProtoChunk(serverlevel, protochunk.getEntities()));
+                    levelchunk = new LevelChunk(serverlevel, protochunk, p_347400_ -> postLoadProtoChunk(serverlevel, protochunk.getEntities(), protochunk.getPos())); // Paper - rewrite chunk system
                     generationchunkholder.replaceProtoChunk(new ImposterProtoChunk(levelchunk, false));
                 }
 
                 levelchunk.setFullStatus(generationchunkholder::getFullStatus);
+                try {
+                generationchunkholder.currentlyLoading = levelchunk; // Neo: bypass the future chain when getChunk is called, this prevents deadlocks.
                 levelchunk.runPostLoad();
+                } finally {
+                    generationchunkholder.currentlyLoading = null; // Neo: Stop bypassing the future chain.
+                }
                 levelchunk.setLoaded(true);
+                try {
+                generationchunkholder.currentlyLoading = levelchunk; // Neo: bypass the future chain when getChunk is called, this prevents deadlocks.
                 levelchunk.registerAllBlockEntitiesAfterLevelLoad();
                 levelchunk.registerTickContainerInLevel(serverlevel);
+                net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.ChunkEvent.Load(levelchunk, !(protochunk instanceof ImposterProtoChunk)));
+                } finally {
+                    generationchunkholder.currentlyLoading = null; // Neo: Stop bypassing the future chain.
+                }
                 return levelchunk;
             },
             p_347404_ -> p_347565_.mainThreadMailBox()
@@ -212,9 +_,9 @@
         );
     }
 
-    private static void postLoadProtoChunk(ServerLevel p_347492_, List<CompoundTag> p_347609_) {
+    public static void postLoadProtoChunk(ServerLevel p_347492_, List<CompoundTag> p_347609_, ChunkPos pos) { // Paper - public, add ChunkPos param
         if (!p_347609_.isEmpty()) {
-            p_347492_.addWorldGenChunkEntities(EntityType.loadEntitiesRecursive(p_347609_, p_347492_));
+            p_347492_.addWorldGenChunkEntities(EntityType.loadEntitiesRecursive(p_347609_, p_347492_), pos);
         }
     }
 }
