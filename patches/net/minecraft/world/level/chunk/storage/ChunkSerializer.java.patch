--- a/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -7,10 +_,8 @@
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.shorts.ShortList;
-import java.util.Arrays;
-import java.util.EnumSet;
-import java.util.Map;
-import java.util.Objects;
+
+import java.util.*;
 import java.util.Map.Entry;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
@@ -82,6 +_,19 @@
     public static final String BLOCK_LIGHT_TAG = "BlockLight";
     public static final String SKY_LIGHT_TAG = "SkyLight";
 
+    // Paper start - guard against serializing mismatching coordinates
+    // TODO Note: This needs to be re-checked each update
+    public static ChunkPos getChunkCoordinate(final CompoundTag chunkData) {
+        final int dataVersion = ChunkStorage.getVersion(chunkData);
+        if (dataVersion < 2842) { // Level tag is removed after this version
+            final CompoundTag levelData = chunkData.getCompound("Level");
+            return new ChunkPos(levelData.getInt("xPos"), levelData.getInt("zPos"));
+        } else {
+            return new ChunkPos(chunkData.getInt("xPos"), chunkData.getInt("zPos"));
+        }
+    }
+    // Paper end - guard against serializing mismatching coordinates
+
     public static ProtoChunk read(ServerLevel p_188231_, PoiManager p_188232_, RegionStorageInfo p_352213_, ChunkPos p_188233_, CompoundTag p_188234_) {
         ChunkPos chunkpos = new ChunkPos(p_188234_.getInt("xPos"), p_188234_.getInt("zPos"));
         if (!Objects.equals(p_188233_, chunkpos)) {
@@ -131,7 +_,9 @@
                 LevelChunkSection levelchunksection = new LevelChunkSection(palettedcontainer, palettedcontainerro);
                 alevelchunksection[l] = levelchunksection;
                 SectionPos sectionpos = SectionPos.of(p_188233_, k);
-                p_188232_.checkConsistencyWithBlocks(sectionpos, levelchunksection);
+
+                // Paper - rewrite chunk system - moved to final load stage
+                //p_188232_.checkConsistencyWithBlocks(sectionpos, levelchunksection);
             }
 
             boolean flag3 = compoundtag.contains("BlockLight", 7);
@@ -183,6 +_,8 @@
                 postLoadChunk(p_188231_, p_188234_),
                 blendingdata
             );
+            if (p_188234_.contains(net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager.LIGHT_NBT_KEY, net.minecraft.nbt.Tag.TAG_LIST))
+                Objects.requireNonNull(((LevelChunk)chunkaccess).getAuxLightManager(p_188233_)).deserializeNBT(p_188231_.registryAccess(), p_188234_.getList(net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager.LIGHT_NBT_KEY, net.minecraft.nbt.Tag.TAG_COMPOUND));
         } else {
             ProtoChunkTicks<Block> protochunkticks = ProtoChunkTicks.load(
                 p_188234_.getList("block_ticks", 10), p_258992_ -> BuiltInRegistries.BLOCK.getOptional(ResourceLocation.tryParse(p_258992_)), p_188233_
@@ -209,6 +_,8 @@
             }
         }
 
+        if (p_188234_.contains(net.neoforged.neoforge.attachment.AttachmentHolder.ATTACHMENTS_NBT_KEY, net.minecraft.nbt.Tag.TAG_COMPOUND))
+            chunkaccess.readAttachmentsFromNBT(p_188231_.registryAccess(), p_188234_.getCompound(net.neoforged.neoforge.attachment.AttachmentHolder.ATTACHMENTS_NBT_KEY));
         chunkaccess.setLightCorrect(flag);
         CompoundTag compoundtag2 = p_188234_.getCompound("Heightmaps");
         EnumSet<Heightmap.Types> enumset = EnumSet.noneOf(Heightmap.Types.class);
@@ -240,7 +_,9 @@
             }
         }
 
+        ca.spottedleaf.moonrise.patches.starlight.util.SaveUtil.loadLightHook(p_188231_, p_188233_, p_188234_, (ChunkAccess)chunkaccess); // Paper - rewrite chunk system - note: it's ok to pass the raw value instead of wrapped
         if (chunktype == ChunkType.LEVELCHUNK) {
+            net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.ChunkDataEvent.Load(chunkaccess, p_188234_, chunktype));
             return new ImposterProtoChunk((LevelChunk)chunkaccess, false);
         } else {
             ProtoChunk protochunk1 = (ProtoChunk)chunkaccess;
@@ -264,6 +_,7 @@
                 protochunk1.setCarvingMask(generationstep$carving, new CarvingMask(compoundtag4.getLongArray(s1), chunkaccess.getMinBuildHeight()));
             }
 
+            net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.ChunkDataEvent.Load(chunkaccess, p_188234_, chunktype));
             return protochunk1;
         }
     }
@@ -278,13 +_,39 @@
         );
     }
 
+    // Paper start - async chunk saving
+    // must be called sync
+    public static ca.spottedleaf.moonrise.patches.chunk_system.async_save.AsyncChunkSaveData getAsyncSaveData(ServerLevel world, ChunkAccess chunk) {
+        ca.spottedleaf.moonrise.common.util.TickThread.ensureTickThread(world, chunk.locX, chunk.locZ, "Preparing async chunk save data");
+
+        final CompoundTag tickLists = new CompoundTag();
+        ChunkSerializer.saveTicks(world, tickLists, chunk.getTicksForSerialization());
+
+        ListTag blockEntitiesSerialized = new ListTag();
+        for (final BlockPos blockPos : chunk.getBlockEntitiesPos()) {
+            final CompoundTag blockEntityNbt = chunk.getBlockEntityNbtForSaving(blockPos, world.registryAccess());
+            if (blockEntityNbt != null) {
+                blockEntitiesSerialized.add(blockEntityNbt);
+            }
+        }
+
+        return new ca.spottedleaf.moonrise.patches.chunk_system.async_save.AsyncChunkSaveData(
+                tickLists.get(BLOCK_TICKS_TAG),
+                tickLists.get(FLUID_TICKS_TAG),
+                blockEntitiesSerialized,
+                world.getGameTime()
+        );
+    }
+    // Paper end - async chunk saving
+
     public static CompoundTag write(ServerLevel p_63455_, ChunkAccess p_63456_) {
+        ca.spottedleaf.moonrise.patches.chunk_system.async_save.AsyncChunkSaveData asyncsavedata = p_63456_.asyncsavedata;
         ChunkPos chunkpos = p_63456_.getPos();
         CompoundTag compoundtag = NbtUtils.addCurrentDataVersion(new CompoundTag());
         compoundtag.putInt("xPos", chunkpos.x);
         compoundtag.putInt("yPos", p_63456_.getMinSection());
         compoundtag.putInt("zPos", chunkpos.z);
-        compoundtag.putLong("LastUpdate", p_63455_.getGameTime());
+        compoundtag.putLong("LastUpdate", asyncsavedata != null ? asyncsavedata.worldTime() : p_63455_.getGameTime()); // Paper - async chunk saving // Paper - diff on change
         compoundtag.putLong("InhabitedTime", p_63456_.getInhabitedTime());
         compoundtag.putString("Status", BuiltInRegistries.CHUNK_STATUS.getKey(p_63456_.getPersistedStatus()).toString());
         BlendingData blendingdata = p_63456_.getBlendingData();
@@ -348,16 +_,30 @@
             compoundtag.putBoolean("isLightOn", true);
         }
 
-        ListTag listtag1 = new ListTag();
-
-        for (BlockPos blockpos : p_63456_.getBlockEntitiesPos()) {
-            CompoundTag compoundtag3 = p_63456_.getBlockEntityNbtForSaving(blockpos, p_63455_.registryAccess());
-            if (compoundtag3 != null) {
-                listtag1.add(compoundtag3);
+        // Paper start - async chunk saving
+        ListTag nbttaglist1;
+        Iterator<BlockPos> iterator;
+        if (asyncsavedata != null) {
+            nbttaglist1 = asyncsavedata.blockEntities();
+            iterator = java.util.Collections.emptyIterator();
+        } else {
+            nbttaglist1 = new ListTag();
+            iterator = p_63456_.getBlockEntitiesPos().iterator();
+        }
+        // Paper end - async chunk saving
+
+        CompoundTag nbttagcompound2;
+
+        while (iterator.hasNext()) {
+            BlockPos blockposition = (BlockPos) iterator.next();
+
+            nbttagcompound2 = p_63456_.getBlockEntityNbtForSaving(blockposition, p_63455_.registryAccess());
+            if (nbttagcompound2 != null) {
+                nbttaglist1.add(nbttagcompound2);
             }
         }
 
-        compoundtag.put("block_entities", listtag1);
+        compoundtag.put("block_entities", nbttaglist1);
         if (p_63456_.getPersistedStatus().getChunkType() == ChunkType.PROTOCHUNK) {
             ProtoChunk protochunk = (ProtoChunk)p_63456_;
             ListTag listtag2 = new ListTag();
@@ -374,8 +_,20 @@
 
             compoundtag.put("CarvingMasks", compoundtag4);
         }
-
-        saveTicks(p_63455_, compoundtag, p_63456_.getTicksForSerialization());
+        else if (p_63456_ instanceof LevelChunk levelChunk){
+
+             Tag lightTag = levelChunk.getAuxLightManager(chunkpos).serializeNBT(p_63455_.registryAccess());
+             if (lightTag != null) compoundtag.put(net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager.LIGHT_NBT_KEY, lightTag);
+        }
+
+        // Paper start
+        if (asyncsavedata != null) {
+            compoundtag.put(BLOCK_TICKS_TAG, asyncsavedata.blockTickList());
+            compoundtag.put(FLUID_TICKS_TAG, asyncsavedata.fluidTickList());
+        } else {
+            saveTicks(p_63455_, compoundtag, p_63456_.getTicksForSerialization());
+        }
+        // Paper end
         compoundtag.put("PostProcessing", packOffsets(p_63456_.getPostProcessing()));
         CompoundTag compoundtag2 = new CompoundTag();
 
@@ -385,11 +_,18 @@
             }
         }
 
+        try {
+            final CompoundTag capTag = p_63456_.writeAttachmentsToNBT(p_63455_.registryAccess());
+            if (capTag != null) compoundtag.put(net.neoforged.neoforge.attachment.AttachmentHolder.ATTACHMENTS_NBT_KEY, capTag);
+        } catch (Exception exception) {
+            LOGGER.error("Failed to write chunk attachments. An attachment has likely thrown an exception trying to write state. It will not persist. Report this to the mod author", exception);
+        }
         compoundtag.put("Heightmaps", compoundtag2);
         compoundtag.put(
             "structures",
             packStructureData(StructurePieceSerializationContext.fromLevel(p_63455_), chunkpos, p_63456_.getAllStarts(), p_63456_.getAllReferences())
         );
+        ca.spottedleaf.moonrise.patches.starlight.util.SaveUtil.saveLightHook(p_63455_, p_63456_, compoundtag); // Paper - rewrite chunk system
         return compoundtag;
     }
 
@@ -409,7 +_,7 @@
         ListTag listtag1 = getListOfCompoundsOrNull(p_196892_, "block_entities");
         return listtag == null && listtag1 == null ? null : p_196904_ -> {
             if (listtag != null) {
-                p_196891_.addLegacyChunkEntities(EntityType.loadEntitiesRecursive(listtag, p_196891_));
+                p_196891_.addLegacyChunkEntities(EntityType.loadEntitiesRecursive(listtag, p_196891_), p_196904_.getPos()); // Paper - rewrite chunk system
             }
 
             if (listtag1 != null) {
