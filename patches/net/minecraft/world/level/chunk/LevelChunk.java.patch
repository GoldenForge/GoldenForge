--- a/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/net/minecraft/world/level/chunk/LevelChunk.java
@@ -50,7 +_,7 @@
 import net.minecraft.world.ticks.TickContainerAccess;
 import org.slf4j.Logger;
 
-public class LevelChunk extends ChunkAccess {
+public class LevelChunk extends ChunkAccess implements net.neoforged.neoforge.attachment.IAttachmentHolder, ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkSystemLevelChunk, ca.spottedleaf.moonrise.patches.starlight.chunk.StarlightChunk, ca.spottedleaf.moonrise.patches.chunk_getblock.GetBlockChunk { // Paper - rewrite chunk system // Paper - get block chunk optimisation
     static final Logger LOGGER = LogUtils.getLogger();
     private static final TickingBlockEntity NULL_TICKER = new TickingBlockEntity() {
         @Override
@@ -111,7 +_,49 @@
         this.postLoad = p_196861_;
         this.blockTicks = p_196857_;
         this.fluidTicks = p_196858_;
-    }
+        // Paper start - get block chunk optimisation
+        this.minSection = ca.spottedleaf.moonrise.common.util.WorldUtil.getMinSection(level);
+        this.maxSection = ca.spottedleaf.moonrise.common.util.WorldUtil.getMaxSection(level);
+
+        final boolean empty = ((Object)this instanceof EmptyLevelChunk);
+        this.debug = !empty && this.level.isDebug();
+        this.defaultBlockState = empty ? VOID_AIR_BLOCKSTATE : AIR_BLOCKSTATE;
+        // Paper end - get block chunk optimisation
+    }
+
+    // Paper start - rewrite chunk system
+    private boolean postProcessingDone;
+    private net.minecraft.server.level.ServerChunkCache.ChunkAndHolder chunkAndHolder;
+
+    @Override
+    public final boolean moonrise$isPostProcessingDone() {
+        return this.postProcessingDone;
+    }
+
+    @Override
+    public final net.minecraft.server.level.ServerChunkCache.ChunkAndHolder moonrise$getChunkAndHolder() {
+        return this.chunkAndHolder;
+    }
+
+    @Override
+    public final void moonrise$setChunkAndHolder(final net.minecraft.server.level.ServerChunkCache.ChunkAndHolder holder) {
+        this.chunkAndHolder = holder;
+    }
+    // Paper end - rewrite chunk system
+    // Paper start - get block chunk optimisation
+    private static final BlockState AIR_BLOCKSTATE = Blocks.AIR.defaultBlockState();
+    private static final FluidState AIR_FLUIDSTATE = Fluids.EMPTY.defaultFluidState();
+    private static final BlockState VOID_AIR_BLOCKSTATE = Blocks.VOID_AIR.defaultBlockState();
+    private final int minSection;
+    private final int maxSection;
+    private final boolean debug;
+    private final BlockState defaultBlockState;
+
+    @Override
+    public final BlockState moonrise$getBlock(final int x, final int y, final int z) {
+        return this.getBlockStateFinal(x, y, z);
+    }
+    // Paper end - get block chunk optimisation
 
     public LevelChunk(ServerLevel p_196850_, ProtoChunk p_196851_, @Nullable LevelChunk.PostLoadProcessor p_196852_) {
         this(
@@ -139,15 +_,23 @@
         this.setAllStarts(p_196851_.getAllStarts());
         this.setAllReferences(p_196851_.getAllReferences());
 
+        net.neoforged.neoforge.attachment.AttachmentInternals.copyChunkAttachmentsOnPromotion(p_196850_.registryAccess(), p_196851_.getAttachmentHolder(), this.getAttachmentHolder());
         for (Entry<Heightmap.Types, Heightmap> entry : p_196851_.getHeightmaps()) {
             if (ChunkStatus.FULL.heightmapsAfter().contains(entry.getKey())) {
                 this.setHeightmap(entry.getKey(), entry.getValue().getRawData());
             }
         }
 
-        this.skyLightSources = p_196851_.skyLightSources;
+        // Paper - rewrite chunk system
         this.setLightCorrect(p_196851_.isLightCorrect());
         this.unsaved = true;
+
+        // Paper start - rewrite chunk system
+        this.starlight$setBlockNibbles(((ca.spottedleaf.moonrise.patches.starlight.chunk.StarlightChunk)p_196851_).starlight$getBlockNibbles());
+        this.starlight$setSkyNibbles(((ca.spottedleaf.moonrise.patches.starlight.chunk.StarlightChunk)p_196851_).starlight$getSkyNibbles());
+        this.starlight$setSkyEmptinessMap(((ca.spottedleaf.moonrise.patches.starlight.chunk.StarlightChunk)p_196851_).starlight$getSkyEmptinessMap());
+        this.starlight$setBlockEmptinessMap(((ca.spottedleaf.moonrise.patches.starlight.chunk.StarlightChunk)p_196851_).starlight$getBlockEmptinessMap());
+        // Paper end - rewrite chunk system
     }
 
     @Override
@@ -173,8 +_,26 @@
             : super.getListenerRegistry(p_251193_);
     }
 
+    // Paper start - Perf: Reduce instructions and provide final method
+    public BlockState getBlockState(final int x, final int y, final int z) {
+        return this.getBlockStateFinal(x, y, z);
+    }
+    public BlockState getBlockStateFinal(final int x, final int y, final int z) {
+        // Copied and modified from below
+        final int sectionIndex = this.getSectionIndex(y);
+        if (sectionIndex < 0 || sectionIndex >= this.sections.length
+                || this.sections[sectionIndex].nonEmptyBlockCount == 0) {
+            return Blocks.AIR.defaultBlockState();
+        }
+        return this.sections[sectionIndex].states.get((y & 15) << 8 | (z & 15) << 4 | x & 15);
+    }
+
     @Override
     public BlockState getBlockState(BlockPos p_62923_) {
+        if (true) {
+            return this.getBlockStateFinal(p_62923_.getX(), p_62923_.getY(), p_62923_.getZ());
+        }
+        // Paper end - Perf: Reduce instructions and provide final method
         int i = p_62923_.getX();
         int j = p_62923_.getY();
         int k = p_62923_.getZ();
@@ -209,28 +_,48 @@
         }
     }
 
+    // Paper start - If loaded util
+    @Override
+    public final FluidState getFluidIfLoaded(BlockPos blockposition) {
+        return this.getFluidState(blockposition);
+    }
+
+    @Override
+    public final BlockState getBlockStateIfLoaded(BlockPos blockposition) {
+        return this.getBlockState(blockposition);
+    }
+    // Paper end
+
     @Override
     public FluidState getFluidState(BlockPos p_62895_) {
         return this.getFluidState(p_62895_.getX(), p_62895_.getY(), p_62895_.getZ());
     }
 
-    public FluidState getFluidState(int p_62815_, int p_62816_, int p_62817_) {
-        try {
-            int i = this.getSectionIndex(p_62816_);
-            if (i >= 0 && i < this.sections.length) {
-                LevelChunkSection levelchunksection = this.sections[i];
-                if (!levelchunksection.hasOnlyAir()) {
-                    return levelchunksection.getFluidState(p_62815_ & 15, p_62816_ & 15, p_62817_ & 15);
-                }
+    public FluidState getFluidState(int x, int y, int z) {
+        // Paper start - Perf: Optimise Chunk#getFluid
+        // try {  // Remove try catch
+        int index = this.getSectionIndex(y);
+        if (index >= 0 && index < this.sections.length) {
+            LevelChunkSection chunksection = this.sections[index];
+
+            if (!chunksection.hasOnlyAir()) {
+                return chunksection.states.get((y & 15) << 8 | (z & 15) << 4 | x & 15).getFluidState();
+                // Paper end - Perf: Optimise Chunk#getFluid
             }
+        }
 
-            return Fluids.EMPTY.defaultFluidState();
+        return Fluids.EMPTY.defaultFluidState();
+        /* // Paper - Perf: Optimise Chunk#getFluid
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Getting fluid state");
-            CrashReportCategory crashreportcategory = crashreport.addCategory("Block being got");
-            crashreportcategory.setDetail("Location", () -> CrashReportCategory.formatLocation(this, p_62815_, p_62816_, p_62817_));
+            CrashReportCategory crashreportsystemdetails = crashreport.addCategory("Block being got");
+
+            crashreportsystemdetails.setDetail("Location", () -> {
+                return CrashReportCategory.formatLocation(this, x, y, z);
+            });
             throw new ReportedException(crashreport);
         }
+         */  // Paper - Perf: Optimise Chunk#getFluid
     }
 
     @Nullable
@@ -262,7 +_,7 @@
                 if (LightEngine.hasDifferentLightProperties(this, p_62865_, blockstate, p_62866_)) {
                     ProfilerFiller profilerfiller = this.level.getProfiler();
                     profilerfiller.push("updateSkyLightSources");
-                    this.skyLightSources.update(this, j, i, l);
+                    // Paper - rewrite chunk system
                     profilerfiller.popPush("queueCheckLight");
                     this.level.getChunkSource().getLightEngine().checkBlock(p_62865_);
                     profilerfiller.pop();
@@ -278,7 +_,7 @@
                 if (!levelchunksection.getBlockState(j, k, l).is(block)) {
                     return null;
                 } else {
-                    if (!this.level.isClientSide) {
+                    if (!this.level.isClientSide && !this.level.captureBlockSnapshots) {
                         p_62866_.onPlace(this.level, p_62865_, blockstate, p_62867_);
                     }
 
@@ -327,6 +_,10 @@
     @Nullable
     public BlockEntity getBlockEntity(BlockPos p_62868_, LevelChunk.EntityCreationType p_62869_) {
         BlockEntity blockentity = this.blockEntities.get(p_62868_);
+        if (blockentity != null && blockentity.isRemoved()) {
+            blockEntities.remove(p_62868_);
+            blockentity = null;
+        }
         if (blockentity == null) {
             CompoundTag compoundtag = this.pendingBlockEntities.remove(p_62868_);
             if (compoundtag != null) {
@@ -344,9 +_,6 @@
                     this.addAndRegisterBlockEntity(blockentity);
                 }
             }
-        } else if (blockentity.isRemoved()) {
-            this.blockEntities.remove(p_62868_);
-            return null;
         }
 
         return blockentity;
@@ -360,6 +_,7 @@
             }
 
             this.updateBlockEntityTicker(p_156391_);
+            this.level.addFreshBlockEntities(java.util.List.of(p_156391_));
         }
     }
 
@@ -403,6 +_,7 @@
             BlockEntity blockentity = this.blockEntities.put(blockpos.immutable(), p_156374_);
             if (blockentity != null && blockentity != p_156374_) {
                 blockentity.setRemoved();
+                auxLightManager.removeLightAt(blockpos);
             }
         }
     }
@@ -412,9 +_,14 @@
     public CompoundTag getBlockEntityNbtForSaving(BlockPos p_62932_, HolderLookup.Provider p_323699_) {
         BlockEntity blockentity = this.getBlockEntity(p_62932_);
         if (blockentity != null && !blockentity.isRemoved()) {
+            try {
             CompoundTag compoundtag1 = blockentity.saveWithFullMetadata(this.level.registryAccess());
             compoundtag1.putBoolean("keepPacked", false);
             return compoundtag1;
+            } catch (Exception e) {
+                LOGGER.error("A BlockEntity type {} has thrown an exception trying to write state. It will not persist, Report this to the mod author", blockentity.getClass().getName(), e);
+                return null;
+            }
         } else {
             CompoundTag compoundtag = this.pendingBlockEntities.get(p_62932_);
             if (compoundtag != null) {
@@ -436,6 +_,7 @@
                 }
 
                 blockentity.setRemoved();
+                auxLightManager.removeLightAt(p_62919_);
             }
         }
 
@@ -472,6 +_,30 @@
         }
     }
 
+    @Override
+    public boolean isUnsaved() {
+        // Paper start - rewrite chunk system
+        final long gameTime = this.level.getGameTime();
+        if (((ca.spottedleaf.moonrise.patches.chunk_system.ticks.ChunkSystemLevelChunkTicks)this.blockTicks).moonrise$isDirty(gameTime)
+                || ((ca.spottedleaf.moonrise.patches.chunk_system.ticks.ChunkSystemLevelChunkTicks)this.fluidTicks).moonrise$isDirty(gameTime)) {
+            return true;
+        }
+
+        return super.isUnsaved();
+        // Paper end - rewrite chunk system
+    }
+
+    // Paper start - rewrite chunk system
+    @Override
+    public void setUnsaved(final boolean needsSaving) {
+        if (!needsSaving) {
+            ((ca.spottedleaf.moonrise.patches.chunk_system.ticks.ChunkSystemLevelChunkTicks)this.blockTicks).moonrise$clearDirty();
+            ((ca.spottedleaf.moonrise.patches.chunk_system.ticks.ChunkSystemLevelChunkTicks)this.fluidTicks).moonrise$clearDirty();
+        }
+        super.setUnsaved(needsSaving);
+    }
+    // Paper end - rewrite chunk system
+
     public boolean isEmpty() {
         return false;
     }
@@ -496,7 +_,7 @@
         p_187974_.accept((p_338077_, p_338078_, p_338079_) -> {
             BlockEntity blockentity = this.getBlockEntity(p_338077_, LevelChunk.EntityCreationType.IMMEDIATE);
             if (blockentity != null && p_338079_ != null && blockentity.getType() == p_338078_) {
-                blockentity.loadWithComponents(p_338079_, this.level.registryAccess());
+                blockentity.handleUpdateTag(p_338079_, this.level.registryAccess());
             }
         });
     }
@@ -548,6 +_,7 @@
 
         this.pendingBlockEntities.clear();
         this.upgradeData.upgrade(this);
+        this.postProcessingDone = true; // Paper - rewrite chunk system
     }
 
     @Nullable
@@ -604,6 +_,7 @@
     }
 
     public void clearAllBlockEntities() {
+        this.blockEntities.values().forEach(BlockEntity::onChunkUnloaded);
         this.blockEntities.values().forEach(BlockEntity::setRemoved);
         this.blockEntities.clear();
         this.tickersInLevel.values().forEach(p_187966_ -> p_187966_.rebind(NULL_TICKER));
@@ -611,6 +_,7 @@
     }
 
     public void registerAllBlockEntitiesAfterLevelLoad() {
+        this.level.addFreshBlockEntities(this.blockEntities.values());
         this.blockEntities.values().forEach(p_187988_ -> {
             if (this.level instanceof ServerLevel serverlevel) {
                 this.addGameEventListener(p_187988_, serverlevel);
@@ -662,6 +_,14 @@
         return new LevelChunk.BoundTickingBlockEntity<>(p_156376_, p_156377_);
     }
 
+    // Neo: Threadsafe lighting system for BlockEntities that change lighting based on dynamic data changing.
+    private final net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager auxLightManager = new net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager(this);
+
+    @Override
+    public net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager getAuxLightManager(ChunkPos pos) {
+        return auxLightManager;
+    }
+
     class BoundTickingBlockEntity<T extends BlockEntity> implements TickingBlockEntity {
         private final T blockEntity;
         private final BlockEntityTicker<T> ticker;
@@ -679,6 +_,7 @@
                 if (LevelChunk.this.isTicking(blockpos)) {
                     try {
                         ProfilerFiller profilerfiller = LevelChunk.this.level.getProfiler();
+                        net.neoforged.neoforge.server.timings.TimeTracker.BLOCK_ENTITY_UPDATE.trackStart(blockEntity);
                         profilerfiller.push(this::getType);
                         BlockState blockstate = LevelChunk.this.getBlockState(blockpos);
                         if (this.blockEntity.getType().isValid(blockstate)) {
@@ -700,7 +_,15 @@
                         CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking block entity");
                         CrashReportCategory crashreportcategory = crashreport.addCategory("Block entity being ticked");
                         this.blockEntity.fillCrashReportCategory(crashreportcategory);
+
+                        if (net.neoforged.neoforge.common.NeoForgeConfig.SERVER.removeErroringBlockEntities.get()) {
+                            LOGGER.error("{}", crashreport.getFriendlyReport(net.minecraft.ReportType.CRASH));
+                            blockEntity.setRemoved();
+                            LevelChunk.this.removeBlockEntity(blockEntity.getBlockPos());
+                        } else
                         throw new ReportedException(crashreport);
+                    } finally {
+                        net.neoforged.neoforge.server.timings.TimeTracker.BLOCK_ENTITY_UPDATE.trackEnd(blockEntity);
                     }
                 }
             }
