--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -160,7 +_,8 @@
 import org.slf4j.Logger;
 
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements ServerInfo, CommandSource, AutoCloseable {
-    private static final Logger LOGGER = LogUtils.getLogger();
+    private static MinecraftServer SERVER; // Paper
+    public static final Logger LOGGER = LogUtils.getLogger();
     public static final String VANILLA_BRAND = "vanilla";
     private static final float AVERAGE_TICK_TIME_SMOOTHING = 0.8F;
     private static final int TICK_STATS_SPAN = 100;
@@ -250,9 +_,11 @@
     protected final WorldData worldData;
     private volatile boolean isSaving;
 
+    public boolean forceTicks; // Paper
+
     public static <S extends MinecraftServer> S spin(Function<Thread, S> p_129873_) {
         AtomicReference<S> atomicreference = new AtomicReference<>();
-        Thread thread = new Thread(() -> atomicreference.get().runServer(), "Server thread");
+        Thread thread = new io.papermc.paper.util.TickThread(() -> atomicreference.get().runServer(), "Server thread");
         thread.setUncaughtExceptionHandler((p_177909_, p_177910_) -> LOGGER.error("Uncaught exception in server thread", p_177910_));
         if (Runtime.getRuntime().availableProcessors() > 4) {
             thread.setPriority(8);
@@ -275,6 +_,7 @@
         ChunkProgressListenerFactory p_236730_
     ) {
         super("Server");
+        SERVER = this; // Paper - better singleton
         this.registries = p_236726_.registries();
         this.worldData = p_236726_.worldData();
         if (!this.registries.compositeAccess().registryOrThrow(Registries.LEVEL_STEM).containsKey(LevelStem.OVERWORLD)) {
@@ -358,6 +_,7 @@
         this.readScoreboard(dimensiondatastorage);
         this.commandStorage = new CommandStorage(dimensiondatastorage);
         WorldBorder worldborder = serverlevel.getWorldBorder();
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.LevelEvent.Load(levels.get(Level.OVERWORLD)));
         if (!serverleveldata.isInitialized()) {
             try {
                 setInitialSpawn(serverlevel, serverleveldata, worldoptions.generateBonusChest(), flag);
@@ -407,6 +_,7 @@
                 );
                 worldborder.addListener(new BorderChangeListener.DelegateBorderChangeListener(serverlevel1.getWorldBorder()));
                 this.levels.put(resourcekey1, serverlevel1);
+                net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.LevelEvent.Load(levels.get(resourcekey)));
             }
         }
 
@@ -418,6 +_,7 @@
             p_177898_.setSpawn(BlockPos.ZERO.above(80), 0.0F);
         } else {
             ServerChunkCache serverchunkcache = p_177897_.getChunkSource();
+            if (net.neoforged.neoforge.event.EventHooks.onCreateWorldSpawn(p_177897_, p_177898_)) return;
             ChunkPos chunkpos = new ChunkPos(serverchunkcache.randomState().sampler().findSpawnPosition());
             int i = serverchunkcache.getGenerator().getSpawnHeight(p_177897_);
             if (i < p_177897_.getMinBuildHeight()) {
@@ -480,6 +_,7 @@
     }
 
     private void prepareLevels(ChunkProgressListener p_129941_) {
+        this.forceTicks = true;
         ServerLevel serverlevel = this.overworld();
         LOGGER.info("Preparing start region for dimension {}", serverlevel.dimension().location());
         BlockPos blockpos = serverlevel.getSharedSpawnPos();
@@ -506,6 +_,7 @@
                     ChunkPos chunkpos = new ChunkPos(i);
                     serverlevel1.getChunkSource().updateChunkForced(chunkpos, true);
                 }
+                net.neoforged.neoforge.common.world.chunk.ForcedChunkManager.reinstatePersistentChunks(serverlevel1, forcedchunkssaveddata);
             }
         }
 
@@ -513,6 +_,7 @@
         this.waitUntilNextTick();
         p_129941_.stop();
         this.updateMobSpawningFlags();
+        this.forceTicks = false;
     }
 
     public GameType getDefaultGameType() {
@@ -529,15 +_,21 @@
 
     public abstract boolean shouldRconBroadcast();
 
-    public boolean saveAllChunks(boolean p_129886_, boolean p_129887_, boolean p_129888_) {
+    public boolean saveAllChunks(boolean suppressLogs, boolean flush, boolean force) {
+        // Paper start - rewrite chunk system - add close param
+        // This allows us to avoid double saving chunks by closing instead of saving then closing
+        return this.saveAllChunks(suppressLogs, flush, force, false);
+    }
+
+    public boolean saveAllChunks(boolean suppressLogs, boolean flush, boolean force, boolean close) {
         boolean flag = false;
 
         for(ServerLevel serverlevel : this.getAllLevels()) {
-            if (!p_129886_) {
+            if (!suppressLogs) {
                 LOGGER.info("Saving chunks for level '{}'/{}", serverlevel, serverlevel.dimension().location());
             }
 
-            serverlevel.save(null, p_129887_, serverlevel.noSave && !p_129888_);
+            serverlevel.save(null, flush, serverlevel.noSave && !force, close);
             flag = true;
         }
 
@@ -546,7 +_,7 @@
         serverleveldata.setWorldBorder(serverlevel2.getWorldBorder().createSettings());
         this.worldData.setCustomBossEvents(this.getCustomBossEvents().save());
         this.storageSource.saveDataTag(this.registryAccess(), this.worldData, this.getPlayerList().getSingleplayerData());
-        if (p_129887_) {
+        if (flush) {
             for(ServerLevel serverlevel1 : this.getAllLevels()) {
                 LOGGER.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", serverlevel1.getChunkSource().chunkMap.getStorageName());
             }
@@ -597,28 +_,7 @@
             }
         }
 
-        while(this.levels.values().stream().anyMatch(p_202480_ -> p_202480_.getChunkSource().chunkMap.hasWork())) {
-            this.nextTickTimeNanos = Util.getNanos() + TimeUtil.NANOSECONDS_PER_MILLISECOND;
-
-            for(ServerLevel serverlevel1 : this.getAllLevels()) {
-                serverlevel1.getChunkSource().removeTicketsOnClosing();
-                serverlevel1.getChunkSource().tick(() -> true, false);
-            }
-
-            this.waitUntilNextTick();
-        }
-
-        this.saveAllChunks(false, true, false);
-
-        for(ServerLevel serverlevel2 : this.getAllLevels()) {
-            if (serverlevel2 != null) {
-                try {
-                    serverlevel2.close();
-                } catch (IOException ioexception1) {
-                    LOGGER.error("Exception closing the level", (Throwable)ioexception1);
-                }
-            }
-        }
+        this.saveAllChunks(false, true, false, true); // Paper - rewrite chunk system - move closing into here
 
         this.isSaving = false;
         this.resources.close();
@@ -628,6 +_,15 @@
         } catch (IOException ioexception) {
             LOGGER.error("Failed to unlock level {}", this.storageSource.getLevelId(), ioexception);
         }
+
+        // Paper start - move final shutdown items here
+        LOGGER.info("Flushing Chunk IO");
+        // Paper end - move final shutdown items here
+        io.papermc.paper.chunk.system.io.RegionFileIOThread.close(true); // Paper - rewrite chunk system
+        // Paper start - move final shutdown items here
+        LOGGER.info("Closing Thread Pool");
+        Util.shutdownExecutors(); // Paper
+        LOGGER.info("Closing Server");
     }
 
     public String getLocalIp() {
@@ -653,17 +_,27 @@
         }
     }
 
+    public static volatile RuntimeException chunkSystemCrash; // Paper - rewrite chunk system
+
     protected void runServer() {
         try {
             if (!this.initServer()) {
                 throw new IllegalStateException("Failed to initialize server");
             }
 
+            net.neoforged.neoforge.server.ServerLifecycleHooks.handleServerStarted(this);
             this.nextTickTimeNanos = Util.getNanos();
             this.statusIcon = this.loadStatusIcon().orElse(null);
             this.status = this.buildServerStatus();
+            resetStatusCache(status);
 
             while(this.running) {
+                // Paper start - rewrite chunk system
+                // guarantee that nothing can stop the server from halting if it can at least still tick
+                if (this.chunkSystemCrash != null) {
+                    throw this.chunkSystemCrash;
+                }
+                // Paper end - rewrite chunk system
                 long i;
                 if (!this.isPaused() && this.tickRateManager.isSprinting() && this.tickRateManager.checkShouldSprintThisTick()) {
                     i = 0L;
@@ -704,6 +_,8 @@
                 this.isReady = true;
                 JvmProfiler.INSTANCE.onServerTick(this.smoothedTickTimeMillis);
             }
+            net.neoforged.neoforge.server.ServerLifecycleHooks.handleServerStopping(this);
+            net.neoforged.neoforge.server.ServerLifecycleHooks.expectServerStopped(); // Forge: Has to come before MinecraftServer#onServerCrash to avoid race conditions
         } catch (Throwable throwable1) {
             LOGGER.error("Encountered an unexpected exception", throwable1);
             CrashReport crashreport = constructOrExtractCrashReport(throwable1);
@@ -715,6 +_,7 @@
                 LOGGER.error("We were unable to save this crash report to disk.");
             }
 
+            net.neoforged.neoforge.server.ServerLifecycleHooks.expectServerStopped(); // Forge: Has to come before MinecraftServer#onServerCrash to avoid race conditions
             this.onServerCrash(crashreport);
         } finally {
             try {
@@ -727,6 +_,7 @@
                     this.services.profileCache().clearExecutor();
                 }
 
+                net.neoforged.neoforge.server.ServerLifecycleHooks.handleServerStopped(this);
                 this.onServerExit();
             }
         }
@@ -755,6 +_,11 @@
     }
 
     private boolean haveTime() {
+        // Paper start
+        if (this.forceTicks) {
+            return true;
+        }
+        // Paper end
         return this.runningTask() || Util.getNanos() < (this.mayHaveDelayedTasks ? this.delayedTasksMaxNextTickTimeNanos : this.nextTickTimeNanos);
     }
 
@@ -838,12 +_,14 @@
 
     public void tickServer(BooleanSupplier p_129871_) {
         long i = Util.getNanos();
+        net.neoforged.neoforge.event.EventHooks.onPreServerTick(p_129871_, this);
         ++this.tickCount;
         this.tickRateManager.tick();
         this.tickChildren(p_129871_);
         if (i - this.lastServerStatus >= STATUS_EXPIRE_TIME_NANOS) {
             this.lastServerStatus = i;
             this.status = this.buildServerStatus();
+            resetStatusCache(status);
         }
 
         --this.ticksUntilAutosave;
@@ -866,6 +_,17 @@
         long l = Util.getNanos();
         this.logTickTime(l - i);
         this.profiler.pop();
+        net.neoforged.neoforge.event.EventHooks.onPostServerTick(p_129871_, this);
+    }
+
+    private static final com.google.gson.Gson GSON = new com.google.gson.Gson();
+    private String cachedServerStatus; // FORGE: cache the server status json in case a client spams requests
+    private void resetStatusCache(ServerStatus status) {
+        this.cachedServerStatus = GSON.toJson(ServerStatus.CODEC.encodeStart(com.mojang.serialization.JsonOps.INSTANCE, status)
+                  .result().orElseThrow());
+    }
+    public String getStatusJson() {
+        return cachedServerStatus;
     }
 
     private int computeNextAutosaveInterval() {
@@ -898,7 +_,8 @@
             Optional.of(serverstatus$players),
             Optional.of(ServerStatus.Version.current()),
             Optional.ofNullable(this.statusIcon),
-            this.enforceSecureProfile()
+            this.enforceSecureProfile(),
+            true //TODO Neo: Possible build a system which indicates what the status of the modded server is.
         );
     }
 
@@ -928,7 +_,8 @@
         this.getFunctions().tick();
         this.profiler.popPush("levels");
 
-        for(ServerLevel serverlevel : this.getAllLevels()) {
+        for(ServerLevel serverlevel : this.getWorldArray()) {
+            long tickStart = Util.getNanos();
             this.profiler.push(() -> serverlevel + " " + serverlevel.dimension().location());
             if (this.tickCount % 20 == 0) {
                 this.profiler.push("timeSync");
@@ -937,6 +_,7 @@
             }
 
             this.profiler.push("tick");
+            net.neoforged.neoforge.event.EventHooks.onPreLevelTick(serverlevel, p_129954_);
 
             try {
                 serverlevel.tick(p_129954_);
@@ -945,16 +_,18 @@
                 serverlevel.fillReportDetails(crashreport);
                 throw new ReportedException(crashreport);
             }
+            net.neoforged.neoforge.event.EventHooks.onPostLevelTick(serverlevel, p_129954_);
 
             this.profiler.pop();
             this.profiler.pop();
+            perWorldTickTimes.computeIfAbsent(serverlevel.dimension(), k -> new long[100])[this.tickCount % 100] = Util.getNanos() - tickStart;
         }
 
         this.profiler.popPush("connection");
         this.getConnection().tick();
         this.profiler.popPush("players");
         this.playerList.tick();
-        if (SharedConstants.IS_RUNNING_IN_IDE && this.tickRateManager.runsNormally()) {
+        if (net.neoforged.neoforge.gametest.GameTestHooks.isGametestEnabled() && this.tickRateManager.runsNormally()) {
             GameTestTicker.SINGLETON.tick();
         }
 
@@ -1050,7 +_,7 @@
 
     @DontObfuscate
     public String getServerModName() {
-        return "vanilla";
+        return net.neoforged.neoforge.internal.BrandingControl.getServerBranding();
     }
 
     public SystemReport fillSystemReport(SystemReport p_177936_) {
@@ -1379,7 +_,7 @@
     public CompletableFuture<Void> reloadResources(Collection<String> p_129862_) {
         RegistryAccess.Frozen registryaccess$frozen = this.registries.getAccessForLoading(RegistryLayer.RELOADABLE);
         CompletableFuture<Void> completablefuture = CompletableFuture.<ImmutableList>supplyAsync(
-                () -> p_129862_.stream().map(this.packRepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()),
+                () -> p_129862_.stream().map(this.packRepository::getPack).filter(Objects::nonNull).flatMap(Pack::streamSelfAndChildren).map(Pack::open).collect(ImmutableList.toImmutableList()),
                 this
             )
             .thenCompose(
@@ -1416,6 +_,7 @@
                     this.getPlayerList().reloadResources();
                     this.functionManager.replaceLibrary(this.resources.managers.getFunctionLibrary());
                     this.structureTemplateManager.onResourceManagerReload(this.resources.resourceManager);
+                    this.getPlayerList().getPlayers().forEach(this.getPlayerList()::sendPlayerPermissionLevel); //Forge: Fix newly added/modified commands not being sent to the client when commands reload.
                 },
                 this
             );
@@ -1429,10 +_,13 @@
     public static WorldDataConfiguration configurePackRepository(
         PackRepository p_248681_, DataPackConfig p_248920_, boolean p_249869_, FeatureFlagSet p_251243_
     ) {
+        net.neoforged.neoforge.resource.ResourcePackLoader.loadResourcePacks(p_248681_, map -> net.neoforged.neoforge.resource.ResourcePackLoader.buildPackFinder(map, PackType.SERVER_DATA));
         p_248681_.reload();
+        DataPackConfig.DEFAULT.addModPacks(net.neoforged.neoforge.common.CommonHooks.getModDataPacks());
+        p_248920_.addModPacks(net.neoforged.neoforge.common.CommonHooks.getModDataPacks());
         if (p_249869_) {
-            p_248681_.setSelected(Collections.singleton("vanilla"));
-            return WorldDataConfiguration.DEFAULT;
+            p_248681_.setSelected(net.neoforged.neoforge.common.CommonHooks.getModDataPacksWithVanilla());
+            return new WorldDataConfiguration(new DataPackConfig(net.neoforged.neoforge.common.CommonHooks.getModDataPacksWithVanilla(), ImmutableList.of()), FeatureFlags.DEFAULT_FLAGS);
         } else {
             Set<String> set = Sets.newLinkedHashSet();
 
@@ -1616,6 +_,31 @@
 
     public abstract boolean isSingleplayerOwner(GameProfile p_129840_);
 
+    private Map<ResourceKey<Level>, long[]> perWorldTickTimes = Maps.newIdentityHashMap();
+    @Nullable
+    public long[] getTickTime(ResourceKey<Level> dim) {
+        return perWorldTickTimes.get(dim);
+    }
+
+    @Deprecated //Forge Internal use Only, You can screw up a lot of things if you mess with this map.
+    public synchronized Map<ResourceKey<Level>, ServerLevel> forgeGetWorldMap() {
+        return this.levels;
+    }
+    private int worldArrayMarker = 0;
+    private int worldArrayLast = -1;
+    private ServerLevel[] worldArray;
+    @Deprecated //Forge Internal use Only, use to protect against concurrent modifications in the world tick loop.
+    public synchronized void markWorldsDirty() {
+        worldArrayMarker++;
+    }
+    private ServerLevel[] getWorldArray() {
+        if (worldArrayMarker == worldArrayLast && worldArray != null)
+            return worldArray;
+        worldArray = this.levels.values().stream().toArray(x -> new ServerLevel[x]);
+        worldArrayLast = worldArrayMarker;
+        return worldArray;
+    }
+
     public void dumpServerProperties(Path p_177911_) throws IOException {
     }
 
@@ -1711,6 +_,15 @@
         }
     }
 
+    @Override
+    public boolean isSameThread() {
+        return io.papermc.paper.util.TickThread.isTickThread(); // Paper - rewrite chunk system
+    }
+
+    public static MinecraftServer getServer() {
+        return SERVER; // Paper
+    }
+
     private void startMetricsRecordingTick() {
         if (this.willStartRecordingMetrics) {
             this.metricsRecorder = ActiveMetricsRecorder.createStarted(
@@ -1777,6 +_,10 @@
 
     public WorldData getWorldData() {
         return this.worldData;
+    }
+
+    public MinecraftServer.ReloadableResources getServerResources() {
+         return resources;
     }
 
     public RegistryAccess.Frozen registryAccess() {
