--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -24,6 +_,7 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.function.BiFunction;
 import java.util.function.Consumer;
+import java.util.function.Function;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
@@ -243,7 +_,7 @@
         p_9772_.connection = this;
         p_9772_.getTextFilter().join();
         this.signedMessageDecoder = SignedMessageChain.Decoder.unsigned(p_9772_.getUUID(), p_9770_::enforceSecureProfile);
-        this.chatMessageChain = new FutureChain(p_9770_);
+        this.chatMessageChain = new FutureChain(p_9770_.chatExecutor); // CraftBukkit - async chat
     }
 
     @Override
@@ -397,9 +_,9 @@
                 double d0 = entity.getX();
                 double d1 = entity.getY();
                 double d2 = entity.getZ();
-                double d3 = clampHorizontal(p_9876_.getX());
-                double d4 = clampVertical(p_9876_.getY());
-                double d5 = clampHorizontal(p_9876_.getZ());
+                double d3 = clampHorizontal(p_9876_.getX()); final double toX = d3; // Paper - OBFHELPER
+                double d4 = clampVertical(p_9876_.getY()); final double toY = d4; // Paper - OBFHELPER
+                double d5 = clampHorizontal(p_9876_.getZ()); final double toZ = d5; // Paper - OBFHELPER
                 float f = Mth.wrapDegrees(p_9876_.getYRot());
                 float f1 = Mth.wrapDegrees(p_9876_.getXRot());
                 double d6 = d3 - this.vehicleFirstGoodX;
@@ -430,6 +_,16 @@
                     d7 = 0.0;
                 }
 
+                // Paper start - Prevent moving into unloaded chunks
+                if (this.player.level().paperConfig().chunks.preventMovingIntoUnloadedChunks && (
+                        !serverlevel.areChunksLoadedForMove(this.player.getBoundingBox().expandTowards(new Vec3(toX, toY, toZ).subtract(this.player.position()))) ||
+                                !serverlevel.areChunksLoadedForMove(entity.getBoundingBox().expandTowards(new Vec3(toX, toY, toZ).subtract(entity.position())))
+                )) {
+                    this.connection.send(new ClientboundMoveVehiclePacket(entity));
+                    return;
+                }
+                // Paper end - Prevent moving into unloaded chunks
+
                 d8 = d5 - entity.getZ();
                 d10 = d6 * d6 + d7 * d7 + d8 * d8;
                 boolean flag2 = false;
@@ -439,9 +_,11 @@
                 }
 
                 entity.absMoveTo(d3, d4, d5, f, f1);
+                resyncPlayerWithVehicle(entity); // Neo - Resync player position on vehicle moving
                 boolean flag3 = serverlevel.noCollision(entity, entity.getBoundingBox().deflate(0.0625));
                 if (flag && (flag2 || !flag3)) {
                     entity.absMoveTo(d0, d1, d2, f, f1);
+                    resyncPlayerWithVehicle(entity); // Neo - Resync player position on vehicle moving
                     this.send(new ClientboundMoveVehiclePacket(entity));
                     return;
                 }
@@ -462,6 +_,23 @@
         }
     }
 
+    private void resyncPlayerWithVehicle(Entity vehicle) {
+        Vec3 oldPos = this.player.position();
+        float yRot = this.player.getYRot();
+        float xRot = this.player.getXRot();
+        float yHeadRot = this.player.getYHeadRot();
+
+        vehicle.positionRider(this.player);
+
+        // preserve old rotation and store old position in xo/yo/zo
+        this.player.setYRot(yRot);
+        this.player.setXRot(xRot);
+        this.player.setYHeadRot(yHeadRot);
+        this.player.xo = oldPos.x;
+        this.player.yo = oldPos.y;
+        this.player.zo = oldPos.z;
+    }
+
     private boolean noBlocksAround(Entity p_9794_) {
         return p_9794_.level()
             .getBlockStates(p_9794_.getBoundingBox().inflate(0.0625).expandTowards(0.0, -0.55, 0.0))
@@ -846,9 +_,9 @@
                 }
 
                 if (!this.updateAwaitingTeleport()) {
-                    double d0 = clampHorizontal(p_9874_.getX(this.player.getX()));
-                    double d1 = clampVertical(p_9874_.getY(this.player.getY()));
-                    double d2 = clampHorizontal(p_9874_.getZ(this.player.getZ()));
+                    double d0 = clampHorizontal(p_9874_.getX(this.player.getX())); final double toX = d0; // Paper - OBFHELPER
+                    double d1 = clampVertical(p_9874_.getY(this.player.getY())); final double toY = d1; // Paper - OBFHELPER
+                    double d2 = clampHorizontal(p_9874_.getZ(this.player.getZ())); final double toZ = d2; // Paper - OBFHELPER
                     float f = Mth.wrapDegrees(p_9874_.getYRot(this.player.getYRot()));
                     float f1 = Mth.wrapDegrees(p_9874_.getXRot(this.player.getXRot()));
                     if (this.player.isPassenger()) {
@@ -877,6 +_,13 @@
                                     i = 1;
                                 }
 
+                                // Paper start - Prevent moving into unloaded chunks
+                                if (this.player.level().paperConfig().chunks.preventMovingIntoUnloadedChunks && (this.player.getX() != toX || this.player.getZ() != toZ) && !serverlevel.areChunksLoadedForMove(this.player.getBoundingBox().expandTowards(new Vec3(toX, toY, toZ).subtract(this.player.position())))) {
+                                    this.teleport(this.player.getX(), this.player.getY(), this.player.getZ(), this.player.getYRot(), this.player.getXRot(), Collections.emptySet());
+                                    return;
+                                }
+                                // Paper end - Prevent moving into unloaded chunks
+
                                 if (!this.player.isChangingDimension()
                                     && (!this.player.level().getGameRules().getBoolean(GameRules.RULE_DISABLE_ELYTRA_MOVEMENT_CHECK) || !flag)) {
                                     float f2 = flag ? 300.0F : 100.0F;
@@ -927,7 +_,7 @@
                                     && !flag1
                                     && this.player.gameMode.getGameModeForPlayer() != GameType.SPECTATOR
                                     && !this.server.isFlightAllowed()
-                                    && !this.player.getAbilities().mayfly
+                                    && !this.player.mayFly()
                                     && !this.player.hasEffect(MobEffects.LEVITATION)
                                     && !flag
                                     && !flag3
@@ -1031,8 +_,10 @@
             case SWAP_ITEM_WITH_OFFHAND:
                 if (!this.player.isSpectator()) {
                     ItemStack itemstack = this.player.getItemInHand(InteractionHand.OFF_HAND);
-                    this.player.setItemInHand(InteractionHand.OFF_HAND, this.player.getItemInHand(InteractionHand.MAIN_HAND));
-                    this.player.setItemInHand(InteractionHand.MAIN_HAND, itemstack);
+                    var event = net.neoforged.neoforge.common.CommonHooks.onLivingSwapHandItems(this.player);
+                    if (event.isCanceled()) return;
+                    this.player.setItemInHand(InteractionHand.OFF_HAND, event.getItemSwappedToOffHand());
+                    this.player.setItemInHand(InteractionHand.MAIN_HAND, event.getItemSwappedToMainHand());
                     this.player.stopUsingItem();
                 }
 
@@ -1060,7 +_,7 @@
                     .handleBlockBreakAction(
                         blockpos, serverboundplayeractionpacket$action, p_9889_.getDirection(), this.player.level().getMaxBuildHeight(), p_9889_.getSequence()
                     );
-                this.player.connection.ackBlockChangesUpTo(p_9889_.getSequence());
+                this.player.connection.ackBlockChangesUpTo =p_9889_.getSequence();
                 return;
             default:
                 throw new IllegalArgumentException("Invalid player action");
@@ -1079,7 +_,7 @@
     @Override
     public void handleUseItemOn(ServerboundUseItemOnPacket p_9930_) {
         PacketUtils.ensureRunningOnSameThread(p_9930_, this, this.player.serverLevel());
-        this.player.connection.ackBlockChangesUpTo(p_9930_.getSequence());
+        this.player.connection.ackBlockChangesUpTo = p_9930_.getSequence();
         ServerLevel serverlevel = this.player.serverLevel();
         InteractionHand interactionhand = p_9930_.getHand();
         ItemStack itemstack = this.player.getItemInHand(interactionhand);
@@ -1219,6 +_,12 @@
 
     @Override
     public void handleChat(ServerboundChatPacket p_9841_) {
+        // CraftBukkit start - async chat
+        // SPIGOT-3638
+        if (this.server.isStopped()) {
+            return;
+        }
+        // CraftBukkit end
         Optional<LastSeenMessages> optional = this.unpackAndApplyLastSeen(p_9841_.lastSeenMessages());
         if (!optional.isEmpty()) {
             this.tryHandleChat(p_9841_.message(), () -> {
@@ -1230,13 +_,14 @@
                     return;
                 }
 
-                CompletableFuture<FilteredText> completablefuture = this.filterTextPacket(playerchatmessage.signedContent());
-                Component component = this.server.getChatDecorator().decorate(this.player, playerchatmessage.decoratedContent());
+                CompletableFuture<FilteredText> completablefuture = this.filterTextPacket(playerchatmessage.signedContent()).thenApplyAsync(Function.identity(), this.server.chatExecutor); // CraftBukkit - async chat
+                Component component = net.neoforged.neoforge.common.CommonHooks.getServerChatSubmittedDecorator().decorate(this.player, playerchatmessage.decoratedContent());
                 this.chatMessageChain.append(completablefuture, p_300785_ -> {
+                    if (component == null) return; // Forge: ServerChatEvent was canceled if this is null.
                     PlayerChatMessage playerchatmessage1 = playerchatmessage.withUnsignedContent(component).filter(p_300785_.mask());
                     this.broadcastChatMessage(playerchatmessage1);
                 });
-            });
+            }, false); // CraftBukkit - async chat
         }
     }
 
@@ -1245,7 +_,7 @@
         this.tryHandleChat(p_215225_.command(), () -> {
             this.performUnsignedChatCommand(p_215225_.command());
             this.detectRateSpam();
-        });
+        }, true); // CraftBukkit - sync commands
     }
 
     private void performUnsignedChatCommand(String p_338482_) {
@@ -1267,7 +_,7 @@
             this.tryHandleChat(p_338604_.command(), () -> {
                 this.performSignedChatCommand(p_338604_, optional.get());
                 this.detectRateSpam();
-            });
+            }, true); // CraftBukkit - sync commands
         }
     }
 
@@ -1348,14 +_,20 @@
         return commanddispatcher.parse(p_242938_, this.player.createCommandSourceStack());
     }
 
-    private void tryHandleChat(String p_338775_, Runnable p_338235_) {
+    private void tryHandleChat(String p_338775_, Runnable p_338235_, boolean sync) { // CraftBukkit
         if (isChatMessageIllegal(p_338775_)) {
             this.disconnect(Component.translatable("multiplayer.disconnect.illegal_characters"));
         } else if (this.player.getChatVisibility() == ChatVisiblity.HIDDEN) {
             this.send(new ClientboundSystemChatPacket(Component.translatable("chat.disabled.options").withStyle(ChatFormatting.RED), false));
         } else {
             this.player.resetLastActionTime();
-            this.server.execute(p_338235_);
+            // CraftBukkit start
+            if (sync) {
+                this.server.execute(p_338235_);
+            } else {
+                p_338235_.run();
+            }
+            // CraftBukkit end
         }
     }
 
@@ -1561,7 +_,11 @@
 
                         @Override
                         public void onInteraction(InteractionHand p_143682_, Vec3 p_143683_) {
-                            this.performInteraction(p_143682_, (p_143686_, p_143687_, p_143688_) -> p_143687_.interactAt(p_143686_, p_143683_, p_143688_));
+                            this.performInteraction(p_143682_, (p_143686_, p_143687_, p_143688_) -> {
+                                InteractionResult onInteractEntityAtResult = net.neoforged.neoforge.common.CommonHooks.onInteractEntityAt(player, entity, p_143683_, p_143682_);
+                                if (onInteractEntityAtResult != null) return onInteractEntityAtResult;
+                                return p_143687_.interactAt(p_143686_, p_143683_, p_143688_);
+                            });
                         }
 
                         @Override
@@ -1712,7 +_,12 @@
             if (customdata.contains("x") && customdata.contains("y") && customdata.contains("z")) {
                 BlockPos blockpos = BlockEntity.getPosFromTag(customdata.getUnsafe());
                 if (this.player.level().isLoaded(blockpos)) {
-                    BlockEntity blockentity = this.player.level().getBlockEntity(blockpos);
+                    // Paper start - Prevent tile entity copies loading chunks
+                    BlockEntity blockentity = null;
+                    if (this.player.distanceToSqr(blockpos.getX(), blockpos.getY(), blockpos.getZ()) < 32 * 32 && this.player.serverLevel().isLoadedAndInBounds(blockpos)) {
+                        blockentity = this.player.level().getBlockEntity(blockpos);
+                    }
+                    // Paper end - Prevent tile entity copies loading chunks
                     if (blockentity != null) {
                         blockentity.saveToItem(itemstack, this.player.level().registryAccess());
                     }
@@ -1753,13 +_,15 @@
     @Override
     public void handlePlayerAbilities(ServerboundPlayerAbilitiesPacket p_9887_) {
         PacketUtils.ensureRunningOnSameThread(p_9887_, this, this.player.serverLevel());
-        this.player.getAbilities().flying = p_9887_.isFlying() && this.player.getAbilities().mayfly;
+        this.player.getAbilities().flying = p_9887_.isFlying() && this.player.mayFly();
     }
 
     @Override
     public void handleClientInformation(ServerboundClientInformationPacket p_301979_) {
         PacketUtils.ensureRunningOnSameThread(p_301979_, this, this.player.serverLevel());
+        net.minecraft.server.level.ClientInformation oldInfo = this.player.clientInformation();
         this.player.updateOptions(p_301979_.information());
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.ClientInformationUpdatedEvent(this.player, oldInfo, p_301979_.information()));
     }
 
     @Override
@@ -1812,7 +_,7 @@
             this.connection
                 .setupInboundProtocol(
                     ConfigurationProtocols.SERVERBOUND,
-                    new ServerConfigurationPacketListenerImpl(this.server, this.connection, this.createCookie(this.player.clientInformation()))
+                    new ServerConfigurationPacketListenerImpl(this.server, this.connection, this.createCookie(this.player.clientInformation(), this.connectionType))
                 );
         }
     }
@@ -1847,6 +_,7 @@
 
     @Override
     public void handleCustomPayload(ServerboundCustomPayloadPacket p_333887_) {
+        super.handleCustomPayload(p_333887_); // Neo: Call super to invoke modded payload handling.
     }
 
     @Override
