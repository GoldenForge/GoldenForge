--- a/net/minecraft/server/level/ThreadedLevelLightEngine.java
+++ b/net/minecraft/server/level/ThreadedLevelLightEngine.java
@@ -23,27 +_,139 @@
 import net.minecraft.world.level.lighting.LevelLightEngine;
 import org.slf4j.Logger;
 
-public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCloseable {
+public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCloseable, ca.spottedleaf.moonrise.patches.starlight.light.StarLightLightingProvider { // Paper - rewrite chunk system
     public static final int DEFAULT_BATCH_SIZE = 1000;
     private static final Logger LOGGER = LogUtils.getLogger();
-    private final ProcessorMailbox<Runnable> taskMailbox;
-    private final ObjectList<Pair<ThreadedLevelLightEngine.TaskType, Runnable>> lightTasks = new ObjectArrayList<>();
+    // Paper - rewrite chunk sytem
     private final ChunkMap chunkMap;
-    private final ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> sorterMailbox;
+    // Paper - rewrite chunk sytem
     private final int taskPerBatch = 1000;
-    private final AtomicBoolean scheduled = new AtomicBoolean();
+    // Paper - rewrite chunk sytem
+
+    // Paper start - rewrite chunk system
+    private final java.util.concurrent.atomic.AtomicLong chunkWorkCounter = new java.util.concurrent.atomic.AtomicLong();
+    private void queueTaskForSection(final int chunkX, final int chunkY, final int chunkZ,
+                                     final java.util.function.Supplier<ca.spottedleaf.moonrise.patches.starlight.light.StarLightInterface.LightQueue.ChunkTasks> supplier) {
+        final ServerLevel world = (ServerLevel)this.starlight$getLightEngine().getWorld();
+
+        final ChunkAccess center = this.starlight$getLightEngine().getAnyChunkNow(chunkX, chunkZ);
+        if (center == null || !center.getPersistedStatus().isOrAfter(net.minecraft.world.level.chunk.status.ChunkStatus.LIGHT)) {
+            // do not accept updates in unlit chunks, unless we might be generating a chunk. thanks to the amazing
+            // chunk scheduling, we could be lighting and generating a chunk at the same time
+            return;
+        }
+
+        final ca.spottedleaf.moonrise.patches.starlight.light.StarLightInterface.ServerLightQueue.ServerChunkTasks scheduledTask = (ca.spottedleaf.moonrise.patches.starlight.light.StarLightInterface.ServerLightQueue.ServerChunkTasks)supplier.get();
+
+        if (scheduledTask == null) {
+            // not scheduled
+            return;
+        }
+
+        if (!scheduledTask.markTicketAdded()) {
+            // ticket already added
+            return;
+        }
+
+        final Long ticketId = Long.valueOf(this.chunkWorkCounter.getAndIncrement());
+        final ChunkPos pos = new ChunkPos(chunkX, chunkZ);
+        world.getChunkSource().addRegionTicket(ca.spottedleaf.moonrise.patches.starlight.light.StarLightInterface.CHUNK_WORK_TICKET, pos, ca.spottedleaf.moonrise.patches.starlight.light.StarLightInterface.REGION_LIGHT_TICKET_LEVEL, ticketId);
+
+        scheduledTask.queueOrRunTask(() -> {
+            world.getChunkSource().removeRegionTicket(ca.spottedleaf.moonrise.patches.starlight.light.StarLightInterface.CHUNK_WORK_TICKET, pos, ca.spottedleaf.moonrise.patches.starlight.light.StarLightInterface.REGION_LIGHT_TICKET_LEVEL, ticketId);
+        });
+    }
+
+    @Override
+    public final int starlight$serverRelightChunks(final java.util.Collection<net.minecraft.world.level.ChunkPos> chunks0,
+                                                   final java.util.function.Consumer<net.minecraft.world.level.ChunkPos> chunkLightCallback,
+                                                   final java.util.function.IntConsumer onComplete) {
+        final java.util.Set<net.minecraft.world.level.ChunkPos> chunks = new java.util.LinkedHashSet<>(chunks0);
+        final java.util.Map<net.minecraft.world.level.ChunkPos, Long> ticketIds = new java.util.HashMap<>();
+        final ServerLevel world = (ServerLevel)this.starlight$getLightEngine().getWorld();
+
+        for (final java.util.Iterator<net.minecraft.world.level.ChunkPos> iterator = chunks.iterator(); iterator.hasNext();) {
+            final ChunkPos pos = iterator.next();
+
+            final Long id = ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler.getNextChunkRelightId();
+            world.getChunkSource().addRegionTicket(ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler.CHUNK_RELIGHT, pos, ca.spottedleaf.moonrise.patches.starlight.light.StarLightInterface.REGION_LIGHT_TICKET_LEVEL, id);
+            ticketIds.put(pos, id);
+
+            final ChunkAccess chunk = (ChunkAccess)world.getChunkSource().getChunkForLighting(pos.x, pos.z);
+            if (chunk == null || !chunk.isLightCorrect() || !chunk.getPersistedStatus().isOrAfter(net.minecraft.world.level.chunk.status.ChunkStatus.LIGHT)) {
+                // cannot relight this chunk
+                iterator.remove();
+                ticketIds.remove(pos);
+                world.getChunkSource().removeRegionTicket(ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler.CHUNK_RELIGHT, pos, ca.spottedleaf.moonrise.patches.starlight.light.StarLightInterface.REGION_LIGHT_TICKET_LEVEL, id);
+                continue;
+            }
+        }
+
+        ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)world).moonrise$getChunkTaskScheduler().radiusAwareScheduler.queueInfiniteRadiusTask(() -> {
+            ThreadedLevelLightEngine.this.starlight$getLightEngine().relightChunks(
+                    chunks,
+                    (final ChunkPos pos) -> {
+                        if (chunkLightCallback != null) {
+                            chunkLightCallback.accept(pos);
+                        }
+
+                        ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)world).moonrise$getChunkTaskScheduler().scheduleChunkTask(pos.x, pos.z, () -> {
+                            final ca.spottedleaf.moonrise.patches.chunk_system.scheduling.NewChunkHolder chunkHolder = ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)world).moonrise$getChunkTaskScheduler().chunkHolderManager.getChunkHolder(
+                                    pos.x, pos.z
+                            );
+
+                            if (chunkHolder == null) {
+                                return;
+                            }
+
+                            final java.util.List<ServerPlayer> players = ((ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkSystemChunkHolder)chunkHolder.vanillaChunkHolder).moonrise$getPlayers(false);
+
+                            if (players.isEmpty()) {
+                                return;
+                            }
+
+                            final net.minecraft.network.protocol.Packet<?> relightPacket = new net.minecraft.network.protocol.game.ClientboundLightUpdatePacket(
+                                    pos, (ThreadedLevelLightEngine)(Object)ThreadedLevelLightEngine.this,
+                                    null, null
+                            );
+
+                            for (final ServerPlayer player : players) {
+                                final net.minecraft.server.network.ServerGamePacketListenerImpl conn = player.connection;
+                                if (conn != null) {
+                                    conn.send(relightPacket);
+                                }
+                            }
+                        });
+                    },
+                    (final int relight) -> {
+                        if (onComplete != null) {
+                            onComplete.accept(relight);
+                        }
+
+                        for (final java.util.Map.Entry<ChunkPos, Long> entry : ticketIds.entrySet()) {
+                            world.getChunkSource().removeRegionTicket(
+                                    ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler.CHUNK_RELIGHT, entry.getKey(),
+                                    ca.spottedleaf.moonrise.patches.starlight.light.StarLightInterface.REGION_LIGHT_TICKET_LEVEL, entry.getValue()
+                            );
+                        }
+                    }
+            );
+        });
+
+        return chunks.size();
+    }
+    // Paper end - rewrite chunk system
 
     public ThreadedLevelLightEngine(
-        LightChunkGetter p_9305_,
-        ChunkMap p_9306_,
-        boolean p_9307_,
-        ProcessorMailbox<Runnable> p_9308_,
-        ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> p_9309_
+            LightChunkGetter chunkProvider,
+            ChunkMap chunkLoadingManager,
+            boolean hasBlockLight,
+            ProcessorMailbox<Runnable> processor,
+            ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> executor
     ) {
-        super(p_9305_, true, p_9307_);
-        this.chunkMap = p_9306_;
-        this.sorterMailbox = p_9309_;
-        this.taskMailbox = p_9308_;
+        super(chunkProvider, true, hasBlockLight);
+        this.chunkMap = chunkLoadingManager;
+        // Paper - rewrite chunk sytem
     }
 
     @Override
@@ -56,169 +_,74 @@
     }
 
     @Override
-    public void checkBlock(BlockPos p_9357_) {
-        BlockPos blockpos = p_9357_.immutable();
-        this.addTask(
-            SectionPos.blockToSectionCoord(p_9357_.getX()),
-            SectionPos.blockToSectionCoord(p_9357_.getZ()),
-            ThreadedLevelLightEngine.TaskType.PRE_UPDATE,
-            Util.name(() -> super.checkBlock(blockpos), () -> "checkBlock " + blockpos)
-        );
-    }
-
-    protected void updateChunkStatus(ChunkPos p_9331_) {
-        this.addTask(p_9331_.x, p_9331_.z, () -> 0, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, Util.name(() -> {
-            super.retainData(p_9331_, false);
-            super.setLightEnabled(p_9331_, false);
-
-            for (int i = this.getMinLightSection(); i < this.getMaxLightSection(); i++) {
-                super.queueSectionData(LightLayer.BLOCK, SectionPos.of(p_9331_, i), null);
-                super.queueSectionData(LightLayer.SKY, SectionPos.of(p_9331_, i), null);
-            }
-
-            for (int j = this.levelHeightAccessor.getMinSection(); j < this.levelHeightAccessor.getMaxSection(); j++) {
-                super.updateSectionStatus(SectionPos.of(p_9331_, j), true);
-            }
-        }, () -> "updateChunkStatus " + p_9331_ + " true"));
-    }
-
-    @Override
-    public void updateSectionStatus(SectionPos p_9364_, boolean p_9365_) {
-        this.addTask(
-            p_9364_.x(),
-            p_9364_.z(),
-            () -> 0,
-            ThreadedLevelLightEngine.TaskType.PRE_UPDATE,
-            Util.name(() -> super.updateSectionStatus(p_9364_, p_9365_), () -> "updateSectionStatus " + p_9364_ + " " + p_9365_)
-        );
-    }
-
-    @Override
-    public void propagateLightSources(ChunkPos p_285029_) {
-        this.addTask(
-            p_285029_.x,
-            p_285029_.z,
-            ThreadedLevelLightEngine.TaskType.PRE_UPDATE,
-            Util.name(() -> super.propagateLightSources(p_285029_), () -> "propagateLight " + p_285029_)
-        );
-    }
-
-    @Override
-    public void setLightEnabled(ChunkPos p_9336_, boolean p_9337_) {
-        this.addTask(
-            p_9336_.x,
-            p_9336_.z,
-            ThreadedLevelLightEngine.TaskType.PRE_UPDATE,
-            Util.name(() -> super.setLightEnabled(p_9336_, p_9337_), () -> "enableLight " + p_9336_ + " " + p_9337_)
-        );
-    }
-
-    @Override
-    public void queueSectionData(LightLayer p_285046_, SectionPos p_285496_, @Nullable DataLayer p_285495_) {
-        this.addTask(
-            p_285496_.x(),
-            p_285496_.z(),
-            () -> 0,
-            ThreadedLevelLightEngine.TaskType.PRE_UPDATE,
-            Util.name(() -> super.queueSectionData(p_285046_, p_285496_, p_285495_), () -> "queueData " + p_285496_)
-        );
-    }
-
-    private void addTask(int p_9313_, int p_9314_, ThreadedLevelLightEngine.TaskType p_9315_, Runnable p_9316_) {
-        this.addTask(p_9313_, p_9314_, this.chunkMap.getChunkQueueLevel(ChunkPos.asLong(p_9313_, p_9314_)), p_9315_, p_9316_);
-    }
-
-    private void addTask(int p_9318_, int p_9319_, IntSupplier p_9320_, ThreadedLevelLightEngine.TaskType p_9321_, Runnable p_9322_) {
-        this.sorterMailbox.tell(ChunkTaskPriorityQueueSorter.message(() -> {
-            this.lightTasks.add(Pair.of(p_9321_, p_9322_));
-            if (this.lightTasks.size() >= 1000) {
-                this.runUpdate();
-            }
-        }, ChunkPos.asLong(p_9318_, p_9319_), p_9320_));
-    }
-
-    @Override
-    public void retainData(ChunkPos p_9370_, boolean p_9371_) {
-        this.addTask(
-            p_9370_.x,
-            p_9370_.z,
-            () -> 0,
-            ThreadedLevelLightEngine.TaskType.PRE_UPDATE,
-            Util.name(() -> super.retainData(p_9370_, p_9371_), () -> "retainData " + p_9370_)
-        );
-    }
-
-    public CompletableFuture<ChunkAccess> initializeLight(ChunkAccess p_285128_, boolean p_285441_) {
-        ChunkPos chunkpos = p_285128_.getPos();
-        this.addTask(chunkpos.x, chunkpos.z, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, Util.name(() -> {
-            LevelChunkSection[] alevelchunksection = p_285128_.getSections();
-
-            for (int i = 0; i < p_285128_.getSectionsCount(); i++) {
-                LevelChunkSection levelchunksection = alevelchunksection[i];
-                if (!levelchunksection.hasOnlyAir()) {
-                    int j = this.levelHeightAccessor.getSectionYFromSectionIndex(i);
-                    super.updateSectionStatus(SectionPos.of(chunkpos, j), false);
-                }
-            }
-        }, () -> "initializeLight: " + chunkpos));
-        return CompletableFuture.supplyAsync(() -> {
-            super.setLightEnabled(chunkpos, p_285441_);
-            super.retainData(chunkpos, false);
-            return p_285128_;
-        }, p_215135_ -> this.addTask(chunkpos.x, chunkpos.z, ThreadedLevelLightEngine.TaskType.POST_UPDATE, p_215135_));
-    }
-
-    public CompletableFuture<ChunkAccess> lightChunk(ChunkAccess p_9354_, boolean p_9355_) {
-        ChunkPos chunkpos = p_9354_.getPos();
-        p_9354_.setLightCorrect(false);
-        this.addTask(chunkpos.x, chunkpos.z, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, Util.name(() -> {
-            if (!p_9355_) {
-                super.propagateLightSources(chunkpos);
-            }
-        }, () -> "lightChunk " + chunkpos + " " + p_9355_));
-        return CompletableFuture.supplyAsync(() -> {
-            p_9354_.setLightCorrect(true);
-            return p_9354_;
-        }, p_280982_ -> this.addTask(chunkpos.x, chunkpos.z, ThreadedLevelLightEngine.TaskType.POST_UPDATE, p_280982_));
+    public void checkBlock(BlockPos pos) {
+        // Paper start - rewrite chunk system
+        final BlockPos posCopy = pos.immutable();
+        this.queueTaskForSection(posCopy.getX() >> 4, posCopy.getY() >> 4, posCopy.getZ() >> 4, () -> {
+            return ThreadedLevelLightEngine.this.starlight$getLightEngine().blockChange(posCopy);
+        });
+        // Paper end - rewrite chunk system
+    }
+
+    protected void updateChunkStatus(ChunkPos pos) {
+        // Paper - rewrite chunk system
+    }
+
+    @Override
+    public void updateSectionStatus(SectionPos pos, boolean notReady) {
+        // Paper start - rewrite chunk system
+        this.queueTaskForSection(pos.getX(), pos.getY(), pos.getZ(), () -> {
+            return ThreadedLevelLightEngine.this.starlight$getLightEngine().sectionChange(pos, notReady);
+        });
+        // Paper end - rewrite chunk system
+    }
+
+    @Override
+    public void propagateLightSources(ChunkPos chunkPos) {
+        // Paper - rewrite chunk system
+    }
+
+    @Override
+    public void setLightEnabled(ChunkPos pos, boolean retainData) {
+        // Paper start - rewrite chunk system
+    }
+
+    @Override
+    public void queueSectionData(LightLayer lightType, SectionPos pos, @Nullable DataLayer nibbles) {
+        // Paper start - rewrite chunk system
+    }
+
+    private void addTask(int x, int z, ThreadedLevelLightEngine.TaskType stage, Runnable task) {
+        throw new UnsupportedOperationException(); // Paper - rewrite chunk system
+    }
+
+    private void addTask(int x, int z, IntSupplier completedLevelSupplier, ThreadedLevelLightEngine.TaskType stage, Runnable task) {
+        throw new UnsupportedOperationException(); // Paper - rewrite chunk system
+    }
+
+    @Override
+    public void retainData(ChunkPos pos, boolean retainData) {
+        // Paper start - rewrite chunk system
+    }
+
+    public CompletableFuture<ChunkAccess> initializeLight(ChunkAccess chunk, boolean bl) {
+        return CompletableFuture.completedFuture(chunk); // Paper start - rewrite chunk system
+    }
+
+    public CompletableFuture<ChunkAccess> lightChunk(ChunkAccess chunk, boolean excludeBlocks) {
+        throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
     public void tryScheduleUpdate() {
-        if ((!this.lightTasks.isEmpty() || super.hasLightWork()) && this.scheduled.compareAndSet(false, true)) {
-            this.taskMailbox.tell(() -> {
-                this.runUpdate();
-                this.scheduled.set(false);
-            });
-        }
+        // Paper - rewrite chunk system
     }
 
     private void runUpdate() {
-        int i = Math.min(this.lightTasks.size(), 1000);
-        ObjectListIterator<Pair<ThreadedLevelLightEngine.TaskType, Runnable>> objectlistiterator = this.lightTasks.iterator();
-
-        int j;
-        for (j = 0; objectlistiterator.hasNext() && j < i; j++) {
-            Pair<ThreadedLevelLightEngine.TaskType, Runnable> pair = objectlistiterator.next();
-            if (pair.getFirst() == ThreadedLevelLightEngine.TaskType.PRE_UPDATE) {
-                pair.getSecond().run();
-            }
-        }
-
-        objectlistiterator.back(j);
-        super.runLightUpdates();
-
-        for (int k = 0; objectlistiterator.hasNext() && k < i; k++) {
-            Pair<ThreadedLevelLightEngine.TaskType, Runnable> pair1 = objectlistiterator.next();
-            if (pair1.getFirst() == ThreadedLevelLightEngine.TaskType.POST_UPDATE) {
-                pair1.getSecond().run();
-            }
-
-            objectlistiterator.remove();
-        }
+        throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
-    public CompletableFuture<?> waitForPendingTasks(int p_301257_, int p_300921_) {
-        return CompletableFuture.runAsync(() -> {
-        }, p_300778_ -> this.addTask(p_301257_, p_300921_, ThreadedLevelLightEngine.TaskType.POST_UPDATE, p_300778_));
+    public CompletableFuture<?> waitForPendingTasks(int x, int z) {
+        throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
     static enum TaskType {
