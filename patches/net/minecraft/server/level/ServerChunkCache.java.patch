--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -6,7 +_,9 @@
 import java.io.File;
 import java.io.IOException;
 import java.util.Arrays;
+import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 import java.util.concurrent.Executor;
@@ -45,13 +_,13 @@
 import net.minecraft.world.level.storage.DimensionDataStorage;
 import net.minecraft.world.level.storage.LevelStorageSource;
 
-public class ServerChunkCache extends ChunkSource {
+public class ServerChunkCache extends ChunkSource implements net.neoforged.neoforge.common.extensions.IServerChunkCacheExtension, ca.spottedleaf.moonrise.patches.chunk_system.world.ChunkSystemServerChunkCache { // Paper - rewrite chunk system
     private static final List<ChunkStatus> CHUNK_STATUSES = ChunkStatus.getStatusList();
     private final DistanceManager distanceManager;
     public final ServerLevel level;
     final Thread mainThread;
     final ThreadedLevelLightEngine lightEngine;
-    private final ServerChunkCache.MainThreadExecutor mainThreadProcessor;
+    public final ServerChunkCache.MainThreadExecutor mainThreadProcessor;
     public final ChunkMap chunkMap;
     private final DimensionDataStorage dataStorage;
     private long lastInhabitedUpdate;
@@ -64,7 +_,66 @@
     @Nullable
     @VisibleForDebug
     private NaturalSpawner.SpawnState lastSpawnState;
-
+    // Paper start
+    private final ca.spottedleaf.concurrentutil.map.ConcurrentLong2ReferenceChainedHashTable<net.minecraft.world.level.chunk.LevelChunk> fullChunks = new ca.spottedleaf.concurrentutil.map.ConcurrentLong2ReferenceChainedHashTable<>();
+    long chunkFutureAwaitCounter;
+    // Paper end
+    // Paper start - rewrite chunk system
+
+    @Override
+    public final void moonrise$setFullChunk(final int chunkX, final int chunkZ, final LevelChunk chunk) {
+        final long key = ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkKey(chunkX, chunkZ);
+        if (chunk == null) {
+            this.fullChunks.remove(key);
+        } else {
+            this.fullChunks.put(key, chunk);
+        }
+    }
+
+    @Override
+    public final LevelChunk moonrise$getFullChunkIfLoaded(final int chunkX, final int chunkZ) {
+        return this.fullChunks.get(ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkKey(chunkX, chunkZ));
+    }
+
+    private ChunkAccess syncLoad(final int chunkX, final int chunkZ, final ChunkStatus toStatus) {
+        final ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler chunkTaskScheduler = ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getChunkTaskScheduler();
+        final CompletableFuture<ChunkAccess> completable = new CompletableFuture<>();
+        chunkTaskScheduler.scheduleChunkLoad(
+                chunkX, chunkZ, toStatus, true, ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.BLOCKING,
+                completable::complete
+        );
+
+        if (ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(this.level, chunkX, chunkZ)) {
+            ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler.pushChunkWait(this.level, chunkX, chunkZ);
+            this.mainThreadProcessor.managedBlock(completable::isDone);
+            ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler.popChunkWait();
+        }
+
+        final ChunkAccess ret = completable.join();
+        if (ret == null) {
+            throw new IllegalStateException("Chunk not loaded when requested");
+        }
+
+        return ret;
+    }
+
+    private ChunkAccess getChunkFallback(final int chunkX, final int chunkZ, final ChunkStatus toStatus,
+                                         final boolean load) {
+        final ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler chunkTaskScheduler = ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getChunkTaskScheduler();
+        final ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkHolderManager chunkHolderManager = chunkTaskScheduler.chunkHolderManager;
+
+        final ca.spottedleaf.moonrise.patches.chunk_system.scheduling.NewChunkHolder currentChunk = chunkHolderManager.getChunkHolder(ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkKey(chunkX, chunkZ));
+
+        final ChunkAccess ifPresent = currentChunk == null ? null : currentChunk.getChunkIfPresent(toStatus);
+
+        if (ifPresent != null && (toStatus != ChunkStatus.FULL || currentChunk.isFullChunkReady())) {
+            return ifPresent;
+        }
+
+        return load ? this.syncLoad(chunkX, chunkZ, toStatus) : null;
+    }
+    // Paper end - rewrite chunk system
+    private ServerChunkCache.ChunkAndHolder[] iterationCopy; // Paper - chunk tick iteration optimisations
     public ServerChunkCache(
         ServerLevel p_214982_,
         LevelStorageSource.LevelStorageAccess p_214983_,
@@ -106,6 +_,59 @@
         this.clearCache();
     }
 
+    // CraftBukkit start - properly implement isChunkLoaded
+    public boolean isChunkLoaded(int chunkX, int chunkZ) {
+        ChunkHolder chunk = this.chunkMap.getUpdatingChunkIfPresent(ChunkPos.asLong(chunkX, chunkZ));
+        if (chunk == null) {
+            return false;
+        }
+        return chunk.getFullChunkNow() != null;
+    }
+    // CraftBukkit end
+    // Paper start
+    // Paper - rewrite chunk system
+
+    @Nullable
+    public ChunkAccess getChunkAtImmediately(int x, int z) {
+        ChunkHolder holder = this.chunkMap.getVisibleChunkIfPresent(ChunkPos.asLong(x, z));
+        if (holder == null) {
+            return null;
+        }
+
+        return holder.getLatestChunk();
+    }
+
+    public <T> void addTicketAtLevel(TicketType<T> ticketType, ChunkPos chunkPos, int ticketLevel, T identifier) {
+        this.distanceManager.addTicket(ticketType, chunkPos, ticketLevel, identifier);
+    }
+
+    public <T> void removeTicketAtLevel(TicketType<T> ticketType, ChunkPos chunkPos, int ticketLevel, T identifier) {
+        this.distanceManager.removeTicket(ticketType, chunkPos, ticketLevel, identifier);
+    }
+
+    // "real" get chunk if loaded
+    // Note: Partially copied from the getChunkAt method below
+    @Nullable
+    public LevelChunk getChunkAtIfCachedImmediately(int x, int z) {
+        long k = ChunkPos.asLong(x, z);
+
+        // Note: Bypass cache since we need to check ticket level, and to make this MT-Safe
+
+        ChunkHolder playerChunk = this.getVisibleChunkIfPresent(k);
+        if (playerChunk == null) {
+            return null;
+        }
+
+        return playerChunk.getFullChunkNowUnchecked();
+    }
+
+    @Nullable
+    public LevelChunk getChunkAtIfLoadedImmediately(int x, int z) {
+        return this.fullChunks.get(ChunkPos.asLong(x, z));
+    }
+    // Paper end
+
+
     public ThreadedLevelLightEngine getLightEngine() {
         return this.lightEngine;
     }
@@ -134,67 +_,25 @@
     @Nullable
     @Override
     public ChunkAccess getChunk(int p_8360_, int p_8361_, ChunkStatus p_330876_, boolean p_8363_) {
-        if (Thread.currentThread() != this.mainThread) {
-            return CompletableFuture.<ChunkAccess>supplyAsync(() -> this.getChunk(p_8360_, p_8361_, p_330876_, p_8363_), this.mainThreadProcessor).join();
-        } else {
-            ProfilerFiller profilerfiller = this.level.getProfiler();
-            profilerfiller.incrementCounter("getChunk");
-            long i = ChunkPos.asLong(p_8360_, p_8361_);
-
-            for (int j = 0; j < 4; j++) {
-                if (i == this.lastChunkPos[j] && p_330876_ == this.lastChunkStatus[j]) {
-                    ChunkAccess chunkaccess = this.lastChunk[j];
-                    if (chunkaccess != null || !p_8363_) {
-                        return chunkaccess;
-                    }
-                }
-            }
-
-            profilerfiller.incrementCounter("getChunkCacheMiss");
-            CompletableFuture<ChunkResult<ChunkAccess>> completablefuture = this.getChunkFutureMainThread(p_8360_, p_8361_, p_330876_, p_8363_);
-            this.mainThreadProcessor.managedBlock(completablefuture::isDone);
-            ChunkResult<ChunkAccess> chunkresult = completablefuture.join();
-            ChunkAccess chunkaccess1 = chunkresult.orElse(null);
-            if (chunkaccess1 == null && p_8363_) {
-                throw (IllegalStateException)Util.pauseInIde(new IllegalStateException("Chunk not there when requested: " + chunkresult.getError()));
-            } else {
-                this.storeInCache(i, chunkaccess1, p_330876_);
-                return chunkaccess1;
-            }
+        // Paper start - rewrite chunk system
+        if (p_330876_ == ChunkStatus.FULL) {
+            final LevelChunk ret = this.fullChunks.get(ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkKey(p_8360_, p_8361_));
+
+            if (ret != null) {
+                return ret;
+            }
+
+            return p_8363_ ? this.getChunkFallback(p_8360_, p_8361_, p_330876_, p_8363_) : null;
         }
+
+        return this.getChunkFallback(p_8360_, p_8361_, p_330876_, p_8363_);
+        // Paper end - rewrite chunk system
     }
 
     @Nullable
     @Override
     public LevelChunk getChunkNow(int p_8357_, int p_8358_) {
-        if (Thread.currentThread() != this.mainThread) {
-            return null;
-        } else {
-            this.level.getProfiler().incrementCounter("getChunkNow");
-            long i = ChunkPos.asLong(p_8357_, p_8358_);
-
-            for (int j = 0; j < 4; j++) {
-                if (i == this.lastChunkPos[j] && this.lastChunkStatus[j] == ChunkStatus.FULL) {
-                    ChunkAccess chunkaccess = this.lastChunk[j];
-                    return chunkaccess instanceof LevelChunk ? (LevelChunk)chunkaccess : null;
-                }
-            }
-
-            ChunkHolder chunkholder = this.getVisibleChunkIfPresent(i);
-            if (chunkholder == null) {
-                return null;
-            } else {
-                ChunkAccess chunkaccess1 = chunkholder.getChunkIfPresent(ChunkStatus.FULL);
-                if (chunkaccess1 != null) {
-                    this.storeInCache(i, chunkaccess1, ChunkStatus.FULL);
-                    if (chunkaccess1 instanceof LevelChunk) {
-                        return (LevelChunk)chunkaccess1;
-                    }
-                }
-
-                return null;
-            }
-        }
+        return this.fullChunks.get(ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkKey(p_8357_, p_8358_)); // Paper - rewrite chunk system
     }
 
     private void clearCache() {
@@ -219,28 +_,43 @@
         return completablefuture;
     }
 
-    private CompletableFuture<ChunkResult<ChunkAccess>> getChunkFutureMainThread(int p_8457_, int p_8458_, ChunkStatus p_331599_, boolean p_8460_) {
-        ChunkPos chunkpos = new ChunkPos(p_8457_, p_8458_);
-        long i = chunkpos.toLong();
-        int j = ChunkLevel.byStatus(p_331599_);
-        ChunkHolder chunkholder = this.getVisibleChunkIfPresent(i);
-        if (p_8460_) {
-            this.distanceManager.addTicket(TicketType.UNKNOWN, chunkpos, j, chunkpos);
-            if (this.chunkAbsent(chunkholder, j)) {
-                ProfilerFiller profilerfiller = this.level.getProfiler();
-                profilerfiller.push("chunkLoad");
-                this.runDistanceManagerUpdates();
-                chunkholder = this.getVisibleChunkIfPresent(i);
-                profilerfiller.pop();
-                if (this.chunkAbsent(chunkholder, j)) {
-                    throw (IllegalStateException)Util.pauseInIde(new IllegalStateException("No chunk holder after ticket has been added"));
+    private CompletableFuture<ChunkResult<ChunkAccess>> getChunkFutureMainThread(int chunkX, int chunkZ, ChunkStatus leastStatus, boolean create) {
+    // Paper start - rewrite chunk system
+        ca.spottedleaf.moonrise.common.util.TickThread.ensureTickThread(this.level, chunkX, chunkZ, "Scheduling chunk load off-main");
+
+        final int minLevel = ChunkLevel.byStatus(leastStatus);
+        final ca.spottedleaf.moonrise.patches.chunk_system.scheduling.NewChunkHolder chunkHolder = ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getChunkTaskScheduler().chunkHolderManager.getChunkHolder(chunkX, chunkZ);
+
+        final boolean needsFullScheduling = leastStatus == ChunkStatus.FULL && (chunkHolder == null || !chunkHolder.getChunkStatus().isOrAfter(FullChunkStatus.FULL));
+
+        if ((chunkHolder == null || chunkHolder.getTicketLevel() > minLevel || needsFullScheduling) && !create) {
+            return ChunkHolder.UNLOADED_CHUNK_FUTURE;
+        }
+
+        final ChunkAccess ifPresent = chunkHolder == null ? null : chunkHolder.getChunkIfPresent(leastStatus);
+        if (needsFullScheduling || ifPresent == null) {
+            // schedule
+            final CompletableFuture<ChunkResult<ChunkAccess>> ret = new CompletableFuture<>();
+            final Consumer<ChunkAccess> complete = (ChunkAccess chunk) -> {
+                if (chunk == null) {
+                    ret.complete(ChunkHolder.UNLOADED_CHUNK);
+                } else {
+                    ret.complete(ChunkResult.of(chunk));
                 }
-            }
+            };
+
+            ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getChunkTaskScheduler().scheduleChunkLoad(
+                    chunkX, chunkZ, leastStatus, true,
+                    ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.HIGHER,
+                    complete
+            );
+
+            return ret;
+        } else {
+            // can return now
+            return CompletableFuture.completedFuture(ChunkResult.of(ifPresent));
         }
-
-        return this.chunkAbsent(chunkholder, j)
-            ? GenerationChunkHolder.UNLOADED_CHUNK_FUTURE
-            : chunkholder.scheduleChunkGenerationTask(p_331599_, this.chunkMap);
+        // Paper end - rewrite chunk system
     }
 
     private boolean chunkAbsent(@Nullable ChunkHolder p_8417_, int p_8418_) {
@@ -249,17 +_,19 @@
 
     @Override
     public boolean hasChunk(int p_8429_, int p_8430_) {
-        ChunkHolder chunkholder = this.getVisibleChunkIfPresent(new ChunkPos(p_8429_, p_8430_).toLong());
-        int i = ChunkLevel.byStatus(ChunkStatus.FULL);
-        return !this.chunkAbsent(chunkholder, i);
+        return this.getChunkNow(p_8429_, p_8430_) != null; // Paper - rewrite chunk system
     }
 
     @Nullable
     @Override
     public LightChunk getChunkForLighting(int p_8454_, int p_8455_) {
-        long i = ChunkPos.asLong(p_8454_, p_8455_);
-        ChunkHolder chunkholder = this.getVisibleChunkIfPresent(i);
-        return chunkholder == null ? null : chunkholder.getChunkIfPresentUnchecked(ChunkStatus.INITIALIZE_LIGHT.getParent());
+        // Paper start - rewrite chunk system
+        final ca.spottedleaf.moonrise.patches.chunk_system.scheduling.NewChunkHolder newChunkHolder = ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getChunkTaskScheduler().chunkHolderManager.getChunkHolder(p_8454_, p_8455_);
+        if (newChunkHolder == null) {
+            return null;
+        }
+        return newChunkHolder.getChunkIfPresentUnchecked(ChunkStatus.INITIALIZE_LIGHT.getParent());
+        // Paper end - rewrite chunk system
     }
 
     public Level getLevel() {
@@ -271,36 +_,35 @@
     }
 
     boolean runDistanceManagerUpdates() {
-        boolean flag = this.distanceManager.runAllUpdates(this.chunkMap);
-        boolean flag1 = this.chunkMap.promoteChunkMap();
-        this.chunkMap.runGenerationTasks();
-        if (!flag && !flag1) {
-            return false;
-        } else {
-            this.clearCache();
-            return true;
-        }
-    }
+        return ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getChunkTaskScheduler().chunkHolderManager.processTicketUpdates(); // Paper - rewrite chunk system
+
+    }
+
+    // Paper start
+    public boolean isPositionTicking(Entity entity) {
+        return this.isPositionTicking(ChunkPos.asLong(net.minecraft.util.Mth.floor(entity.getX()) >> 4, net.minecraft.util.Mth.floor(entity.getZ()) >> 4));
+    }
+    // Paper end
 
     public boolean isPositionTicking(long p_143240_) {
-        ChunkHolder chunkholder = this.getVisibleChunkIfPresent(p_143240_);
-        if (chunkholder == null) {
-            return false;
-        } else {
-            return !this.level.shouldTickBlocksAt(p_143240_) ? false : chunkholder.getTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).isSuccess();
-        }
+        // Paper start - rewrite chunk system
+        final ca.spottedleaf.moonrise.patches.chunk_system.scheduling.NewChunkHolder newChunkHolder = ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getChunkTaskScheduler().chunkHolderManager.getChunkHolder(p_143240_);
+        return newChunkHolder != null && newChunkHolder.isTickingReady();
+        // Paper end - rewrite chunk system
     }
 
     public void save(boolean p_8420_) {
-        this.runDistanceManagerUpdates();
         this.chunkMap.saveAllChunks(p_8420_);
     }
 
     @Override
     public void close() throws IOException {
-        this.save(true);
-        this.lightEngine.close();
-        this.chunkMap.close();
+        // CraftBukkit start
+        this.close(true);
+    }
+
+    public void close(boolean save) throws IOException {
+        ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getChunkTaskScheduler().chunkHolderManager.close(save, true); // Paper - rewrite chunk system
     }
 
     @Override
@@ -313,6 +_,7 @@
         this.runDistanceManagerUpdates();
         this.level.getProfiler().popPush("chunks");
         if (p_201914_) {
+            ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getPlayerChunkLoader().tick(); // Paper - rewrite chunk system
             this.tickChunks();
             this.chunkMap.tick();
         }
@@ -324,68 +_,132 @@
     }
 
     private void tickChunks() {
+        long chunksTicked = 0; // Paper - rewrite chunk system
         long i = this.level.getGameTime();
         long j = i - this.lastInhabitedUpdate;
+
         this.lastInhabitedUpdate = i;
         if (!this.level.isDebug()) {
-            ProfilerFiller profilerfiller = this.level.getProfiler();
-            profilerfiller.push("pollingChunks");
-            profilerfiller.push("filteringLoadedChunks");
-            List<ServerChunkCache.ChunkAndHolder> list = Lists.newArrayListWithCapacity(this.chunkMap.size());
-
-            for (ChunkHolder chunkholder : this.chunkMap.getChunks()) {
-                LevelChunk levelchunk = chunkholder.getTickingChunk();
-                if (levelchunk != null) {
-                    list.add(new ServerChunkCache.ChunkAndHolder(levelchunk, chunkholder));
+            ProfilerFiller gameprofilerfiller = this.level.getProfiler();
+
+            gameprofilerfiller.push("pollingChunks");
+            gameprofilerfiller.push("filteringLoadedChunks");
+            // Paper start - chunk tick iteration optimisations
+            List<ServerChunkCache.ChunkAndHolder> list;
+            {
+                final ca.spottedleaf.moonrise.common.list.ReferenceList<net.minecraft.server.level.ServerChunkCache.ChunkAndHolder> tickingChunks =
+                        ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel) this.level).moonrise$getTickingChunks();
+
+                final ServerChunkCache.ChunkAndHolder[] raw = tickingChunks.getRawDataUnchecked();
+                final int size = tickingChunks.size();
+
+                if (this.iterationCopy == null || this.iterationCopy.length < size) {
+                    this.iterationCopy = new ServerChunkCache.ChunkAndHolder[raw.length];
                 }
-            }
+                System.arraycopy(raw, 0, this.iterationCopy, 0, size);
 
-            if (this.level.tickRateManager().runsNormally()) {
-                profilerfiller.popPush("naturalSpawnCount");
-                int l = this.distanceManager.getNaturalSpawnChunkCount();
-                NaturalSpawner.SpawnState naturalspawner$spawnstate = NaturalSpawner.createState(
-                    l, this.level.getAllEntities(), this::getFullChunk, new LocalMobCapCalculator(this.chunkMap)
+                list = it.unimi.dsi.fastutil.objects.ObjectArrayList.wrap(
+                        this.iterationCopy, size
                 );
-                this.lastSpawnState = naturalspawner$spawnstate;
-                profilerfiller.popPush("spawnAndTick");
-                boolean flag1 = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING);
-                Util.shuffle(list, this.level.random);
-                int k = this.level.getGameRules().getInt(GameRules.RULE_RANDOMTICKING);
-                boolean flag = this.level.getLevelData().getGameTime() % 400L == 0L;
-
-                for (ServerChunkCache.ChunkAndHolder serverchunkcache$chunkandholder : list) {
-                    LevelChunk levelchunk1 = serverchunkcache$chunkandholder.chunk;
-                    ChunkPos chunkpos = levelchunk1.getPos();
-                    if (this.level.isNaturalSpawningAllowed(chunkpos) && this.chunkMap.anyPlayerCloseEnoughForSpawning(chunkpos)) {
-                        levelchunk1.incrementInhabitedTime(j);
-                        if (flag1 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunkpos)) {
-                            NaturalSpawner.spawnForChunk(this.level, levelchunk1, naturalspawner$spawnstate, this.spawnFriendlies, this.spawnEnemies, flag);
-                        }
-
-                        if (this.level.shouldTickBlocksAt(chunkpos.toLong())) {
-                            this.level.tickChunk(levelchunk1, k);
-                        }
-                    }
-                }
-
-                profilerfiller.popPush("customSpawners");
-                if (flag1) {
+            }
+            // Paper end - chunk tick iteration optimisations
+            Iterator iterator = null; // Paper - chunk tick iteration optimisations
+            if (this.level.getServer().tickRateManager().runsNormally())
+
+            // Paper - chunk tick iteration optimisations
+
+            if (this.level.tickRateManager().runsNormally()) {
+                gameprofilerfiller.popPush("naturalSpawnCount");
+                int k = this.distanceManager.getNaturalSpawnChunkCount();
+                // Paper start - Optional per player mob spawns
+                int naturalSpawnChunkCount = k;
+                NaturalSpawner.SpawnState spawnercreature_d; // moved down
+                if ((this.spawnFriendlies || this.spawnEnemies) && this.level.paperConfig().entities.spawning.perPlayerMobSpawns) { // don't count mobs when animals and monsters are disabled
+                    // re-set mob counts
+                    for (ServerPlayer player : this.level.players) {
+                        // Paper start - per player mob spawning backoff
+                        for (int ii = 0; ii < ServerPlayer.MOBCATEGORY_TOTAL_ENUMS; ii++) {
+                            player.mobCounts[ii] = 0;
+
+                            int newBackoff = player.mobBackoffCounts[ii] - 1; // TODO make configurable bleed // TODO use nonlinear algorithm?
+                            if (newBackoff < 0) {
+                                newBackoff = 0;
+                            }
+                            player.mobBackoffCounts[ii] = newBackoff;
+                        }
+                        // Paper end - per player mob spawning backoff
+                    }
+                    spawnercreature_d = NaturalSpawner.createState(naturalSpawnChunkCount, this.level.getAllEntities(), this::getFullChunk, null); //TODO: check this
+                } else {
+                    spawnercreature_d = NaturalSpawner.createState(naturalSpawnChunkCount, this.level.getAllEntities(), this::getFullChunk, !this.level.paperConfig().entities.spawning.perPlayerMobSpawns ? new LocalMobCapCalculator(this.chunkMap) : null);
+                }
+                // Paper end - Optional per player mob spawns
+
+                this.lastSpawnState = spawnercreature_d;
+                gameprofilerfiller.popPush("spawnAndTick");
+                boolean flag = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && !this.level.players().isEmpty(); // CraftBukkit
+
+                if (!this.level.paperConfig().entities.spawning.perPlayerMobSpawns) Util.shuffle(list, this.level.random); // Paper - per player mob spawns - do not need this when per-player is enabled
+                int l = this.level.getGameRules().getInt(GameRules.RULE_RANDOMTICKING);
+                boolean flag1 = this.level.getLevelData().getGameTime() % 400L == 0L;
+                Iterator iterator1 = list.iterator();
+
+                while (iterator1.hasNext()) {
+                    ServerChunkCache.ChunkAndHolder chunkproviderserver_a = (ServerChunkCache.ChunkAndHolder) iterator1.next();
+                    LevelChunk chunk1 = chunkproviderserver_a.chunk;
+                    ChunkPos chunkcoordintpair = chunk1.getPos();
+
+                    if (true && this.chunkMap.anyPlayerCloseEnoughForSpawning(chunkcoordintpair)) { // Paper - rewrite chunk system
+                        chunk1.incrementInhabitedTime(j);
+                        if (flag && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunkcoordintpair) && this.chunkMap.anyPlayerCloseEnoughForSpawning(chunkcoordintpair)) { // Spigot
+                            NaturalSpawner.spawnForChunk(this.level, chunk1, spawnercreature_d, this.spawnFriendlies, this.spawnEnemies, flag1);
+                        }
+
+                        if (true) { // Paper - rewrite chunk system
+                            this.level.tickChunk(chunk1, l);
+                            // Paper start - rewrite chunk system
+                            if ((++chunksTicked & 7L) == 0L) {
+                                ((ca.spottedleaf.moonrise.patches.chunk_system.server.ChunkSystemMinecraftServer)this.level.getServer()).moonrise$executeMidTickTasks();
+                            }
+                            // Paper end - rewrite chunk system
+                        }
+                    }
+                }
+
+                gameprofilerfiller.popPush("customSpawners");
+                if (flag) {
                     this.level.tickCustomSpawners(this.spawnEnemies, this.spawnFriendlies);
                 }
             }
 
-            profilerfiller.popPush("broadcast");
-            list.forEach(p_184022_ -> p_184022_.holder.broadcastChanges(p_184022_.chunk));
-            profilerfiller.pop();
-            profilerfiller.pop();
+            gameprofilerfiller.popPush("broadcast");
+            // Paper start - chunk tick iteration optimisations
+            {
+                final it.unimi.dsi.fastutil.objects.ObjectArrayList<net.minecraft.server.level.ServerChunkCache.ChunkAndHolder> chunks = (it.unimi.dsi.fastutil.objects.ObjectArrayList<net.minecraft.server.level.ServerChunkCache.ChunkAndHolder>)list;
+                final ServerChunkCache.ChunkAndHolder[] raw = chunks.elements();
+                final int size = chunks.size();
+
+                Objects.checkFromToIndex(0, size, raw.length);
+                for (int idx = 0; idx < size; ++idx) {
+                    final ServerChunkCache.ChunkAndHolder holder = raw[idx];
+                    raw[idx] = null;
+
+                    holder.holder().broadcastChanges(holder.chunk());
+                }
+            }
+            // Paper end - chunk tick iteration optimisations
+            gameprofilerfiller.pop();
+            gameprofilerfiller.pop();
         }
     }
 
     private void getFullChunk(long p_8371_, Consumer<LevelChunk> p_8372_) {
-        ChunkHolder chunkholder = this.getVisibleChunkIfPresent(p_8371_);
-        if (chunkholder != null) {
-            chunkholder.getFullChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).ifSuccess(p_8372_);
+        // Paper start - rewrite chunk system
+        final LevelChunk fullChunk = this.getChunkNow(ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkX(p_8371_), ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkZ(p_8371_));
+        if (fullChunk != null) {
+            p_8372_.accept(fullChunk);
         }
+        // Paper end - rewrite chunk system
     }
 
     @Override
@@ -435,10 +_,16 @@
     }
 
     public <T> void addRegionTicket(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_) {
+        addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_, false);
+    }
+    public <T> void addRegionTicket(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_, boolean forceTicks) {
         this.distanceManager.addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_);
     }
 
     public <T> void removeRegionTicket(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_) {
+        removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_, false);
+    }
+    public <T> void removeRegionTicket(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_, boolean forceTicks) {
         this.distanceManager.removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_);
     }
 
@@ -473,6 +_,12 @@
         this.chunkMap.setServerViewDistance(p_8355_);
     }
 
+    // Paper start - rewrite chunk system
+    public void setSendViewDistance(int viewDistance) {
+        ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getPlayerChunkLoader().setSendDistance(viewDistance);
+    }
+    // Paper end - rewrite chunk system
+
     public void setSimulationDistance(int p_184027_) {
         this.distanceManager.updateSimulationDistance(p_184027_);
     }
@@ -509,10 +_,10 @@
         this.distanceManager.removeTicketsOnClosing();
     }
 
-    static record ChunkAndHolder(LevelChunk chunk, ChunkHolder holder) {
+    public static record ChunkAndHolder(LevelChunk chunk, ChunkHolder holder) {
     }
 
-    final class MainThreadExecutor extends BlockableEventLoop<Runnable> {
+    public final class MainThreadExecutor extends BlockableEventLoop<Runnable> {
         MainThreadExecutor(Level p_8494_) {
             super("Chunk source main thread executor for " + p_8494_.dimension().location());
         }
@@ -549,13 +_,17 @@
         }
 
         @Override
+        // CraftBukkit start - process pending Chunk loadCallback() and unloadCallback() after each run task
         public boolean pollTask() {
-            if (ServerChunkCache.this.runDistanceManagerUpdates()) {
+            // Paper start - rewrite chunk system
+            final ServerChunkCache serverChunkCache = ServerChunkCache.this;
+            if (serverChunkCache.runDistanceManagerUpdates()) {
                 return true;
             } else {
-                ServerChunkCache.this.lightEngine.tryScheduleUpdate();
-                return super.pollTask();
+                return super.pollTask() | ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)serverChunkCache.level).moonrise$getChunkTaskScheduler().executeMainThreadTask();
             }
+            // Paper end - rewrite chunk system
+            // CraftBukkit end
         }
     }
 }
