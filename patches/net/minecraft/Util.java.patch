--- a/net/minecraft/Util.java
+++ b/net/minecraft/Util.java
@@ -89,7 +_,7 @@
     private static final int DEFAULT_MAX_THREADS = 255;
     private static final int DEFAULT_SAFE_FILE_OPERATION_RETRIES = 10;
     private static final String MAX_THREADS_SYSTEM_PROPERTY = "max.bg.threads";
-    private static final ExecutorService BACKGROUND_EXECUTOR = makeExecutor("Main");
+    private static final ExecutorService BACKGROUND_EXECUTOR = makeExecutor("Main", -1); // Paper - Perf: add priority
     private static final ExecutorService IO_POOL = makeIoExecutor("IO-Worker-", false);
     private static final ExecutorService DOWNLOAD_POOL = makeIoExecutor("Download-", true);
     private static final DateTimeFormatter FILENAME_DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd_HH.mm.ss", Locale.ROOT);
@@ -146,32 +_,28 @@
         return FILENAME_DATE_TIME_FORMATTER.format(ZonedDateTime.now());
     }
 
-    private static ExecutorService makeExecutor(String p_137478_) {
-        int i = Mth.clamp(Runtime.getRuntime().availableProcessors() - 1, 1, getMaxThreads());
-        ExecutorService executorservice;
+
+    private static ExecutorService makeExecutor(String s, int priorityModifier) { // Paper - Perf: add priority
+        // Paper start - Perf: use simpler thread pool that allows 1 thread and reduce worldgen thread worker count for low core count CPUs
+        int cpus = Runtime.getRuntime().availableProcessors() / 2;
+        int i;
+        if (cpus <= 4) {
+            i = cpus <= 2 ? 1 : 2;
+        } else if (cpus <= 8) {
+            // [5, 8]
+            i = Math.max(3, cpus - 2);
+        } else {
+            i = cpus * 2 / 3;
+        }
+        i = Math.min(8, i);
+        i = Integer.getInteger("Paper.WorkerThreadCount", i);
+        ExecutorService executorService;
         if (i <= 0) {
-            executorservice = MoreExecutors.newDirectExecutorService();
+            executorService = MoreExecutors.newDirectExecutorService();
         } else {
-            AtomicInteger atomicinteger = new AtomicInteger(1);
-            executorservice = new ForkJoinPool(i, p_314383_ -> {
-                ForkJoinWorkerThread forkjoinworkerthread = new ForkJoinWorkerThread(p_314383_) {
-                    @Override
-                    protected void onTermination(Throwable p_211561_) {
-                        if (p_211561_ != null) {
-                            Util.LOGGER.warn("{} died", this.getName(), p_211561_);
-                        } else {
-                            Util.LOGGER.debug("{} shutdown", this.getName());
-                        }
-
-                        super.onTermination(p_211561_);
-                    }
-                };
-                forkjoinworkerthread.setName("Worker-" + p_137478_ + "-" + atomicinteger.getAndIncrement());
-                return forkjoinworkerthread;
-            }, Util::onThreadException, true);
+            executorService = new java.util.concurrent.ThreadPoolExecutor(i, i,0L, TimeUnit.MILLISECONDS, new java.util.concurrent.LinkedBlockingQueue<>(), target -> new io.papermc.paper.util.ServerWorkerThread(target, s, priorityModifier));
         }
-
-        return executorservice;
+        return executorService;
     }
 
     private static int getMaxThreads() {
@@ -239,7 +_,7 @@
         throw p_137560_ instanceof RuntimeException ? (RuntimeException)p_137560_ : new RuntimeException(p_137560_);
     }
 
-    private static void onThreadException(Thread p_137496_, Throwable p_137497_) {
+    public static void onThreadException(Thread p_137496_, Throwable p_137497_) {
         pauseInIde(p_137497_);
         if (p_137497_ instanceof CompletionException) {
             p_137497_ = p_137497_.getCause();
@@ -267,8 +_,8 @@
                 .getSchema(DataFixUtils.makeKey(SharedConstants.getCurrentVersion().getDataVersion().getVersion()))
                 .getChoiceType(p_137552_, p_137553_);
         } catch (IllegalArgumentException illegalargumentexception) {
-            LOGGER.error("No data fixer registered for {}", p_137553_);
-            if (SharedConstants.IS_RUNNING_IN_IDE) {
+            LOGGER.debug("No data fixer registered for {}", p_137553_);
+            if (SharedConstants.IS_RUNNING_IN_IDE && false) {
                 throw illegalargumentexception;
             }
         }
@@ -526,20 +_,20 @@
 
     public static void logAndPauseIfInIde(String p_143786_) {
         LOGGER.error(p_143786_);
-        if (SharedConstants.IS_RUNNING_IN_IDE) {
+        if (SharedConstants.IS_RUNNING_WITH_JDWP) {
             doPause(p_143786_);
         }
     }
 
     public static void logAndPauseIfInIde(String p_200891_, Throwable p_200892_) {
         LOGGER.error(p_200891_, p_200892_);
-        if (SharedConstants.IS_RUNNING_IN_IDE) {
+        if (SharedConstants.IS_RUNNING_WITH_JDWP) {
             doPause(p_200891_);
         }
     }
 
     public static <T extends Throwable> T pauseInIde(T p_137571_) {
-        if (SharedConstants.IS_RUNNING_IN_IDE) {
+        if (SharedConstants.IS_RUNNING_WITH_JDWP) {
             LOGGER.error("Trying to throw a fatal exception, pausing in IDE", p_137571_);
             doPause(p_137571_.getMessage());
         }
