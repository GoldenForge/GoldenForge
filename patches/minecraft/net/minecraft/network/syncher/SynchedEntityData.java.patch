--- a/net/minecraft/network/syncher/SynchedEntityData.java
+++ b/net/minecraft/network/syncher/SynchedEntityData.java
@@ -8,6 +_,8 @@
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+
+import java.util.Arrays;
 import java.util.List;
 import java.util.Locale;
 import java.util.Objects;
@@ -29,20 +_,25 @@
    private static final int f_179843_ = 254;
    private final Entity f_135344_;
    private final Int2ObjectMap<SynchedEntityData.DataItem<?>> f_135345_ = new Int2ObjectOpenHashMap<>();
-   private final ReadWriteLock f_135346_ = new ReentrantReadWriteLock();
+   //private final ReadWriteLock lock = new ReentrantReadWriteLock();
    private boolean f_135347_ = true;
    private boolean f_135348_;
 
+   private static final int DEFAULT_ENTRY_COUNT = 10, GROW_FACTOR = 8;
+   private SynchedEntityData.DataItem<?>[] entriesArray = new SynchedEntityData.DataItem<?>[DEFAULT_ENTRY_COUNT];
+
    public SynchedEntityData(Entity p_135351_) {
       this.f_135344_ = p_135351_;
    }
 
    public static <T> EntityDataAccessor<T> m_135353_(Class<? extends Entity> p_135354_, EntityDataSerializer<T> p_135355_) {
-      if (f_135342_.isDebugEnabled()) {
+      if (true || f_135342_.isDebugEnabled()) { // Forge: This is very useful for mods that register keys on classes that are not their own
          try {
             Class<?> oclass = Class.forName(Thread.currentThread().getStackTrace()[2].getClassName());
             if (!oclass.equals(p_135354_)) {
-               f_135342_.debug("defineId called for: {} from {}", p_135354_, oclass, new RuntimeException());
+               // Forge: log at warn, mods should not add to classes that they don't own, and only add stacktrace when in debug is enabled as it is mostly not needed and consumes time
+               if (f_135342_.isDebugEnabled()) f_135342_.warn("defineId called for: {} from {}", p_135354_, oclass, new RuntimeException());
+               else f_135342_.warn("defineId called for: {} from {}", p_135354_, oclass);
             }
          } catch (ClassNotFoundException classnotfoundexception) {
          }
@@ -89,28 +_,57 @@
 
    private <T> void m_135385_(EntityDataAccessor<T> p_135386_, T p_135387_) {
       SynchedEntityData.DataItem<T> dataitem = new SynchedEntityData.DataItem<>(p_135386_, p_135387_);
-      this.f_135346_.writeLock().lock();
+      // Goldenforge start
+      SynchedEntityData.DataItem<?>[] storage = this.entriesArray;
+      // Check if we need to grow the backing array to accommodate the new key range
+      if (storage.length <= p_135386_.m_135015_()) {
+         // Grow the array to accommodate 8 entries after this one, but limit it to never be larger
+         // than 256 entries as per the vanilla limit
+         int newSize = Math.min(p_135386_.m_135015_() + GROW_FACTOR, 256);
+
+         this.entriesArray = storage = Arrays.copyOf(storage, newSize);
+      }
+
+      // Update the storage
+      storage[p_135386_.m_135015_()] = dataitem;
       this.f_135345_.put(p_135386_.m_135015_(), dataitem);
+      // Goldenforge end
       this.f_135347_ = false;
-      this.f_135346_.writeLock().unlock();
    }
 
    private <T> SynchedEntityData.DataItem<T> m_135379_(EntityDataAccessor<T> p_135380_) {
-      this.f_135346_.readLock().lock();
-
-      SynchedEntityData.DataItem<T> dataitem;
+      // Goldenforge start
       try {
-         dataitem = (SynchedEntityData.DataItem<T>)this.f_135345_.get(p_135380_.m_135015_());
-      } catch (Throwable throwable) {
-         CrashReport crashreport = CrashReport.m_127521_(throwable, "Getting synched entity data");
-         CrashReportCategory crashreportcategory = crashreport.m_127514_("Synched entity data");
-         crashreportcategory.m_128159_("Data ID", p_135380_);
-         throw new ReportedException(crashreport);
-      } finally {
-         this.f_135346_.readLock().unlock();
+         SynchedEntityData.DataItem<?>[] array = this.entriesArray;
+
+         int id = p_135380_.m_135015_();
+
+         // The vanilla implementation will simply return null if the tracker doesn't contain the specified entry. However,
+         // accessing an array with an invalid pointer will throw a OOB exception, where-as a HashMap would simply
+         // return null. We check this case (which should be free, even if so insignificant, as the subsequent bounds
+         // check will hopefully be eliminated)
+         if (id < 0 || id >= array.length) {
+            return null;
+         }
+
+         // This cast can fail if trying to access a entry which doesn't belong to this tracker, as the ID could
+         // instead point to an entry of a different type. However, that is also vanilla behaviour.
+         // noinspection unchecked
+         return (SynchedEntityData.DataItem<T>) array[id];
+      } catch (Throwable cause) {
+         // Move to another method so this function can be in-lined better
+         throw onGetException(cause, p_135380_);
       }
-
-      return dataitem;
+      // Goldenforge end
+   }
+
+   private static <T> ReportedException onGetException(Throwable cause, EntityDataAccessor<T> data) {
+      CrashReport report = CrashReport.m_127521_(cause, "Getting synced entity data");
+
+      CrashReportCategory section = report.m_127514_("Synced entity data");
+      section.m_128159_("Data ID", data);
+
+      return new ReportedException(report);
    }
 
    public <T> T m_135370_(EntityDataAccessor<T> p_135371_) {
@@ -146,8 +_,6 @@
    public List<SynchedEntityData.DataItem<?>> m_135378_() {
       List<SynchedEntityData.DataItem<?>> list = null;
       if (this.f_135348_) {
-         this.f_135346_.readLock().lock();
-
          for(SynchedEntityData.DataItem<?> dataitem : this.f_135345_.values()) {
             if (dataitem.m_135406_()) {
                dataitem.m_135401_(false);
@@ -158,8 +_,6 @@
                list.add(dataitem.m_135407_());
             }
          }
-
-         this.f_135346_.readLock().unlock();
       }
 
       this.f_135348_ = false;
@@ -169,7 +_,6 @@
    @Nullable
    public List<SynchedEntityData.DataItem<?>> m_135384_() {
       List<SynchedEntityData.DataItem<?>> list = null;
-      this.f_135346_.readLock().lock();
 
       for(SynchedEntityData.DataItem<?> dataitem : this.f_135345_.values()) {
          if (list == null) {
@@ -179,7 +_,6 @@
          list.add(dataitem.m_135407_());
       }
 
-      this.f_135346_.readLock().unlock();
       return list;
    }
 
@@ -222,21 +_,16 @@
    }
 
    public void m_135356_(List<SynchedEntityData.DataItem<?>> p_135357_) {
-      this.f_135346_.writeLock().lock();
-
-      try {
-         for(SynchedEntityData.DataItem<?> dataitem : p_135357_) {
-            SynchedEntityData.DataItem<?> dataitem1 = this.f_135345_.get(dataitem.m_135396_().m_135015_());
-            if (dataitem1 != null) {
-               this.m_135375_(dataitem1, dataitem);
-               this.f_135344_.m_7350_(dataitem.m_135396_());
-            }
-         }
-      } finally {
-         this.f_135346_.writeLock().unlock();
-      }
-
-      this.f_135348_ = true;
+
+       for(SynchedEntityData.DataItem<?> dataitem : p_135357_) {
+          SynchedEntityData.DataItem<?> dataitem1 = this.f_135345_.get(dataitem.m_135396_().m_135015_());
+          if (dataitem1 != null) {
+             this.m_135375_(dataitem1, dataitem);
+             this.f_135344_.m_7350_(dataitem.m_135396_());
+          }
+       }
+
+       this.f_135348_ = true;
    }
 
    private <T> void m_135375_(SynchedEntityData.DataItem<T> p_135376_, SynchedEntityData.DataItem<?> p_135377_) {
@@ -253,13 +_,11 @@
 
    public void m_135389_() {
       this.f_135348_ = false;
-      this.f_135346_.readLock().lock();
 
       for(SynchedEntityData.DataItem<?> dataitem : this.f_135345_.values()) {
          dataitem.m_135401_(false);
       }
 
-      this.f_135346_.readLock().unlock();
    }
 
    public static class DataItem<T> {
