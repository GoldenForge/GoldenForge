--- a/net/minecraft/network/FriendlyByteBuf.java
+++ b/net/minecraft/network/FriendlyByteBuf.java
@@ -65,7 +_,7 @@
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
 
-public class FriendlyByteBuf extends ByteBuf {
+public class FriendlyByteBuf extends ByteBuf implements net.minecraftforge.common.extensions.IForgeFriendlyByteBuf {
    private static final int f_178335_ = 5;
    private static final int f_178336_ = 10;
    private static final int f_178337_ = 2097152;
@@ -81,6 +_,18 @@
    }
 
    public static int m_130053_(int p_130054_) {
+      // Paper start - Optimize VarInts
+      return VARINT_EXACT_BYTE_LENGTHS[Integer.numberOfLeadingZeros(p_130054_)];
+   }
+   private static final int[] VARINT_EXACT_BYTE_LENGTHS = new int[33];
+   static {
+      for (int i = 0; i <= 32; ++i) {
+         VARINT_EXACT_BYTE_LENGTHS[i] = (int) Math.ceil((31d - (i - 1)) / 7d);
+      }
+      VARINT_EXACT_BYTE_LENGTHS[32] = 1; // Special case for the number 0.
+   }
+
+   public static int getVarIntSize_Old(int p_130054_) {
       for(int i = 1; i < 5; ++i) {
          if ((p_130054_ & -1 << i * 7) == 0) {
             return i;
@@ -456,6 +_,21 @@
    }
 
    public FriendlyByteBuf m_130130_(int p_130131_) {
+      // Paper start - Optimize VarInts
+      // Peel the one and two byte count cases explicitly as they are the most common VarInt sizes
+      // that the proxy will write, to improve inlining.
+      if ((p_130131_ & (0xFFFFFFFF << 7)) == 0) {
+         this.writeByte(p_130131_);
+      } else if ((p_130131_ & (0xFFFFFFFF << 14)) == 0) {
+         int w = (p_130131_ & 0x7F | 0x80) << 8 | (p_130131_ >>> 7);
+         this.writeShort(w);
+      } else {
+         writeVarInt_Old(p_130131_);
+      }
+      return this;
+   }
+
+   public FriendlyByteBuf writeVarInt_Old(int p_130131_) {
       while((p_130131_ & -128) != 0) {
          this.writeByte(p_130131_ & 127 | 128);
          p_130131_ >>>= 7;
@@ -517,6 +_,15 @@
    }
 
    public FriendlyByteBuf m_130055_(ItemStack p_130056_) {
+      return writeItemStack(p_130056_, true);
+   }
+
+   /**
+    * Most ItemStack serialization is Server to Client,and doesn't need to know the FULL tag details.
+    * One exception is items from the creative menu, which must be sent from Client to Server with their full NBT.
+    * If you want to send the FULL tag set limitedTag to false
+    */
+   public FriendlyByteBuf writeItemStack(ItemStack p_130056_, boolean limitedTag) {
       if (p_130056_.m_41619_()) {
          this.writeBoolean(false);
       } else {
@@ -525,8 +_,8 @@
          this.m_236818_(Registry.f_122827_, item);
          this.writeByte(p_130056_.m_41613_());
          CompoundTag compoundtag = null;
-         if (item.m_41465_() || item.m_41468_()) {
-            compoundtag = p_130056_.m_41783_();
+         if (item.isDamageable(p_130056_) || item.m_41468_()) {
+            compoundtag = limitedTag ? p_130056_.getShareTag() : p_130056_.m_41783_();
          }
 
          this.m_130079_(compoundtag);
@@ -542,7 +_,7 @@
          Item item = this.m_236816_(Registry.f_122827_);
          int i = this.readByte();
          ItemStack itemstack = new ItemStack(item, i);
-         itemstack.m_41751_(this.m_130260_());
+         itemstack.readShareTag(this.m_130260_());
          return itemstack;
       }
    }
@@ -554,9 +_,7 @@
    public String m_130136_(int p_130137_) {
       int i = m_236870_(p_130137_);
       int j = this.m_130242_();
-      if (j > i) {
-         throw new DecoderException("The received encoded string buffer length is longer than maximum allowed (" + j + " > " + i + ")");
-      } else if (j < 0) {
+      if (j < 0) {
          throw new DecoderException("The received encoded string buffer length is less than zero! Weird string!");
       } else {
          String s = this.toString(this.readerIndex(), j, StandardCharsets.UTF_8);
