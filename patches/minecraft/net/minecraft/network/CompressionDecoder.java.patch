--- a/net/minecraft/network/CompressionDecoder.java
+++ b/net/minecraft/network/CompressionDecoder.java
@@ -12,13 +_,20 @@
    public static final int f_182671_ = 2097152;
    public static final int f_182672_ = 8388608;
    private final Inflater f_129434_;
+   private final com.velocitypowered.natives.compression.VelocityCompressor compressor; // Paper
    private int f_129435_;
    private boolean f_182673_;
 
+   // Paper start
    public CompressionDecoder(int p_182675_, boolean p_182676_) {
-      this.f_129435_ = p_182675_;
-      this.f_182673_ = p_182676_;
-      this.f_129434_ = new Inflater();
+      this(null, p_182675_, p_182676_);
+   }
+   public CompressionDecoder(com.velocitypowered.natives.compression.VelocityCompressor compressor, int compressionThreshold, boolean rejectsBadPackets) {
+      this.f_129435_ = compressionThreshold;
+      this.f_182673_ = rejectsBadPackets;
+      this.f_129434_ = compressor == null ? new Inflater() : null;
+      this.compressor = compressor;
+      // Paper end
    }
 
    protected void decode(ChannelHandlerContext p_129441_, ByteBuf p_129442_, List<Object> p_129443_) throws Exception {
@@ -38,16 +_,44 @@
                }
             }
 
-            byte[] abyte = new byte[friendlybytebuf.readableBytes()];
-            friendlybytebuf.readBytes(abyte);
-            this.f_129434_.setInput(abyte);
-            byte[] abyte1 = new byte[i];
-            this.f_129434_.inflate(abyte1);
-            p_129443_.add(Unpooled.wrappedBuffer(abyte1));
-            this.f_129434_.reset();
+            // Paper start
+            if (this.f_129434_ != null) {
+               byte[] bs = new byte[friendlybytebuf.readableBytes()];
+               friendlybytebuf.readBytes(bs);
+               this.f_129434_.setInput(bs);
+               byte[] cs = new byte[i];
+               this.f_129434_.inflate(cs);
+               p_129443_.add(Unpooled.wrappedBuffer(cs));
+               this.f_129434_.reset();
+               return;
+            }
+
+            int claimedUncompressedSize = i; // OBFHELPER
+            ByteBuf compatibleIn = com.velocitypowered.natives.util.MoreByteBufUtils.ensureCompatible(p_129441_.alloc(), this.compressor, p_129442_);
+            ByteBuf uncompressed = com.velocitypowered.natives.util.MoreByteBufUtils.preferredBuffer(p_129441_.alloc(), this.compressor, claimedUncompressedSize);
+            try {
+               this.compressor.inflate(compatibleIn, uncompressed, claimedUncompressedSize);
+               p_129443_.add(uncompressed);
+               p_129442_.clear();
+            } catch (Exception e) {
+               uncompressed.release();
+               throw e;
+            } finally {
+               compatibleIn.release();
+            }
+            // Paper end
          }
       }
    }
+
+   // Paper start
+   @Override
+   public void handlerRemoved0(ChannelHandlerContext ctx) throws Exception {
+      if (this.compressor != null) {
+         this.compressor.close();
+      }
+   }
+   // Paper end
 
    public void m_182677_(int p_182678_, boolean p_182679_) {
       this.f_129435_ = p_182678_;
