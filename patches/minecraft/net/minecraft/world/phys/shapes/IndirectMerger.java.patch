--- a/net/minecraft/world/phys/shapes/IndirectMerger.java
+++ b/net/minecraft/world/phys/shapes/IndirectMerger.java
@@ -10,12 +_,33 @@
    private final int[] f_82998_;
    private final int[] f_82999_;
    private final int f_166022_;
+   // Paper start
+   private static final int[] INFINITE_B_1 = new int[]{1, 1};
+   private static final int[] INFINITE_B_0 = new int[]{0, 0};
+   private static final int[] INFINITE_C = new int[]{0, 1};
+   // Paper end
 
    public IndirectMerger(DoubleList p_83001_, DoubleList p_83002_, boolean p_83003_, boolean p_83004_) {
       double d0 = Double.NaN;
       int i = p_83001_.size();
       int j = p_83002_.size();
       int k = i + j;
+      // Paper start - optimize common path of infinity doublelist
+      int size = p_83001_.size();
+      double tail = p_83001_.getDouble(size - 1);
+      double head = p_83001_.getDouble(0);
+      if (head == Double.NEGATIVE_INFINITY && tail == Double.POSITIVE_INFINITY && !p_83003_ && !p_83004_ && (size == 2 || size == 4)) {
+         this.f_82997_ = p_83002_.toDoubleArray();
+         this.f_166022_ = p_83002_.size();
+         if (size == 2) {
+            this.f_82998_ = INFINITE_B_0;
+         } else {
+            this.f_82998_ = INFINITE_B_1;
+         }
+         this.f_82999_ = INFINITE_C;
+         return;
+      }
+      // Paper end
       this.f_82997_ = new double[k];
       this.f_82998_ = new int[k];
       this.f_82999_ = new int[k];
