--- a/net/minecraft/world/level/biome/MobSpawnSettings.java
+++ b/net/minecraft/world/level/biome/MobSpawnSettings.java
@@ -38,31 +_,77 @@
    private final float f_48328_;
    private final Map<MobCategory, WeightedRandomList<MobSpawnSettings.SpawnerData>> f_48329_;
    private final Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> f_48330_;
+   private final java.util.Set<MobCategory> typesView;
+   private final java.util.Set<EntityType<?>> costView;
 
    MobSpawnSettings(float p_196689_, Map<MobCategory, WeightedRandomList<MobSpawnSettings.SpawnerData>> p_196690_, Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> p_196691_) {
       this.f_48328_ = p_196689_;
-      this.f_48329_ = ImmutableMap.copyOf(p_196690_);
+      f_48329_ = Maps.newEnumMap(MobCategory.class);
+      f_48329_.putAll(p_196690_);
+
       this.f_48330_ = ImmutableMap.copyOf(p_196691_);
+      this.typesView = java.util.Collections.unmodifiableSet(this.f_48329_.keySet());
+      this.costView = java.util.Collections.unmodifiableSet(this.f_48330_.keySet());
    }
 
    public WeightedRandomList<MobSpawnSettings.SpawnerData> m_151798_(MobCategory p_151799_) {
       return this.f_48329_.getOrDefault(p_151799_, f_151796_);
    }
 
+   public java.util.Set<MobCategory> getSpawnerTypes() {
+       return this.typesView;
+   }
+
    @Nullable
    public MobSpawnSettings.MobSpawnCost m_48345_(EntityType<?> p_48346_) {
       return this.f_48330_.get(p_48346_);
    }
 
+   public java.util.Set<EntityType<?>> getEntityTypes() {
+       return this.costView;
+   }
+
    public float m_48344_() {
       return this.f_48328_;
    }
 
    public static class Builder {
+      // Paper start - keep track of data in a pair set to give O(1) contains calls - we have to hook removals incase plugins mess with it
+      public static class MobList extends java.util.ArrayList<MobSpawnSettings.SpawnerData> {
+         java.util.Set<MobSpawnSettings.SpawnerData> biomes = new java.util.HashSet<>();
+
+         @Override
+         public boolean contains(Object o) {
+            return biomes.contains(o);
+         }
+
+         @Override
+         public boolean add(MobSpawnSettings.SpawnerData BiomeSettingsMobs) {
+            biomes.add(BiomeSettingsMobs);
+            return super.add(BiomeSettingsMobs);
+         }
+
+         @Override
+         public MobSpawnSettings.SpawnerData remove(int index) {
+            MobSpawnSettings.SpawnerData removed = super.remove(index);
+            if (removed != null) {
+               biomes.remove(removed);
+            }
+            return removed;
+         }
+
+         @Override
+         public void clear() {
+            biomes.clear();
+            super.clear();
+         }
+      }
+      // use toImmutableEnumMap collector
+      // Paper end
       protected final Map<MobCategory, List<MobSpawnSettings.SpawnerData>> f_48362_ = Stream.of(MobCategory.values()).collect(ImmutableMap.toImmutableMap((p_48383_) -> {
          return p_48383_;
       }, (p_48375_) -> {
-         return Lists.newArrayList();
+         return new MobList(); // Paper
       }));
       protected final Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> f_48363_ = Maps.newLinkedHashMap();
       protected float f_48364_ = 0.1F;
