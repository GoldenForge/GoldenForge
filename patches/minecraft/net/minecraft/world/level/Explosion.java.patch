--- a/net/minecraft/world/level/Explosion.java
+++ b/net/minecraft/world/level/Explosion.java
@@ -38,6 +_,7 @@
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
+import org.goldenforge.config.GoldenForgeConfig;
 
 public class Explosion {
    private static final ExplosionDamageCalculator f_46008_ = new ExplosionDamageCalculator();
@@ -56,6 +_,7 @@
    private final ExplosionDamageCalculator f_46019_;
    private final ObjectArrayList<BlockPos> f_46020_ = new ObjectArrayList<>();
    private final Map<Player, Vec3> f_46021_ = Maps.newHashMap();
+   private final Vec3 position;
 
    public Explosion(Level p_151471_, @Nullable Entity p_151472_, double p_151473_, double p_151474_, double p_151475_, float p_151476_) {
       this(p_151471_, p_151472_, p_151473_, p_151474_, p_151475_, p_151476_, false, Explosion.BlockInteraction.DESTROY);
@@ -85,6 +_,7 @@
       this.f_46010_ = p_46060_;
       this.f_46018_ = p_46053_ == null ? DamageSource.m_19358_(this) : p_46053_;
       this.f_46019_ = p_46054_ == null ? this.m_46062_(p_46052_) : p_46054_;
+      this.position = new Vec3(this.f_46013_, this.f_46014_, this.f_46015_);
    }
 
    private ExplosionDamageCalculator m_46062_(@Nullable Entity p_46063_) {
@@ -148,7 +_,7 @@
                   for(float f1 = 0.3F; f > 0.0F; f -= 0.22500001F) {
                      BlockPos blockpos = new BlockPos(d4, d6, d8);
                      BlockState blockstate = this.f_46012_.m_8055_(blockpos);
-                     FluidState fluidstate = this.f_46012_.m_6425_(blockpos);
+                     FluidState fluidstate = blockstate.m_60819_(); // Paper
                      if (!this.f_46012_.m_46739_(blockpos)) {
                         break;
                      }
@@ -179,7 +_,8 @@
       int i1 = Mth.m_14107_(this.f_46014_ + (double)f2 + 1.0D);
       int j2 = Mth.m_14107_(this.f_46015_ - (double)f2 - 1.0D);
       int j1 = Mth.m_14107_(this.f_46015_ + (double)f2 + 1.0D);
-      List<Entity> list = this.f_46012_.m_45933_(this.f_46016_, new AABB((double)k1, (double)i2, (double)j2, (double)l1, (double)i1, (double)j1));
+      List<Entity> list = this.f_46012_.m_6249_(this.f_46016_, new AABB((double)k1, (double)i2, (double)j2, (double)l1, (double)i1, (double)j1), (com.google.common.base.Predicate<Entity>) entity -> entity.m_6084_() && !entity.m_5833_()); // Paper - Fix lag from explosions processing dead entities
+      net.minecraftforge.event.ForgeEventFactory.onExplosionDetonate(this.f_46012_, this, list, f2);
       Vec3 vec3 = new Vec3(this.f_46013_, this.f_46014_, this.f_46015_);
 
       for(int k2 = 0; k2 < list.size(); ++k2) {
@@ -195,7 +_,7 @@
                   d5 /= d13;
                   d7 /= d13;
                   d9 /= d13;
-                  double d14 = (double)m_46064_(vec3, entity);
+                  double d14 = (double)getBlockDensity(vec3, entity); // Paper - Optimize explosions
                   double d10 = (1.0D - d12) * d14;
                   entity.m_6469_(this.m_46077_(), (float)((int)((d10 * d10 + d10) / 2.0D * 7.0D * (double)f2 + 1.0D)));
                   double d11 = d10;
@@ -242,7 +_,7 @@
             if (!blockstate.m_60795_()) {
                BlockPos blockpos1 = blockpos.m_7949_();
                this.f_46012_.m_46473_().m_6180_("explosion_blocks");
-               if (block.m_6903_(this)) {
+               if (blockstate.canDropFromExplosion(this.f_46012_, blockpos, this)) {
                   Level $$9 = this.f_46012_;
                   if ($$9 instanceof ServerLevel) {
                      ServerLevel serverlevel = (ServerLevel)$$9;
@@ -259,8 +_,7 @@
                   }
                }
 
-               this.f_46012_.m_7731_(blockpos, Blocks.f_50016_.m_49966_(), 3);
-               block.m_7592_(this.f_46012_, blockpos, this);
+               blockstate.onBlockExploded(this.f_46012_, blockpos, this);
                this.f_46012_.m_46473_().m_7238_();
             }
          }
@@ -334,9 +_,99 @@
       return this.f_46020_;
    }
 
+   public Vec3 getPosition() {
+      return this.position;
+   }
+
+   @Nullable
+   public Entity getExploder() {
+      return this.f_46016_;
+   }
+
    public static enum BlockInteraction {
       NONE,
       BREAK,
       DESTROY;
    }
+
+   // Paper start - Optimize explosions
+   private float getBlockDensity(Vec3 vec3d, Entity entity) {
+      if (!GoldenForgeConfig.Server.optimizeExplosions.get()) {
+         return m_46064_(vec3d, entity);
+      }
+      CacheKey key = new CacheKey(this, entity.m_20191_());
+      Float blockDensity = this.f_46012_.explosionDensityCache.get(key);
+      if (blockDensity == null) {
+         blockDensity = m_46064_(vec3d, entity);
+         this.f_46012_.explosionDensityCache.put(key, blockDensity);
+      }
+
+      return blockDensity;
+   }
+
+   static class CacheKey {
+      private final Level world;
+      private final double posX, posY, posZ;
+      private final double minX, minY, minZ;
+      private final double maxX, maxY, maxZ;
+
+      public CacheKey(Explosion explosion, AABB aabb) {
+         this.world = explosion.f_46012_;
+         this.posX = explosion.f_46013_;
+         this.posY = explosion.f_46014_;
+         this.posZ = explosion.f_46015_;
+         this.minX = aabb.f_82288_;
+         this.minY = aabb.f_82289_;
+         this.minZ = aabb.f_82290_;
+         this.maxX = aabb.f_82291_;
+         this.maxY = aabb.f_82292_;
+         this.maxZ = aabb.f_82293_;
+      }
+
+      @Override
+      public boolean equals(Object o) {
+         if (this == o) return true;
+         if (o == null || getClass() != o.getClass()) return false;
+
+         CacheKey cacheKey = (CacheKey) o;
+
+         if (Double.compare(cacheKey.posX, posX) != 0) return false;
+         if (Double.compare(cacheKey.posY, posY) != 0) return false;
+         if (Double.compare(cacheKey.posZ, posZ) != 0) return false;
+         if (Double.compare(cacheKey.minX, minX) != 0) return false;
+         if (Double.compare(cacheKey.minY, minY) != 0) return false;
+         if (Double.compare(cacheKey.minZ, minZ) != 0) return false;
+         if (Double.compare(cacheKey.maxX, maxX) != 0) return false;
+         if (Double.compare(cacheKey.maxY, maxY) != 0) return false;
+         if (Double.compare(cacheKey.maxZ, maxZ) != 0) return false;
+         return world.equals(cacheKey.world);
+      }
+
+      @Override
+      public int hashCode() {
+         int result;
+         long temp;
+         result = world.hashCode();
+         temp = Double.doubleToLongBits(posX);
+         result = 31 * result + (int) (temp ^ (temp >>> 32));
+         temp = Double.doubleToLongBits(posY);
+         result = 31 * result + (int) (temp ^ (temp >>> 32));
+         temp = Double.doubleToLongBits(posZ);
+         result = 31 * result + (int) (temp ^ (temp >>> 32));
+         temp = Double.doubleToLongBits(minX);
+         result = 31 * result + (int) (temp ^ (temp >>> 32));
+         temp = Double.doubleToLongBits(minY);
+         result = 31 * result + (int) (temp ^ (temp >>> 32));
+         temp = Double.doubleToLongBits(minZ);
+         result = 31 * result + (int) (temp ^ (temp >>> 32));
+         temp = Double.doubleToLongBits(maxX);
+         result = 31 * result + (int) (temp ^ (temp >>> 32));
+         temp = Double.doubleToLongBits(maxY);
+         result = 31 * result + (int) (temp ^ (temp >>> 32));
+         temp = Double.doubleToLongBits(maxZ);
+         result = 31 * result + (int) (temp ^ (temp >>> 32));
+         return result;
+      }
+   }
+   // Paper end
 }
