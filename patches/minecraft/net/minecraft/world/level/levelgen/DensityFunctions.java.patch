--- a/net/minecraft/world/level/levelgen/DensityFunctions.java
+++ b/net/minecraft/world/level/levelgen/DensityFunctions.java
@@ -494,6 +_,16 @@
       public static final KeyDispatchDataCodec<DensityFunctions.EndIslandDensityFunction> f_208626_ = KeyDispatchDataCodec.m_216238_(MapCodec.unit(new DensityFunctions.EndIslandDensityFunction(0L)));
       private static final float f_224061_ = -0.9F;
       private final SimplexNoise f_208627_;
+      // Paper start
+      private static final class NoiseCache {
+         public long[] keys = new long[8192];
+         public float[] values = new float[8192];
+         public NoiseCache() {
+            java.util.Arrays.fill(keys, Long.MIN_VALUE);
+         }
+      }
+      private static final ThreadLocal<java.util.Map<SimplexNoise, NoiseCache>> noiseCache = ThreadLocal.withInitial(java.util.WeakHashMap::new);
+      // Paper end
 
       public EndIslandDensityFunction(long p_208630_) {
          RandomSource randomsource = new LegacyRandomSource(p_208630_);
@@ -506,20 +_,34 @@
          int j = p_224065_ / 2;
          int k = p_224064_ % 2;
          int l = p_224065_ % 2;
-         float f = 100.0F - Mth.m_14116_((float)(p_224064_ * p_224064_ + p_224065_ * p_224065_)) * 8.0F;
+         float f = 100.0F - Mth.m_14116_((long) p_224064_ * (long) p_224064_ + (long) p_224065_ * (long) p_224065_) * 8.0F; // Paper - cast ints to long to avoid integer overflow
          f = Mth.m_14036_(f, -100.0F, 80.0F);
 
-         for(int i1 = -12; i1 <= 12; ++i1) {
-            for(int j1 = -12; j1 <= 12; ++j1) {
-               long k1 = (long)(i + i1);
-               long l1 = (long)(j + j1);
-               if (k1 * k1 + l1 * l1 > 4096L && p_224063_.m_75464_((double)k1, (double)l1) < (double)-0.9F) {
-                  float f1 = (Mth.m_14154_((float)k1) * 3439.0F + Mth.m_14154_((float)l1) * 147.0F) % 13.0F + 9.0F;
-                  float f2 = (float)(k - i1 * 2);
-                  float f3 = (float)(l - j1 * 2);
-                  float f4 = 100.0F - Mth.m_14116_(f2 * f2 + f3 * f3) * f1;
-                  f4 = Mth.m_14036_(f4, -100.0F, 80.0F);
-                  f = Math.max(f, f4);
+         NoiseCache cache = noiseCache.get().computeIfAbsent(p_224063_, noiseKey -> new NoiseCache()); // Paper
+         for(int m = -12; m <= 12; ++m) {
+            for(int n = -12; n <= 12; ++n) {
+               long o = (long)(i + m);
+               long p = (long)(j + n);
+               // Paper start - Significantly improve end generation performance by using a noise cache
+               long key = net.minecraft.world.level.ChunkPos.m_45589_((int) o, (int) p);
+               int index = (int) it.unimi.dsi.fastutil.HashCommon.mix(key) & 8191;
+               float g = Float.MIN_VALUE;
+               if (cache.keys[index] == key) {
+                  g = cache.values[index];
+               } else {
+                  if (o * o + p * p > 4096L && p_224063_.m_75464_((double)o, (double)p) < (double)-0.9F) {
+                     g = (Mth.m_14154_((float) o) * 3439.0F + Mth.m_14154_((float) p) * 147.0F) % 13.0F + 9.0F;
+                  }
+                  cache.keys[index] = key;
+                  cache.values[index] = g;
+               }
+               if (g != Float.MIN_VALUE) {
+                  // Paper end
+                  float h = (float)(k - m * 2);
+                  float q = (float)(l - n * 2);
+                  float r = 100.0F - Mth.m_14116_(h * h + q * q) * g;
+                  r = Mth.m_14036_(r, -100.0F, 80.0F);
+                  f = Math.max(f, r);
                }
             }
          }
