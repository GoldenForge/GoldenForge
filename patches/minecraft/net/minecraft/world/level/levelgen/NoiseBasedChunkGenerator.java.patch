--- a/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ b/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -63,6 +_,7 @@
    private final Registry<NormalNoise.NoiseParameters> f_188604_;
    protected final Holder<NoiseGeneratorSettings> f_64318_;
    private final Aquifer.FluidPicker f_188607_;
+   private int cachedSeaLevel;
 
    public NoiseBasedChunkGenerator(Registry<StructureSet> p_224206_, Registry<NormalNoise.NoiseParameters> p_224207_, BiomeSource p_224208_, Holder<NoiseGeneratorSettings> p_224209_) {
       super(p_224206_, Optional.empty(), p_224208_);
@@ -83,7 +_,7 @@
       return CompletableFuture.supplyAsync(Util.m_183946_("init_biomes", () -> {
          this.m_224291_(p_224300_, p_224299_, p_224301_, p_224302_);
          return p_224302_;
-      }), Util.m_183991_());
+      }), p_224298_); // Paper - run with supplied executor
    }
 
    private void m_224291_(Blender p_224292_, RandomState p_224293_, StructureManager p_224294_, ChunkAccess p_224295_) {
@@ -248,24 +_,49 @@
       if (k <= 0) {
          return CompletableFuture.completedFuture(p_224316_);
       } else {
-         int l = p_224316_.m_151564_(k * noisesettings.m_189212_() - 1 + i);
-         int i1 = p_224316_.m_151564_(i);
-         Set<LevelChunkSection> set = Sets.newHashSet();
-
-         for(int j1 = l; j1 >= i1; --j1) {
-            LevelChunkSection levelchunksection = p_224316_.m_183278_(j1);
-            levelchunksection.m_62981_();
-            set.add(levelchunksection);
+
+         int startingChunkSectionIndex = p_224316_.m_151564_(k * noisesettings.m_189212_() - 1 + i);
+         int minimumYChunkSectionIndex = p_224316_.m_151564_(i);
+
+         LevelChunkSection[] chunkSections = new LevelChunkSection[startingChunkSectionIndex - minimumYChunkSectionIndex + 1];
+
+         for (int chunkSectionIndex = startingChunkSectionIndex; chunkSectionIndex >= minimumYChunkSectionIndex; --chunkSectionIndex) {
+            LevelChunkSection chunkSection = p_224316_.m_183278_(chunkSectionIndex);
+
+            chunkSection.m_63006_();
+            chunkSections[chunkSectionIndex] = chunkSection;
          }
 
-         return CompletableFuture.supplyAsync(Util.m_183946_("wgen_fill_noise", () -> {
-            return this.m_224284_(p_224313_, p_224315_, p_224314_, p_224316_, j, k);
-         }), Util.m_183991_()).whenCompleteAsync((p_224309_, p_224310_) -> {
-            for(LevelChunkSection levelchunksection1 : set) {
-               levelchunksection1.m_63006_();
+         return CompletableFuture.supplyAsync(
+                 Util.m_183946_(
+                         "wgen_fill_noise",
+                         () -> this.m_224284_(p_224313_, p_224315_, p_224314_, p_224316_, j,
+                                 k
+                         )
+                 ), p_224312_).whenCompleteAsync((chunk2, throwable) -> {
+            // Replace an enhanced for loop with a fori loop
+            for (int i1 = 0; i1 < chunkSections.length; i1++) {
+               chunkSections[i1].m_63006_();
             }
-
          }, p_224312_);
+//         int l = p_224316_.getSectionIndex(k * noisesettings.getCellHeight() - 1 + i);
+//         int i1 = p_224316_.getSectionIndex(i);
+//         Set<LevelChunkSection> set = Sets.newHashSet();
+//
+//         for(int j1 = l; j1 >= i1; --j1) {
+//            LevelChunkSection levelchunksection = p_224316_.getSection(j1);
+//            levelchunksection.acquire();
+//            set.add(levelchunksection);
+//         }
+//
+//         return CompletableFuture.supplyAsync(Util.wrapThreadWithTaskName("wgen_fill_noise", () -> {
+//            return this.doFill(p_224313_, p_224315_, p_224314_, p_224316_, j, k);
+//         }), p_224312_).whenCompleteAsync((p_224309_, p_224310_) -> { // Paper - run with supplied executor
+//            for(LevelChunkSection levelchunksection1 : set) {
+//               levelchunksection1.release();
+//            }
+//
+//         }, p_224312_);
       }
    }
 
@@ -329,7 +_,8 @@
                               ((ProtoChunk)p_224288_).m_63277_(blockpos$mutableblockpos);
                            }
 
-                           levelchunksection.m_62991_(l3, l2, k4, blockstate, false);
+                           noisium$populateNoiseWrapSetBlockStateOperation(levelchunksection, l3, l2, k4, blockstate, false);
+                           //levelchunksection.setBlockState(l3, l2, k4, blockstate, false);
                            heightmap.m_64249_(l3, k2, k4, blockstate);
                            heightmap1.m_64249_(l3, k2, k4, blockstate);
                            if (aquifer.m_142203_() && !blockstate.m_60819_().m_76178_()) {
@@ -350,6 +_,29 @@
       return p_224288_;
    }
 
+   private BlockState noisium$populateNoiseWrapSetBlockStateOperation(LevelChunkSection chunkSection, int chunkSectionBlockPosX, int chunkSectionBlockPosY, int chunkSectionBlockPosZ, BlockState blockState, boolean lock) {
+      // Update the non empty block count to avoid issues with MC's lighting engine and other systems not recognising the direct palette storage set
+      // See ChunkSection#setBlockState
+      chunkSection.f_62969_ += 1;
+
+      if (!blockState.m_60819_().m_76178_()) {
+         chunkSection.f_62971_ += 1;
+      }
+
+      if (blockState.m_60823_()) {
+         chunkSection.f_62970_ += 1;
+      }
+
+      // Set the blockstate in the palette storage directly to improve performance
+      var blockStateId = chunkSection.f_62972_.f_188032_.f_188102_.m_6796_(blockState);
+      chunkSection.f_62972_.f_188032_.f_188101_().m_13524_(
+              chunkSection.f_62972_.f_188033_.m_188145_(chunkSectionBlockPosX, chunkSectionBlockPosY,
+                      chunkSectionBlockPosZ
+              ), blockStateId);
+
+      return blockState;
+   }
+
    private BlockState m_198231_(NoiseChunk p_198232_, int p_198233_, int p_198234_, int p_198235_, BlockState p_198236_) {
       return p_198236_;
    }
@@ -359,7 +_,7 @@
    }
 
    public int m_6337_() {
-      return this.f_64318_.m_203334_().f_64444_();
+      return this.cachedSeaLevel = this.f_64318_.m_203334_().f_64444_();
    }
 
    public int m_142062_() {
