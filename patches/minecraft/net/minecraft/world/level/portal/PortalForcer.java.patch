--- a/net/minecraft/world/level/portal/PortalForcer.java
+++ b/net/minecraft/world/level/portal/PortalForcer.java
@@ -19,7 +_,7 @@
 import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.levelgen.Heightmap;
 
-public class PortalForcer {
+public class PortalForcer implements net.minecraftforge.common.util.ITeleporter {
    private static final int f_164734_ = 3;
    private static final int f_164735_ = 128;
    private static final int f_164736_ = 16;
@@ -41,19 +_,39 @@
 
    public Optional<BlockUtil.FoundRectangle> m_192985_(BlockPos p_192986_, boolean p_192987_, WorldBorder p_192988_) {
       PoiManager poimanager = this.f_77648_.m_8904_();
-      int i = p_192987_ ? 16 : 128;
-      poimanager.m_27056_(this.f_77648_, p_192986_, i);
-      Optional<PoiRecord> optional = poimanager.m_27166_((p_230634_) -> {
-         return p_230634_.m_203565_(PoiTypes.f_218064_);
-      }, p_192986_, i, PoiManager.Occupancy.ANY).filter((p_192981_) -> {
-         return p_192988_.m_61937_(p_192981_.m_27257_());
-      }).sorted(Comparator.<PoiRecord>comparingDouble((p_192984_) -> {
-         return p_192984_.m_27257_().m_123331_(p_192986_);
-      }).thenComparingInt((p_192992_) -> {
-         return p_192992_.m_27257_().m_123342_();
-      })).filter((p_192990_) -> {
-         return this.f_77648_.m_8055_(p_192990_.m_27257_()).m_61138_(BlockStateProperties.f_61364_);
-      }).findFirst();
+      // Paper start - optimise portals
+      Optional<PoiRecord> optional;
+      java.util.List<PoiRecord> records = new java.util.ArrayList<>();
+      io.papermc.paper.util.PoiAccess.findClosestPoiDataRecords(
+              poimanager,
+              type -> type.m_203565_(PoiTypes.f_218064_),
+              (BlockPos pos) -> {
+                 net.minecraft.world.level.chunk.ChunkAccess lowest = this.f_77648_.m_46819_(pos.m_123341_() >> 4, pos.m_123343_() >> 4, net.minecraft.world.level.chunk.ChunkStatus.f_62314_);
+                 if (!lowest.m_6415_().m_62427_(net.minecraft.world.level.chunk.ChunkStatus.f_62326_)
+                         && (lowest.m_183376_() == null || !lowest.m_183376_().m_188466_().m_62427_(net.minecraft.world.level.chunk.ChunkStatus.f_62325_))) {
+                    // why would we generate the chunk?
+                    return false;
+                 }
+                 if (!p_192988_.m_61937_(pos)) {
+                    return false;
+                 }
+                 return lowest.m_8055_(pos).m_61138_(BlockStateProperties.f_61364_);
+              },
+              p_192986_, f_164735_, Double.MAX_VALUE, PoiManager.Occupancy.ANY, true, records
+      );
+
+      // this gets us most of the way there, but we bias towards lower y values.
+      PoiRecord lowestYRecord = null;
+      for (PoiRecord record : records) {
+         if (lowestYRecord == null) {
+            lowestYRecord = record;
+         } else if (lowestYRecord.m_27257_().m_123342_() > record.m_27257_().m_123342_()) {
+            lowestYRecord = record;
+         }
+      }
+      // now we're done
+      optional = Optional.ofNullable(lowestYRecord);
+      // Paper end - optimise portals
       return optional.map((p_192975_) -> {
          BlockPos blockpos = p_192975_.m_27257_();
          this.f_77648_.m_7726_().m_8387_(TicketType.f_9447_, new ChunkPos(blockpos), 3, blockpos);
