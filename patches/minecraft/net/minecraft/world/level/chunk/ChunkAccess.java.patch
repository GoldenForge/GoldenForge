--- a/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -40,6 +_,7 @@
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.storage.ChunkSerializer;
 import net.minecraft.world.level.gameevent.GameEventListenerRegistry;
 import net.minecraft.world.level.levelgen.BelowZeroRetrogen;
 import net.minecraft.world.level.levelgen.Heightmap;
@@ -60,7 +_,7 @@
    protected final ShortList[] postProcessing;
    protected volatile boolean unsaved;
    private volatile boolean isLightCorrect;
-   protected final ChunkPos chunkPos;
+   protected final ChunkPos chunkPos; public final long coordinateKey; public final int locX; public final int locZ; // Paper - cache coordinate key
    private long inhabitedTime;
    /** @deprecated */
    @Nullable
@@ -80,8 +_,53 @@
    protected final LevelHeightAccessor levelHeightAccessor;
    protected final LevelChunkSection[] sections;
 
+   // Paper start - rewrite light engine
+   private volatile ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] blockNibbles;
+
+   private volatile ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] skyNibbles;
+
+   private volatile boolean[] skyEmptinessMap;
+
+   private volatile boolean[] blockEmptinessMap;
+
+   public ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] getBlockNibbles() {
+      return this.blockNibbles;
+   }
+
+   public void setBlockNibbles(final ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] nibbles) {
+      this.blockNibbles = nibbles;
+   }
+
+   public ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] getSkyNibbles() {
+      return this.skyNibbles;
+   }
+
+   public void setSkyNibbles(final ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] nibbles) {
+      this.skyNibbles = nibbles;
+   }
+
+   public boolean[] getSkyEmptinessMap() {
+      return this.skyEmptinessMap;
+   }
+
+   public void setSkyEmptinessMap(final boolean[] emptinessMap) {
+      this.skyEmptinessMap = emptinessMap;
+   }
+
+   public boolean[] getBlockEmptinessMap() {
+      return this.blockEmptinessMap;
+   }
+
+   public void setBlockEmptinessMap(final boolean[] emptinessMap) {
+      this.blockEmptinessMap = emptinessMap;
+   }
+   // Paper end - rewrite light engine
+
+   public ChunkSerializer.AsyncSaveData asyncsavedata;
+
    public ChunkAccess(ChunkPos p_187621_, UpgradeData p_187622_, LevelHeightAccessor p_187623_, Registry<Biome> p_187624_, long p_187625_, @Nullable LevelChunkSection[] p_187626_, @Nullable BlendingData p_187627_) {
-      this.chunkPos = p_187621_;
+      this.locX = p_187621_.x; this.locZ = p_187621_.z; // Paper - reduce need for field lookups
+      this.chunkPos = p_187621_; this.coordinateKey = ChunkPos.asLong(locX, locZ); // Paper - cache long key
       this.upgradeData = p_187622_;
       this.levelHeightAccessor = p_187623_;
       this.sections = new LevelChunkSection[p_187623_.getSectionsCount()];
@@ -299,25 +_,30 @@
    public abstract CompoundTag getBlockEntityNbtForSaving(BlockPos p_62104_);
 
    public final void findBlockLightSources(BiConsumer<BlockPos, BlockState> p_285269_) {
-      this.findBlocks((p_284897_) -> {
-         return p_284897_.getLightEmission() != 0;
+      this.findBlocks((p_284897_, pos) -> {
+         return p_284897_.getLightEmission(this, pos) != 0;
       }, p_285269_);
    }
 
    public void findBlocks(Predicate<BlockState> p_285343_, BiConsumer<BlockPos, BlockState> p_285030_) {
+      findBlocks((state, pos) -> p_285343_.test(state), p_285030_);
+   }
+
+   public void findBlocks(java.util.function.BiPredicate<BlockState, BlockPos> p_285343_, BiConsumer<BlockPos, BlockState> p_285030_) {
       BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
       for(int i = this.getMinSection(); i < this.getMaxSection(); ++i) {
          LevelChunkSection levelchunksection = this.getSection(this.getSectionIndexFromSectionY(i));
-         if (levelchunksection.maybeHas(p_285343_)) {
+         if (levelchunksection.maybeHas((state) -> p_285343_.test(state, BlockPos.ZERO))) {
             BlockPos blockpos = SectionPos.of(this.chunkPos, i).origin();
 
             for(int j = 0; j < 16; ++j) {
                for(int k = 0; k < 16; ++k) {
                   for(int l = 0; l < 16; ++l) {
                      BlockState blockstate = levelchunksection.getBlockState(l, j, k);
-                     if (p_285343_.test(blockstate)) {
-                        p_285030_.accept(blockpos$mutableblockpos.setWithOffset(blockpos, l, j, k), blockstate);
+                     blockpos$mutableblockpos.setWithOffset(blockpos, l, j, k);
+                     if (p_285343_.test(blockstate, blockpos$mutableblockpos.immutable())) {
+                        p_285030_.accept(blockpos$mutableblockpos, blockstate);
                      }
                   }
                }
@@ -463,4 +_,7 @@
 
    public static record TicksToSave(SerializableTickContainer<Block> blocks, SerializableTickContainer<Fluid> fluids) {
    }
+
+   @Nullable
+   public net.minecraft.world.level.LevelAccessor getWorldForge() { return null; }
 }
