--- a/net/minecraft/world/level/chunk/storage/ChunkStorage.java
+++ b/net/minecraft/world/level/chunk/storage/ChunkStorage.java
@@ -12,97 +_,198 @@
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.resources.ResourceKey;
+import net.minecraft.server.level.ServerChunkCache;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.chunk.ChunkGenerator;
+// CraftBukkit start
+import java.util.concurrent.ExecutionException;
+import net.minecraft.world.level.chunk.ChunkStatus;
+import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.levelgen.structure.LegacyStructureDataHandler;
 import net.minecraft.world.level.storage.DimensionDataStorage;
 
 public class ChunkStorage implements AutoCloseable {
+
    public static final int f_196910_ = 1493;
-   private final IOWorker f_63495_;
+   // Paper - nuke IO worker
    protected final DataFixer f_63496_;
    @Nullable
    private volatile LegacyStructureDataHandler f_63497_;
+   // Paper start - async chunk loading
+   private final Object persistentDataLock = new Object(); // Paper
+   public final RegionFileStorage regionFileCache;
+   // Paper end - async chunk loading
 
    public ChunkStorage(Path p_196912_, DataFixer p_196913_, boolean p_196914_) {
       this.f_63496_ = p_196913_;
-      this.f_63495_ = new IOWorker(p_196912_, p_196914_, "chunk");
+      // Paper start - async chunk io
+      // remove IO worker
+      this.regionFileCache = new RegionFileStorage(p_196912_, p_196914_, true); // Paper - nuke IOWorker // Paper
+      // Paper end - async chunk io
    }
 
    public boolean m_223451_(ChunkPos p_223452_, int p_223453_) {
-      return this.f_63495_.m_223471_(p_223452_, p_223453_);
+      return true; // Paper - (for now, old unoptimised behavior) TODO implement later? the chunk status that blender uses SHOULD already have this radius loaded, no need to go back for it...
+   }
+
+   // CraftBukkit start
+   private boolean check(ServerChunkCache cps, int x, int z) {
+      if (true) return true; // Paper - this isn't even needed anymore, light is purged updating to 1.14+, why are we holding up the conversion process reading chunk data off disk - return true, we need to set light populated to true so the converter recognizes the chunk as being "full"
+      ChunkPos pos = new ChunkPos(x, z);
+      if (cps != null) {
+         //com.google.common.base.Preconditions.checkState(org.bukkit.Bukkit.isPrimaryThread(), "primary thread"); // Paper - this function is now MT-Safe
+         if (cps.getChunkAtIfCachedImmediately(x, z) != null) { // Paper - isLoaded is a ticket level check, not a chunk loaded check!
+            return true;
+         }
+      }
+
+      CompoundTag nbt;
+      try {
+         nbt = this.m_223454_(pos).get().orElse(null);
+      } catch (InterruptedException | ExecutionException ex) {
+         throw new RuntimeException(ex);
+      }
+      if (nbt != null) {
+         CompoundTag level = nbt.m_128469_("Level");
+         if (level.m_128471_("TerrainPopulated")) {
+            return true;
+         }
+
+         ChunkStatus status = ChunkStatus.m_62397_(level.m_128461_("Status"));
+         if (status != null && status.m_62427_(ChunkStatus.f_62322_)) {
+            return true;
+         }
+      }
+
+      return false;
    }
 
    public CompoundTag m_188288_(ResourceKey<Level> p_188289_, Supplier<DimensionDataStorage> p_188290_, CompoundTag p_188291_, Optional<ResourceKey<Codec<? extends ChunkGenerator>>> p_188292_) {
-      int i = m_63505_(p_188291_);
+      // CraftBukkit end
+      p_188291_ = p_188291_.m_6426_(); // Paper - defensive copy, another thread might modify this
+      int i = ChunkStorage.m_63505_(p_188291_);
+
       if (i < 1493) {
-         p_188291_ = NbtUtils.m_129218_(this.f_63496_, DataFixTypes.CHUNK, p_188291_, i, 1493);
+         ca.spottedleaf.dataconverter.minecraft.MCDataConverter.convertTag(ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry.CHUNK, p_188291_, i, 1493); // Paper - replace chunk converter
          if (p_188291_.m_128469_("Level").m_128471_("hasLegacyStructureData")) {
-            LegacyStructureDataHandler legacystructuredatahandler = this.m_223448_(p_188289_, p_188290_);
-            p_188291_ = legacystructuredatahandler.m_71326_(p_188291_);
+            synchronized (this.persistentDataLock) { // Paper - Async chunk loading
+               LegacyStructureDataHandler persistentstructurelegacy = this.m_223448_(p_188289_, p_188290_);
+
+               p_188291_ = persistentstructurelegacy.m_71326_(p_188291_);
+            } // Paper - Async chunk loading
          }
       }
 
-      m_196918_(p_188291_, p_188289_, p_188292_);
-      p_188291_ = NbtUtils.m_129213_(this.f_63496_, DataFixTypes.CHUNK, p_188291_, Math.max(1493, i));
+      // Spigot start - SPIGOT-6806: Quick and dirty way to prevent below zero generation in old chunks, by setting the status to heightmap instead of empty
+      boolean stopBelowZero = false;
+      boolean belowZeroGenerationInExistingChunks = true;
+
+      if (i <= 2730 && !belowZeroGenerationInExistingChunks) {
+         stopBelowZero = ChunkStatus.f_62326_.m_62467_().equals(p_188291_.m_128469_("Level").m_128461_("Status"));
+      }
+      // Spigot end
+
+      ChunkStorage.m_196918_(p_188291_, p_188289_, p_188292_);
+      p_188291_ = ca.spottedleaf.dataconverter.minecraft.MCDataConverter.convertTag(ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry.CHUNK, p_188291_, Math.max(1493, i), SharedConstants.m_183709_().getWorldVersion()); // Paper - replace chunk converter
       if (i < SharedConstants.m_183709_().getWorldVersion()) {
          p_188291_.m_128405_("DataVersion", SharedConstants.m_183709_().getWorldVersion());
       }
 
+      // Spigot start
+      if (stopBelowZero) {
+         p_188291_.m_128359_("Status", ChunkStatus.f_62325_.m_62467_());
+      }
+      // Spigot end
+
       p_188291_.m_128473_("__context");
       return p_188291_;
    }
 
-   private LegacyStructureDataHandler m_223448_(ResourceKey<Level> p_223449_, Supplier<DimensionDataStorage> p_223450_) {
-      LegacyStructureDataHandler legacystructuredatahandler = this.f_63497_;
-      if (legacystructuredatahandler == null) {
-         synchronized(this) {
-            legacystructuredatahandler = this.f_63497_;
-            if (legacystructuredatahandler == null) {
-               this.f_63497_ = legacystructuredatahandler = LegacyStructureDataHandler.m_71331_(p_223449_, p_223450_.get());
+   private LegacyStructureDataHandler m_223448_(ResourceKey<Level>p_223449_, Supplier<DimensionDataStorage> p_223450_) { // CraftBukkit
+      LegacyStructureDataHandler persistentstructurelegacy = this.f_63497_;
+
+      if (persistentstructurelegacy == null) {
+         synchronized (this.persistentDataLock) { // Paper - async chunk loading
+            persistentstructurelegacy = this.f_63497_;
+            if (persistentstructurelegacy == null) {
+               this.f_63497_ = persistentstructurelegacy = LegacyStructureDataHandler.m_71331_(p_223449_, (DimensionDataStorage) p_223450_.get());
             }
          }
       }
 
-      return legacystructuredatahandler;
+      return persistentstructurelegacy;
    }
 
-   public static void m_196918_(CompoundTag p_196919_, ResourceKey<Level> p_196920_, Optional<ResourceKey<Codec<? extends ChunkGenerator>>> p_196921_) {
-      CompoundTag compoundtag = new CompoundTag();
-      compoundtag.m_128359_("dimension", p_196920_.m_135782_().toString());
-      p_196921_.ifPresent((p_196917_) -> {
-         compoundtag.m_128359_("generator", p_196917_.m_135782_().toString());
+   public static void m_196918_(CompoundTag p_196919_, ResourceKey<Level> p_196920_, Optional<ResourceKey<Codec<? extends ChunkGenerator>>> p_196921_) { // CraftBukkit
+      CompoundTag nbttagcompound1 = new CompoundTag();
+
+      nbttagcompound1.m_128359_("dimension", p_196920_.m_135782_().toString());
+      p_196921_.ifPresent((resourcekey1) -> {
+         nbttagcompound1.m_128359_("generator", resourcekey1.m_135782_().toString());
       });
-      p_196919_.m_128365_("__context", compoundtag);
+      p_196919_.m_128365_("__context", nbttagcompound1);
    }
 
    public static int m_63505_(CompoundTag p_63506_) {
       return p_63506_.m_128425_("DataVersion", 99) ? p_63506_.m_128451_("DataVersion") : -1;
    }
 
+
    public CompletableFuture<Optional<CompoundTag>> m_223454_(ChunkPos p_223455_) {
-      return this.f_63495_.m_156587_(p_223455_);
-   }
+      // Paper start - async chunk io
+      try {
+         return CompletableFuture.completedFuture(Optional.ofNullable(this.readSync(p_223455_)));
+      } catch (Throwable thr) {
+         return CompletableFuture.failedFuture(thr);
+      }
+   }
+   @Nullable
+   public CompoundTag readSync(ChunkPos chunkPos) throws IOException {
+      return this.regionFileCache.m_63706_(chunkPos);
+   }
+   // Paper end - async chunk io
 
-   public void m_63502_(ChunkPos p_63503_, CompoundTag p_63504_) {
-      this.f_63495_.m_63538_(p_63503_, p_63504_);
+   // Paper start - async chunk io
+   public void m_63502_(ChunkPos p_63503_, CompoundTag p_63504_) throws IOException {
+      // Paper start
+      if (!p_63503_.equals(ChunkSerializer.getChunkCoordinate(p_63504_))) {
+         String world = (this instanceof net.minecraft.server.level.ChunkMap) ? ((net.minecraft.server.level.ChunkMap)this).f_140133_.m_46472_().toString() : null;
+         throw new IllegalArgumentException("Chunk coordinate and serialized data do not have matching coordinates, trying to serialize coordinate " + p_63503_.toString()
+                 + " but compound says coordinate is " + ChunkSerializer.getChunkCoordinate(p_63504_).toString() + (world == null ? " for an unknown world" : (" for world: " + world)));
+      }
+      // Paper end
+      this.regionFileCache.m_63708_(p_63503_, p_63504_);
+      // Paper end - Async chunk loading
       if (this.f_63497_ != null) {
-         this.f_63497_.m_71318_(p_63503_.m_45588_());
+         synchronized (this.persistentDataLock) { // Paper - Async chunk loading
+            this.f_63497_.m_71318_(p_63503_.m_45588_());
+         } // Paper - Async chunk loading
       }
 
    }
 
    public void m_63514_() {
-      this.f_63495_.m_182498_(true).join();
+      io.papermc.paper.chunk.system.io.RegionFileIOThread.flush(); // Paper - rewrite chunk system
    }
 
    public void close() throws IOException {
-      this.f_63495_.close();
+      this.regionFileCache.close(); // Paper - nuke IO worker
    }
 
    public ChunkScanAccess m_196922_() {
-      return this.f_63495_;
+      // Paper start - nuke IO worker
+      return ((chunkPos, streamTagVisitor) -> {
+         try {
+            this.regionFileCache.m_196956_(chunkPos, streamTagVisitor);
+            return java.util.concurrent.CompletableFuture.completedFuture(null);
+         } catch (IOException e) {
+            throw new RuntimeException(e);
+         }
+      });
+      // Paper end
    }
 }
