--- a/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
+++ b/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
@@ -1,106 +_,362 @@
 package net.minecraft.world.level.chunk.storage;
 
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
+import java.io.DataInput;
 import java.io.DataInputStream;
+import java.io.DataOutput;
 import java.io.DataOutputStream;
 import java.io.IOException;
-import java.nio.file.Files;
 import java.nio.file.Path;
 import javax.annotation.Nullable;
+import net.minecraft.FileUtil;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtIo;
 import net.minecraft.nbt.StreamTagVisitor;
+import net.minecraft.nbt.Tag;
 import net.minecraft.util.ExceptionCollector;
 import net.minecraft.world.level.ChunkPos;
 
-public final class RegionFileStorage implements AutoCloseable {
+public class RegionFileStorage implements AutoCloseable {
+   private static final org.slf4j.Logger LOGGER = com.mojang.logging.LogUtils.getLogger(); // Kaiiju
    public static final String f_156615_ = ".mca";
    private static final int f_156616_ = 256;
-   private final Long2ObjectLinkedOpenHashMap<RegionFile> f_63699_ = new Long2ObjectLinkedOpenHashMap<>();
+   public final Long2ObjectLinkedOpenHashMap<dev.kaiijumc.kaiiju.region.AbstractRegionFile> f_63699_ = new Long2ObjectLinkedOpenHashMap(); // Kaiiju
    private final Path f_63700_;
    private final boolean f_63701_;
-
-   RegionFileStorage(Path p_196954_, boolean p_196955_) {
-      this.f_63700_ = p_196954_;
-      this.f_63701_ = p_196955_;
-   }
-
-   private RegionFile m_63711_(ChunkPos p_63712_) throws IOException {
-      long i = ChunkPos.m_45589_(p_63712_.m_45610_(), p_63712_.m_45612_());
-      RegionFile regionfile = this.f_63699_.getAndMoveToFirst(i);
+   // Kaiiju start - Per world chunk format
+   public final dev.kaiijumc.kaiiju.region.RegionFileFormat format;
+   public final int linearCompression;
+   public final boolean linearCrashOnBrokenSymlink;
+   // Kaiiju end
+   private final boolean isChunkData; // Paper
+
+   // Paper start - cache regionfile does not exist state
+   static final int MAX_NON_EXISTING_CACHE = 1024 * 64;
+   private final it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet nonExistingRegionFiles = new it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet();
+   private synchronized boolean doesRegionFilePossiblyExist(long position) {
+      if (this.nonExistingRegionFiles.contains(position)) {
+         this.nonExistingRegionFiles.addAndMoveToFirst(position);
+         return false;
+      }
+      return true;
+   }
+
+   private synchronized void createRegionFile(long position) {
+      this.nonExistingRegionFiles.remove(position);
+   }
+
+   private synchronized void markNonExisting(long position) {
+      if (this.nonExistingRegionFiles.addAndMoveToFirst(position)) {
+         while (this.nonExistingRegionFiles.size() >= MAX_NON_EXISTING_CACHE) {
+            this.nonExistingRegionFiles.removeLastLong();
+         }
+      }
+   }
+
+   public synchronized boolean doesRegionFileNotExistNoIO(ChunkPos pos) {
+      long key = ChunkPos.m_45589_(pos.m_45610_(), pos.m_45612_());
+      return !this.doesRegionFilePossiblyExist(key);
+   }
+   // Paper end - cache regionfile does not exist state
+
+   protected RegionFileStorage(dev.kaiijumc.kaiiju.region.RegionFileFormat format, int linearCompression, boolean linearCrashOnBrokenSymlink, Path p_196954_, boolean p_196955_) { // Paper - protected constructor
+      // Paper start - add isChunkData param
+      this(format, linearCompression, linearCrashOnBrokenSymlink, p_196954_, p_196955_, false);
+   }
+   RegionFileStorage(dev.kaiijumc.kaiiju.region.RegionFileFormat format, int linearCompression, boolean linearCrashOnBrokenSymlink, Path directory, boolean dsync, boolean isChunkData) { // Kaiiju
+      // Kaiiju start
+      this.format = format;
+      this.linearCompression = linearCompression;
+      this.linearCrashOnBrokenSymlink = linearCrashOnBrokenSymlink;
+      // Kaiiju end
+      this.isChunkData = isChunkData;
+      // Paper end - add isChunkData param
+      this.f_63700_ = directory;
+      this.f_63701_ = dsync;
+   }
+
+   // Paper start
+   public static @Nullable ChunkPos getRegionFileCoordinates(Path file) {
+      String fileName = file.getFileName().toString();
+      if (!fileName.startsWith("r.") || !fileName.endsWith(".mca") || !fileName.endsWith(".linear")) { // Kaiiju
+         return null;
+      }
+
+      String[] split = fileName.split("\\.");
+
+      if (split.length != 4) {
+         return null;
+      }
+
+      try {
+         int x = Integer.parseInt(split[1]);
+         int z = Integer.parseInt(split[2]);
+
+         return new ChunkPos(x << 5, z << 5);
+      } catch (NumberFormatException ex) {
+         return null;
+      }
+   }
+
+   public synchronized dev.kaiijumc.kaiiju.region.AbstractRegionFile getRegionFileIfLoaded(ChunkPos chunkcoordintpair) {
+      return this.f_63699_.getAndMoveToFirst(ChunkPos.m_45589_(chunkcoordintpair.m_45610_(), chunkcoordintpair.m_45612_()));
+   }
+
+   public synchronized boolean chunkExists(ChunkPos pos) throws IOException {
+      dev.kaiijumc.kaiiju.region.AbstractRegionFile regionfile = getRegionFile(pos, true); // Kaiiju
+
+      return regionfile != null ? regionfile.hasChunk(pos) : false;
+   }
+   // Kaiiju start
+   private void guardAgainstBrokenSymlinks(Path path) throws IOException {
+      if (!linearCrashOnBrokenSymlink) return;
+      if (!this.format.equals("LINEAR")) return;
+      if (!java.nio.file.Files.isSymbolicLink(path)) return;
+      Path link = java.nio.file.Files.readSymbolicLink(path);
+      if (!java.nio.file.Files.exists(link) || !java.nio.file.Files.isReadable(link)) {
+         LOGGER.error("Linear region file {} is a broken symbolic link, crashing to prevent data loss", path);
+         net.minecraft.server.MinecraftServer.getServer().m_7570_(false);
+         throw new IOException("Linear region file " + path + " is a broken symbolic link, crashing to prevent data loss");
+      }
+   }
+   // Kaiiju end
+
+   public synchronized dev.kaiijumc.kaiiju.region.AbstractRegionFile getRegionFile(ChunkPos chunkcoordintpair, boolean existingOnly) throws IOException { // CraftBukkit
+      return this.getRegionFile(chunkcoordintpair, existingOnly, false);
+   }
+   public synchronized dev.kaiijumc.kaiiju.region.AbstractRegionFile getRegionFile(ChunkPos chunkcoordintpair, boolean existingOnly, boolean lock) throws IOException {
+      // Paper end
+      long i = ChunkPos.m_45589_(chunkcoordintpair.m_45610_(), chunkcoordintpair.m_45612_()); final long regionPos = i; // Paper - OBFHELPER
+      dev.kaiijumc.kaiiju.region.AbstractRegionFile regionfile = this.f_63699_.getAndMoveToFirst(i); // Kaiiju
+
       if (regionfile != null) {
+         // Paper start
+         if (lock) {
+            // must be in this synchronized block
+            regionfile.getFileLock().lock(); // Kaiiju
+         }
+         // Paper end
          return regionfile;
       } else {
-         if (this.f_63699_.size() >= 256) {
-            this.f_63699_.removeLast().close();
-         }
-
-         Files.createDirectories(this.f_63700_);
-         Path path = this.f_63700_.resolve("r." + p_63712_.m_45610_() + "." + p_63712_.m_45612_() + ".mca");
-         RegionFile regionfile1 = new RegionFile(path, this.f_63700_, this.f_63701_);
+         // Paper start - cache regionfile does not exist state
+         if (existingOnly && !this.doesRegionFilePossiblyExist(regionPos)) {
+            return null;
+         }
+         // Paper end - cache regionfile does not exist state
+         if (this.f_63699_.size() >= 256) { // Paper - configurable
+            this.f_63699_.removeLast().close(); // Kaiiju
+         }
+
+         // Paper - only create directory if not existing only - moved down
+         Path path = this.f_63700_;
+         int j = chunkcoordintpair.m_45610_();
+         // Kaiiju start - Polyglot
+         //Path path1 = path.resolve("r." + j + "." + chunkcoordintpair.getRegionZ() + ".mca"); // Paper - diff on change
+         Path path1;
+         if (existingOnly) {
+            Path anvil = path.resolve("r." + j + "." + chunkcoordintpair.m_45612_() + ".mca");
+            Path linear = path.resolve("r." + j + "." + chunkcoordintpair.m_45612_() + ".linear");
+            guardAgainstBrokenSymlinks(linear);
+            if (java.nio.file.Files.exists(anvil)) path1 = anvil;
+            else if (java.nio.file.Files.exists(linear)) path1 = linear;
+            else {
+               this.markNonExisting(regionPos);
+               return null;
+            }
+            // Kaiiju end
+         } else {
+            // Kaiiju start - Polyglot
+            String extension = switch (this.format) {
+               case LINEAR -> "linear";
+               default -> "mca";
+            };
+            path1 = path.resolve("r." + j + "." + chunkcoordintpair.m_45612_() + "." + extension);
+            // Kaiiju end
+            guardAgainstBrokenSymlinks(path1); // Kaiiju - Crash on broken symlink
+            this.createRegionFile(regionPos);
+         }
+         // Paper end - cache regionfile does not exist state
+         FileUtil.createDirectoriesSafe(this.f_63700_); // Paper - only create directory if not existing only - moved from above
+         dev.kaiijumc.kaiiju.region.AbstractRegionFile regionfile1 = dev.kaiijumc.kaiiju.region.AbstractRegionFileFactory.getAbstractRegionFile(this.linearCompression, path1, this.f_63700_, this.f_63701_, this.isChunkData); // Paper - allow for chunk regionfiles to regen header // Kaiiju
+
          this.f_63699_.putAndMoveToFirst(i, regionfile1);
+         // Paper start
+         if (lock) {
+            // must be in this synchronized block
+            regionfile1.getFileLock().lock(); // Kaiiju
+         }
+         // Paper end
          return regionfile1;
       }
    }
 
+   // Paper start
+   private static void printOversizedLog(String msg, Path file, int x, int z) {
+      org.apache.logging.log4j.LogManager.getLogger().fatal(msg + " (" + file.toString().replaceAll(".+[\\\\/]", "") + " - " + x + "," + z + ") Go clean it up to remove this message. /minecraft:tp " + (x<<4)+" 128 "+(z<<4) + " - DO NOT REPORT THIS TO PAPER - You may ask for help on Discord, but do not file an issue. These error messages can not be removed.");
+   }
+
+   private static final int DEFAULT_SIZE_THRESHOLD = 1024 * 8;
+   private static final int OVERZEALOUS_TOTAL_THRESHOLD = 1024 * 64;
+   private static final int OVERZEALOUS_THRESHOLD = 1024;
+   private static int SIZE_THRESHOLD = DEFAULT_SIZE_THRESHOLD;
+   private static void resetFilterThresholds() {
+      SIZE_THRESHOLD = Math.max(1024 * 4, Integer.getInteger("Paper.FilterThreshhold", DEFAULT_SIZE_THRESHOLD));
+   }
+   static {
+      resetFilterThresholds();
+   }
+
+   static boolean isOverzealous() {
+      return SIZE_THRESHOLD == OVERZEALOUS_THRESHOLD;
+   }
+
+
+   private static CompoundTag readOversizedChunk(dev.kaiijumc.kaiiju.region.AbstractRegionFile regionfile, ChunkPos chunkCoordinate) throws IOException { // Kaiiju
+      synchronized (regionfile) {
+         try (DataInputStream datainputstream = regionfile.getChunkDataInputStream(chunkCoordinate)) {
+            CompoundTag oversizedData = regionfile.getOversizedData(chunkCoordinate.f_45578_, chunkCoordinate.f_45579_);
+            CompoundTag chunk = NbtIo.m_128928_((DataInput) datainputstream);
+            if (oversizedData == null) {
+               return chunk;
+            }
+            CompoundTag oversizedLevel = oversizedData.m_128469_("Level");
+
+            mergeChunkList(chunk.m_128469_("Level"), oversizedLevel, "Entities", "Entities");
+            mergeChunkList(chunk.m_128469_("Level"), oversizedLevel, "TileEntities", "TileEntities");
+
+            return chunk;
+         } catch (Throwable throwable) {
+            throwable.printStackTrace();
+            throw throwable;
+         }
+      }
+   }
+
+   private static void mergeChunkList(CompoundTag level, CompoundTag oversizedLevel, String key, String oversizedKey) {
+      ListTag levelList = level.m_128437_(key, 10);
+      ListTag oversizedList = oversizedLevel.m_128437_(oversizedKey, 10);
+
+      if (!oversizedList.isEmpty()) {
+         levelList.addAll(oversizedList);
+         level.m_128365_(key, levelList);
+      }
+   }
+
+   private static int getNBTSize(Tag nbtBase) {
+      DataOutputStream test = new DataOutputStream(new org.apache.commons.io.output.NullOutputStream());
+      try {
+         nbtBase.m_6434_(test);
+         return test.size();
+      } catch (IOException e) {
+         e.printStackTrace();
+         return 0;
+      }
+   }
+
+   // Paper End
+
    @Nullable
    public CompoundTag m_63706_(ChunkPos p_63707_) throws IOException {
-      RegionFile regionfile = this.m_63711_(p_63707_);
-      DataInputStream datainputstream = regionfile.m_63645_(p_63707_);
-
-      CompoundTag compoundtag;
-      label43: {
-         try {
-            if (datainputstream == null) {
-               compoundtag = null;
-               break label43;
+      // CraftBukkit start - SPIGOT-5680: There's no good reason to preemptively create files on read, save that for writing
+      dev.kaiijumc.kaiiju.region.AbstractRegionFile regionfile = this.getRegionFile(p_63707_, true, true); // Paper // Kaiiju
+      if (regionfile == null) {
+         return null;
+      }
+      // Paper start - Add regionfile parameter
+      return this.read(p_63707_, regionfile);
+   }
+   public CompoundTag read(ChunkPos pos, dev.kaiijumc.kaiiju.region.AbstractRegionFile regionfile) throws IOException {
+      // We add the regionfile parameter to avoid the potential deadlock (on fileLock) if we went back to obtain a regionfile
+      // if we decide to re-read
+      // Paper end
+      // CraftBukkit end
+      try { // Paper
+         DataInputStream datainputstream = regionfile.getChunkDataInputStream(pos);
+
+         // Paper start
+         if (regionfile.isOversized(pos.f_45578_, pos.f_45579_)) {
+            printOversizedLog("Loading Oversized Chunk!", regionfile.getRegionFile(), pos.f_45578_, pos.f_45579_); // Kaiiju
+            return readOversizedChunk(regionfile, pos);
+         }
+         // Paper end
+         CompoundTag nbttagcompound;
+         label43:
+         {
+            try {
+               if (datainputstream != null) {
+                  nbttagcompound = NbtIo.m_128928_((DataInput) datainputstream);
+                  // Paper start - recover from corrupt regionfile header
+                  if (this.isChunkData) {
+                     ChunkPos chunkPos = ChunkSerializer.getChunkCoordinate(nbttagcompound);
+                     if (!chunkPos.equals(pos)) {
+                        net.minecraft.server.MinecraftServer.f_129750_.error("Attempting to read chunk data at " + pos + " but got chunk data for " + chunkPos + " instead! Attempting regionfile recalculation for regionfile " + regionfile.getRegionFile().toAbsolutePath()); // Kaiiju
+                        if (regionfile.recalculateHeader()) {
+                           regionfile.getFileLock().lock(); // otherwise we will unlock twice and only lock once. // Kaiiju
+                           return this.read(pos, regionfile);
+                        }
+                        net.minecraft.server.MinecraftServer.f_129750_.error("Can't recalculate regionfile header, regenerating chunk " + pos + " for " + regionfile.getRegionFile().toAbsolutePath()); // Kaiiju
+                        return null;
+                     }
+                  }
+                  // Paper end - recover from corrupt regionfile header
+                  break label43;
+               }
+
+               nbttagcompound = null;
+            } catch (Throwable throwable) {
+               if (datainputstream != null) {
+                  try {
+                     datainputstream.close();
+                  } catch (Throwable throwable1) {
+                     throwable.addSuppressed(throwable1);
+                  }
+               }
+
+               throw throwable;
             }
 
-            compoundtag = NbtIo.m_128928_(datainputstream);
-         } catch (Throwable throwable1) {
             if (datainputstream != null) {
-               try {
-                  datainputstream.close();
-               } catch (Throwable throwable) {
-                  throwable1.addSuppressed(throwable);
-               }
+               datainputstream.close();
             }
 
-            throw throwable1;
+            return nbttagcompound;
          }
 
          if (datainputstream != null) {
             datainputstream.close();
          }
 
-         return compoundtag;
-      }
-
-      if (datainputstream != null) {
-         datainputstream.close();
-      }
-
-      return compoundtag;
+         return nbttagcompound;
+      } finally { // Paper start
+         regionfile.getFileLock().unlock(); // Kaiiju
+      } // Paper end
    }
 
    public void m_196956_(ChunkPos p_196957_, StreamTagVisitor p_196958_) throws IOException {
-      RegionFile regionfile = this.m_63711_(p_196957_);
-      DataInputStream datainputstream = regionfile.m_63645_(p_196957_);
+      // CraftBukkit start - SPIGOT-5680: There's no good reason to preemptively create files on read, save that for writing
+      dev.kaiijumc.kaiiju.region.AbstractRegionFile regionfile = this.getRegionFile(p_196957_, true); // Kaiiju
+      if (regionfile == null) {
+         return;
+      }
+      // CraftBukkit end
+      DataInputStream datainputstream = regionfile.getChunkDataInputStream(p_196957_);
 
       try {
          if (datainputstream != null) {
             NbtIo.m_197509_(datainputstream, p_196958_);
          }
-      } catch (Throwable throwable1) {
+      } catch (Throwable throwable) {
          if (datainputstream != null) {
             try {
                datainputstream.close();
-            } catch (Throwable throwable) {
-               throwable1.addSuppressed(throwable);
+            } catch (Throwable throwable1) {
+               throwable.addSuppressed(throwable1);
             }
          }
 
-         throw throwable1;
+         throw throwable;
       }
 
       if (datainputstream != null) {
@@ -110,51 +_,94 @@
    }
 
    protected void m_63708_(ChunkPos p_63709_, @Nullable CompoundTag p_63710_) throws IOException {
-      RegionFile regionfile = this.m_63711_(p_63709_);
-      if (p_63710_ == null) {
-         regionfile.m_156613_(p_63709_);
-      } else {
-         DataOutputStream dataoutputstream = regionfile.m_63678_(p_63709_);
-
-         try {
-            NbtIo.m_128941_(p_63710_, dataoutputstream);
-         } catch (Throwable throwable1) {
-            if (dataoutputstream != null) {
+      dev.kaiijumc.kaiiju.region.AbstractRegionFile regionfile = this.getRegionFile(p_63709_, p_63710_ == null, true); // CraftBukkit // Paper // Paper start - rewrite chunk system // Kaiiju
+      if (p_63710_ == null && regionfile == null) {
+         return;
+      }
+      // Paper end - rewrite chunk system
+      try { // Paper
+         int attempts = 0; Exception laste = null; while (attempts++ < 5) { try { // Paper
+
+            if (p_63710_ == null) {
+               regionfile.clear(p_63709_);
+            } else {
+               DataOutputStream dataoutputstream = regionfile.getChunkDataOutputStream(p_63709_);
+
                try {
-                  dataoutputstream.close();
+                  NbtIo.m_128941_(p_63710_, (DataOutput) dataoutputstream);
+                  regionfile.setStatus(p_63709_.f_45578_, p_63709_.f_45579_, ChunkSerializer.getStatus(p_63710_)); // Paper - cache status on disk
+                  regionfile.setOversized(p_63709_.f_45578_, p_63709_.f_45579_, false); // Paper - We don't do this anymore, mojang stores differently, but clear old meta flag if it exists to get rid of our own meta file once last oversized is gone
+                  dataoutputstream.close(); // Paper - only write if successful
+                  // Paper start - don't write garbage data to disk if writing serialization fails
+               } catch (RegionFileSizeException e) {
+                  attempts = 5; // Don't retry
+                  regionfile.clear(p_63709_);
+                  throw e;
+                  // Paper end - don't write garbage data to disk if writing serialization fails
                } catch (Throwable throwable) {
-                  throwable1.addSuppressed(throwable);
+                  if (dataoutputstream != null) {
+                     try {
+                        //dataoutputstream.close(); // Paper - don't write garbage data to disk if writing serialization fails
+                     } catch (Throwable throwable1) {
+                        throwable.addSuppressed(throwable1);
+                     }
+                  }
+
+                  throw throwable;
                }
+               // Paper - move into try block to only write if successfully serialized
             }
-
-            throw throwable1;
-         }
-
-         if (dataoutputstream != null) {
-            dataoutputstream.close();
-         }
-      }
-
+            // Paper start
+            return;
+         } catch (Exception ex)  {
+            laste = ex;
+         }
+         }
+
+         if (laste != null) {
+            //com.destroystokyo.paper.exception.ServerInternalException.reportInternalException(laste);
+            net.minecraft.server.MinecraftServer.f_129750_.error("Failed to save chunk " + p_63709_, laste);
+         }
+         // Paper end
+      } finally { // Paper start
+         regionfile.getFileLock().unlock(); // Kaiiju
+      } // Paper end
    }
 
-   public void close() throws IOException {
-      ExceptionCollector<IOException> exceptioncollector = new ExceptionCollector<>();
-
-      for(RegionFile regionfile : this.f_63699_.values()) {
+   public synchronized void close() throws IOException { // Paper -> synchronized
+      ExceptionCollector<IOException> exceptionsuppressor = new ExceptionCollector<>();
+      ObjectIterator objectiterator = this.f_63699_.values().iterator();
+
+      while (objectiterator.hasNext()) {
+         dev.kaiijumc.kaiiju.region.AbstractRegionFile regionfile = (dev.kaiijumc.kaiiju.region.AbstractRegionFile) objectiterator.next(); // Kaiiju
+
          try {
             regionfile.close();
          } catch (IOException ioexception) {
-            exceptioncollector.m_13653_(ioexception);
+            exceptionsuppressor.m_13653_(ioexception);
          }
       }
 
-      exceptioncollector.m_13652_();
-   }
-
-   public void m_63705_() throws IOException {
-      for(RegionFile regionfile : this.f_63699_.values()) {
-         regionfile.m_63637_();
-      }
-
-   }
+      exceptionsuppressor.m_13652_();
+   }
+
+   public synchronized void m_63705_() throws IOException { // Paper - synchronize
+      ObjectIterator objectiterator = this.f_63699_.values().iterator();
+
+      while (objectiterator.hasNext()) {
+         dev.kaiijumc.kaiiju.region.AbstractRegionFile regionfile = (dev.kaiijumc.kaiiju.region.AbstractRegionFile) objectiterator.next(); // Kaiiju
+
+         regionfile.flush();
+      }
+
+   }
+
+   // Paper start
+   public static final class RegionFileSizeException extends RuntimeException {
+
+      public RegionFileSizeException(String message) {
+         super(message);
+      }
+   }
+   // Paper end
 }
