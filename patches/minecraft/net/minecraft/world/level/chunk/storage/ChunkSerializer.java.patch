--- a/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -7,10 +_,8 @@
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.shorts.ShortList;
-import java.util.Arrays;
-import java.util.EnumSet;
-import java.util.Map;
-import java.util.Objects;
+
+import java.util.*;
 import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
 import net.minecraft.core.BlockPos;
@@ -18,13 +_,10 @@
 import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.SectionPos;
-import net.minecraft.nbt.CompoundTag;
-import net.minecraft.nbt.ListTag;
-import net.minecraft.nbt.LongArrayTag;
-import net.minecraft.nbt.NbtOps;
-import net.minecraft.nbt.ShortTag;
+import net.minecraft.nbt.*;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ThreadedLevelLightEngine;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.level.ChunkPos;
@@ -74,26 +_,105 @@
    public static final String f_223446_ = "BlockLight";
    public static final String f_223447_ = "SkyLight";
 
+   public static final class InProgressChunkHolder {
+
+      public final ProtoChunk protoChunk;
+      public final java.util.ArrayDeque<Runnable> tasks;
+
+      public CompoundTag poiData;
+
+      public InProgressChunkHolder(final ProtoChunk protoChunk, final java.util.ArrayDeque<Runnable> tasks) {
+         this.protoChunk = protoChunk;
+         this.tasks = tasks;
+      }
+
+   }
+
+   // Paper start - guard against serializing mismatching coordinates
+   // TODO Note: This needs to be re-checked each update
+   public static ChunkPos getChunkCoordinate(CompoundTag chunkData) {
+      final int dataVersion = ChunkStorage.m_63505_(chunkData);
+      if (dataVersion < 2842) { // Level tag is removed after this version
+         final CompoundTag levelData = chunkData.m_128469_("Level");
+         return new ChunkPos(levelData.m_128451_("xPos"), levelData.m_128451_("zPos"));
+      } else {
+         return new ChunkPos(chunkData.m_128451_("xPos"), chunkData.m_128451_("zPos"));
+      }
+   }
+   // Paper end
+
+   // Paper start
+   // TODO: Check on update
+   public static long getLastWorldSaveTime(CompoundTag chunkData) {
+      final int dataVersion = ChunkStorage.m_63505_(chunkData);
+      if (dataVersion < 2842) { // Level tag is removed after this version
+         final CompoundTag levelData = chunkData.m_128469_("Level");
+         return levelData.m_128454_("LastUpdate");
+      } else {
+         return chunkData.m_128454_("LastUpdate");
+      }
+   }
+   // Paper end
+
+//   public static ProtoChunk read(ServerLevel world, PoiManager poiStorage, ChunkPos chunkPos, CompoundTag nbt) {
+//      // Paper start - add variant for async calls
+//      InProgressChunkHolder holder = loadChunk(world, poiStorage, chunkPos, nbt);
+//      holder.tasks.forEach(Runnable::run);
+//      return holder.protoChunk;
+//   }
+
+   // Paper start
+   public static @Nullable ChunkStatus getStatus(@Nullable CompoundTag compound) {
+      if (compound == null) {
+         return null;
+      }
+
+      // Note: Copied from below
+      return ChunkStatus.getStatus(compound.m_128461_("Status"));
+   }
+   // Paper end
+
+
+   // Paper start - replace light engine impl
+   private static final int STARLIGHT_LIGHT_VERSION = 8;
+
+   private static final String BLOCKLIGHT_STATE_TAG = "starlight.blocklight_state";
+   private static final String SKYLIGHT_STATE_TAG = "starlight.skylight_state";
+   private static final String STARLIGHT_VERSION_TAG = "starlight.light_version";
+   // Paper end - replace light engine impl
+
+
+
    public static ProtoChunk m_188230_(ServerLevel p_188231_, PoiManager p_188232_, ChunkPos p_188233_, CompoundTag p_188234_) {
+      java.util.ArrayDeque<Runnable> tasksToExecuteOnMain = new java.util.ArrayDeque<>();
+
       ChunkPos chunkpos = new ChunkPos(p_188234_.m_128451_("xPos"), p_188234_.m_128451_("zPos"));
       if (!Objects.equals(p_188233_, chunkpos)) {
          f_63449_.error("Chunk file at {} is in the wrong location; relocating. (Expected {}, got {})", p_188233_, p_188233_, chunkpos);
       }
 
       UpgradeData upgradedata = p_188234_.m_128425_("UpgradeData", 10) ? new UpgradeData(p_188234_.m_128469_("UpgradeData"), p_188231_) : UpgradeData.f_63320_;
-      boolean flag = p_188234_.m_128471_("isLightOn");
+      //boolean flag = p_188234_.getBoolean("isLightOn");
+      boolean flag = getStatus(p_188234_) != null && getStatus(p_188234_).m_62427_(ChunkStatus.f_62323_) && p_188234_.m_128423_("isLightOn") != null && p_188234_.m_128451_(STARLIGHT_VERSION_TAG) == STARLIGHT_LIGHT_VERSION; // Paper
       ListTag listtag = p_188234_.m_128437_("sections", 10);
       int i = p_188231_.m_151559_();
       LevelChunkSection[] alevelchunksection = new LevelChunkSection[i];
       boolean flag1 = p_188231_.m_6042_().f_223549_();
       ChunkSource chunksource = p_188231_.m_7726_();
       LevelLightEngine levellightengine = chunksource.m_7827_();
+      // Paper start
+      ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] blockNibbles = ca.spottedleaf.starlight.common.light.StarLightEngine.getFilledEmptyLight(p_188231_);
+      ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] skyNibbles = ca.spottedleaf.starlight.common.light.StarLightEngine.getFilledEmptyLight(p_188231_);
+      final int minSection = io.papermc.paper.util.WorldUtil.getMinLightSection(p_188231_);
+      final int maxSection = io.papermc.paper.util.WorldUtil.getMaxLightSection(p_188231_);
+      boolean canReadSky = p_188231_.m_6042_().f_223549_();
+      // Paper end
       Registry<Biome> registry = p_188231_.m_5962_().m_175515_(Registry.f_122885_);
       Codec<PalettedContainerRO<Holder<Biome>>> codec = m_188260_(registry);
       boolean flag2 = false;
 
       for(int j = 0; j < listtag.size(); ++j) {
-         CompoundTag compoundtag = listtag.m_128728_(j);
+         CompoundTag compoundtag = listtag.m_128728_(j); CompoundTag sectionData = compoundtag; // Paper
          int k = compoundtag.m_128445_("Y");
          int l = p_188231_.m_151566_(k);
          if (l >= 0 && l < alevelchunksection.length) {
@@ -117,25 +_,47 @@
 
             LevelChunkSection levelchunksection = new LevelChunkSection(k, palettedcontainer, palettedcontainerro);
             alevelchunksection[l] = levelchunksection;
-            p_188232_.m_27047_(p_188233_, levelchunksection);
+            tasksToExecuteOnMain.add(() -> { // Paper - delay this task since we're executing off-main
+               p_188232_.m_27047_(p_188233_, levelchunksection);
+            }); // Paper - delay this task since we're executing off-main
          }
 
          boolean flag4 = compoundtag.m_128425_("BlockLight", 7);
          boolean flag5 = flag1 && compoundtag.m_128425_("SkyLight", 7);
-         if (flag4 || flag5) {
-            if (!flag2) {
-               levellightengine.m_6462_(p_188233_, true);
-               flag2 = true;
-            }
-
-            if (flag4) {
-               levellightengine.m_5687_(LightLayer.BLOCK, SectionPos.m_123196_(p_188233_, k), new DataLayer(compoundtag.m_128463_("BlockLight")), true);
-            }
-
-            if (flag5) {
-               levellightengine.m_5687_(LightLayer.SKY, SectionPos.m_123196_(p_188233_, k), new DataLayer(compoundtag.m_128463_("SkyLight")), true);
+         // Paper start - rewrite the light engine
+         if (flag) {
+            try {
+               int y = sectionData.m_128445_("Y");
+               // Paper end - rewrite the light engine
+               if (flag4) {
+                  // Paper start - rewrite the light engine
+                  // this is where our diff is
+                  blockNibbles[y - minSection] = new ca.spottedleaf.starlight.common.light.SWMRNibbleArray(sectionData.m_128463_("BlockLight").clone(), sectionData.m_128451_(BLOCKLIGHT_STATE_TAG)); // clone for data safety
+               } else {
+                  blockNibbles[y - minSection] = new ca.spottedleaf.starlight.common.light.SWMRNibbleArray(null, sectionData.m_128451_(BLOCKLIGHT_STATE_TAG));
+                  // Paper end - rewrite the light engine
+               }
+
+               if (flag5) {
+                  // Paper start - rewrite the light engine
+                  // we store under the same key so mod programs editing nbt
+                  // can still read the data, hopefully.
+                  // however, for compatibility we store chunks as unlit so vanilla
+                  // is forced to re-light them if it encounters our data. It's too much of a burden
+                  // to try and maintain compatibility with a broken and inferior skylight management system.
+                  skyNibbles[y - minSection] = new ca.spottedleaf.starlight.common.light.SWMRNibbleArray(sectionData.m_128463_("SkyLight").clone(), sectionData.m_128451_(SKYLIGHT_STATE_TAG)); // clone for data safety
+               } else if (flag1) {
+                  skyNibbles[y - minSection] = new ca.spottedleaf.starlight.common.light.SWMRNibbleArray(null, sectionData.m_128451_(SKYLIGHT_STATE_TAG));
+                  // Paper end - rewrite the light engine
+               }
+
+               // Paper start - rewrite the light engine
+            } catch (Exception ex) {
+               f_63449_.warn("Failed to load light data for chunk " + p_188233_ + " in world '" + p_188231_.m_46472_() + "', light will be regenerated", ex);
+               flag = false;
             }
          }
+            // Paper end - rewrite light engine
       }
 
       long j1 = p_188234_.m_128454_("InhabitedTime");
@@ -156,6 +_,9 @@
             return Registry.f_122822_.m_6612_(ResourceLocation.m_135820_(p_188285_));
          }, p_188233_);
          chunkaccess = new LevelChunk(p_188231_.m_6018_(), p_188233_, upgradedata, levelchunkticks, levelchunkticks1, j1, alevelchunksection, m_196890_(p_188231_, p_188234_), blendingdata);
+         ((LevelChunk)chunkaccess).setBlockNibbles(blockNibbles); // Paper - replace light impl
+         ((LevelChunk)chunkaccess).setSkyNibbles(skyNibbles); // Paper - replace light impl
+         if (p_188234_.m_128441_("ForgeCaps")) ((LevelChunk)chunkaccess).readCapsFromNBT(p_188234_.m_128469_("ForgeCaps"));
       } else {
          ProtoChunkTicks<Block> protochunkticks = ProtoChunkTicks.m_193302_(p_188234_.m_128437_("block_ticks", 10), (p_196906_) -> {
             return Registry.f_122824_.m_6612_(ResourceLocation.m_135820_(p_196906_));
@@ -164,6 +_,8 @@
             return Registry.f_122822_.m_6612_(ResourceLocation.m_135820_(p_188276_));
          }, p_188233_);
          ProtoChunk protochunk = new ProtoChunk(p_188233_, upgradedata, alevelchunksection, protochunkticks, protochunkticks1, p_188231_, registry, blendingdata);
+         protochunk.setBlockNibbles(blockNibbles); // Paper - replace light impl
+         protochunk.setSkyNibbles(skyNibbles); // Paper - replace light impl
          chunkaccess = protochunk;
          protochunk.m_6141_(j1);
          if (p_188234_.m_128425_("below_zero_retrogen", 10)) {
@@ -180,7 +_,7 @@
          boolean flag3 = chunkstatus.m_62427_(ChunkStatus.f_62323_) || belowzeroretrogen != null && belowzeroretrogen.m_188466_().m_62427_(ChunkStatus.f_62323_);
          if (!flag && flag3) {
             for(BlockPos blockpos : BlockPos.m_121976_(p_188233_.m_45604_(), p_188231_.m_141937_(), p_188233_.m_45605_(), p_188233_.m_45608_(), p_188231_.m_151558_() - 1, p_188233_.m_45609_())) {
-               if (chunkaccess.m_8055_(blockpos).m_60791_() != 0) {
+               if (chunkaccess.m_8055_(blockpos).getLightEmission(chunkaccess, blockpos) != 0) {
                   protochunk.m_63277_(blockpos);
                }
             }
@@ -219,7 +_,10 @@
       }
 
       if (chunkstatus$chunktype == ChunkStatus.ChunkType.LEVELCHUNK) {
-         return new ImposterProtoChunk((LevelChunk)chunkaccess, false);
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.ChunkDataEvent.Load(chunkaccess, p_188234_, chunkstatus$chunktype));
+         ProtoChunk chunk = new ImposterProtoChunk((LevelChunk) chunkaccess, false);
+         chunk.tasks = tasksToExecuteOnMain;
+         return chunk;
       } else {
          ProtoChunk protochunk1 = (ProtoChunk)chunkaccess;
          ListTag listtag4 = p_188234_.m_128437_("entities", 10);
@@ -252,10 +_,45 @@
             protochunk1.m_188186_(generationstep$carving, new CarvingMask(compoundtag4.m_128467_(s1), chunkaccess.m_141937_()));
          }
 
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.ChunkDataEvent.Load(chunkaccess, p_188234_, chunkstatus$chunktype));
+         protochunk1.tasks = tasksToExecuteOnMain;
          return protochunk1;
       }
    }
 
+   // Paper start - async chunk save for unload
+   public record AsyncSaveData(
+           Tag blockTickList, // non-null if we had to go to the server's tick list
+           Tag fluidTickList, // non-null if we had to go to the server's tick list
+           ListTag blockEntities,
+           long worldTime
+   ) {}
+
+
+   // must be called sync
+   public static AsyncSaveData getAsyncSaveData(ServerLevel world, ChunkAccess chunk) {
+      org.spigotmc.AsyncCatcher.catchOp("preparation of chunk data for async save");
+
+      final CompoundTag tickLists = new CompoundTag();
+      ChunkSerializer.m_188235_(world, tickLists, chunk.m_183568_());
+
+      ListTag blockEntitiesSerialized = new ListTag();
+      for (final BlockPos blockPos : chunk.m_5928_()) {
+         final CompoundTag blockEntityNbt = chunk.m_8051_(blockPos);
+         if (blockEntityNbt != null) {
+            blockEntitiesSerialized.add(blockEntityNbt);
+         }
+      }
+
+      return new AsyncSaveData(
+              tickLists.m_128423_(f_188228_),
+              tickLists.m_128423_(f_188229_),
+              blockEntitiesSerialized,
+              world.m_46467_()
+      );
+   }
+   // Paper end
+
    private static void m_188239_(ChunkPos p_188240_, int p_188241_, String p_188242_) {
       f_63449_.error("Recoverable errors when loading section [" + p_188240_.f_45578_ + ", " + p_188241_ + ", " + p_188240_.f_45579_ + "]: " + p_188242_);
    }
@@ -267,11 +_,20 @@
    public static CompoundTag m_63454_(ServerLevel p_63455_, ChunkAccess p_63456_) {
       ChunkPos chunkpos = p_63456_.m_7697_();
       CompoundTag compoundtag = new CompoundTag();
+
+      // Paper start - rewrite light impl
+      final int minSection = io.papermc.paper.util.WorldUtil.getMinLightSection(p_63455_);
+      final int maxSection = io.papermc.paper.util.WorldUtil.getMaxLightSection(p_63455_);
+      ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] blockNibbles = p_63456_.getBlockNibbles();
+      ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] skyNibbles = p_63456_.getSkyNibbles();
+      // Paper end - rewrite light impl
+
+      AsyncSaveData asyncsavedata = p_63456_.asyncsavedata;
       compoundtag.m_128405_("DataVersion", SharedConstants.m_183709_().getWorldVersion());
       compoundtag.m_128405_("xPos", chunkpos.f_45578_);
       compoundtag.m_128405_("yPos", p_63456_.m_151560_());
       compoundtag.m_128405_("zPos", chunkpos.f_45579_);
-      compoundtag.m_128356_("LastUpdate", p_63455_.m_46467_());
+      compoundtag.m_128356_("LastUpdate", asyncsavedata != null ? asyncsavedata.worldTime : p_63455_.m_46467_()); // Paper - async chunk unloading
       compoundtag.m_128356_("InhabitedTime", p_63456_.m_6319_());
       compoundtag.m_128359_("Status", p_63456_.m_6415_().m_62467_());
       BlendingData blendingdata = p_63456_.m_183407_();
@@ -303,23 +_,42 @@
       for(int i = levellightengine.m_164447_(); i < levellightengine.m_164448_(); ++i) {
          int j = p_63456_.m_151566_(i);
          boolean flag1 = j >= 0 && j < alevelchunksection.length;
-         DataLayer datalayer = levellightengine.m_75814_(LightLayer.BLOCK).m_8079_(SectionPos.m_123196_(chunkpos, i));
-         DataLayer datalayer1 = levellightengine.m_75814_(LightLayer.SKY).m_8079_(SectionPos.m_123196_(chunkpos, i));
-         if (flag1 || datalayer != null || datalayer1 != null) {
-            CompoundTag compoundtag1 = new CompoundTag();
+
+         // Paper - replace light engine
+
+         // Paper start - replace light engine
+         ca.spottedleaf.starlight.common.light.SWMRNibbleArray.SaveState blockNibble = blockNibbles[i - minSection].getSaveState();
+         ca.spottedleaf.starlight.common.light.SWMRNibbleArray.SaveState skyNibble = skyNibbles[i - minSection].getSaveState();
+         if (flag1 || blockNibble != null || skyNibble != null) {
+            // Paper end - replace light engine
+            CompoundTag compoundtag1 = new CompoundTag(); CompoundTag section = compoundtag1; // Paper
             if (flag1) {
                LevelChunkSection levelchunksection = alevelchunksection[j];
                compoundtag1.m_128365_("block_states", f_188227_.encodeStart(NbtOps.f_128958_, levelchunksection.m_63019_()).getOrThrow(false, f_63449_::error));
                compoundtag1.m_128365_("biomes", codec.encodeStart(NbtOps.f_128958_, levelchunksection.m_187996_()).getOrThrow(false, f_63449_::error));
             }
 
-            if (datalayer != null && !datalayer.m_62575_()) {
-               compoundtag1.m_128382_("BlockLight", datalayer.m_7877_());
-            }
-
-            if (datalayer1 != null && !datalayer1.m_62575_()) {
-               compoundtag1.m_128382_("SkyLight", datalayer1.m_7877_());
-            }
+            // Paper start
+            // we store under the same key so mod programs editing nbt
+            // can still read the data, hopefully.
+            // however, for compatibility we store chunks as unlit so vanilla
+            // is forced to re-light them if it encounters our data. It's too much of a burden
+            // to try and maintain compatibility with a broken and inferior skylight management system.
+
+            if (blockNibble != null) {
+               if (blockNibble.data != null) {
+                  section.m_128382_("BlockLight", blockNibble.data);
+               }
+               section.m_128405_(BLOCKLIGHT_STATE_TAG, blockNibble.state);
+            }
+
+            if (skyNibble != null) {
+               if (skyNibble.data != null) {
+                  section.m_128382_("SkyLight", skyNibble.data);
+               }
+               section.m_128405_(SKYLIGHT_STATE_TAG, skyNibble.state);
+            }
+            // Paper end
 
             if (!compoundtag1.m_128456_()) {
                compoundtag1.m_128344_("Y", (byte)i);
@@ -330,19 +_,32 @@
 
       compoundtag.m_128365_("sections", listtag);
       if (flag) {
-         compoundtag.m_128379_("isLightOn", true);
-      }
-
-      ListTag listtag1 = new ListTag();
-
-      for(BlockPos blockpos : p_63456_.m_5928_()) {
-         CompoundTag compoundtag3 = p_63456_.m_8051_(blockpos);
-         if (compoundtag3 != null) {
-            listtag1.add(compoundtag3);
+         compoundtag.m_128405_(STARLIGHT_VERSION_TAG, STARLIGHT_LIGHT_VERSION); // Paper
+         compoundtag.m_128379_("isLightOn", false); // Paper - set to false but still store, this allows us to detect --eraseCache (as eraseCache _removes_)
+      }
+
+      // Paper start
+      ListTag nbttaglist1;
+      Iterator<BlockPos> iterator;
+      if (asyncsavedata != null) {
+         nbttaglist1 = asyncsavedata.blockEntities;
+         iterator = java.util.Collections.emptyIterator();
+      } else {
+         nbttaglist1 = new ListTag();
+         iterator = p_63456_.m_5928_().iterator();
+      }
+      // Paper end
+
+      CompoundTag nbttagcompound2;
+      while (iterator.hasNext()) {
+         BlockPos blockpos = (BlockPos) iterator.next();
+         nbttagcompound2 = p_63456_.m_8051_(blockpos);
+         if (nbttagcompound2 != null) {
+            nbttaglist1.add(nbttagcompound2);
          }
       }
 
-      compoundtag.m_128365_("block_entities", listtag1);
+      compoundtag.m_128365_("block_entities", nbttaglist1);
       if (p_63456_.m_6415_().m_62494_() == ChunkStatus.ChunkType.PROTOCHUNK) {
          ProtoChunk protochunk = (ProtoChunk)p_63456_;
          ListTag listtag2 = new ListTag();
@@ -360,8 +_,26 @@
 
          compoundtag.m_128365_("CarvingMasks", compoundtag4);
       }
-
-      m_188235_(p_63455_, compoundtag, p_63456_.m_183568_());
+      else {
+          LevelChunk levelChunk = (LevelChunk) p_63456_;
+          try {
+              final CompoundTag capTag = levelChunk.writeCapsToNBT();
+              if (capTag != null) compoundtag.m_128365_("ForgeCaps", capTag);
+          } catch (Exception exception) {
+              f_63449_.error("A capability provider has thrown an exception trying to write state. It will not persist. Report this to the mod author", exception);
+          }
+      }
+
+      // Paper start
+      if (asyncsavedata != null) {
+         compoundtag.m_128365_(f_188228_, asyncsavedata.blockTickList);
+         compoundtag.m_128365_(f_188229_, asyncsavedata.fluidTickList);
+      } else {
+         ChunkSerializer.m_188235_(p_63455_, compoundtag, p_63456_.m_183568_());
+      }
+      // Paper end
+
+     // saveTicks(p_63455_, compoundtag, p_63456_.getTicksForSerialization());
       compoundtag.m_128365_("PostProcessing", m_63490_(p_63456_.m_6720_()));
       CompoundTag compoundtag2 = new CompoundTag();
 
