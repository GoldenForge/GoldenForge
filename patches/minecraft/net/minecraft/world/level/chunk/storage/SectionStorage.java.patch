--- a/net/minecraft/world/level/chunk/storage/SectionStorage.java
+++ b/net/minecraft/world/level/chunk/storage/SectionStorage.java
@@ -9,6 +_,7 @@
 import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.DynamicOps;
 import com.mojang.serialization.OptionalDynamic;
+import io.papermc.paper.util.MCUtil;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet;
@@ -34,28 +_,62 @@
 import net.minecraft.world.level.LevelHeightAccessor;
 import org.slf4j.Logger;
 
-public class SectionStorage<R> implements AutoCloseable {
+public class SectionStorage<R> extends RegionFileStorage implements AutoCloseable {
    private static final Logger f_63772_ = LogUtils.getLogger();
    private static final String f_156617_ = "Sections";
-   private final IOWorker f_63773_;
+  // private final IOWorker worker;
    private final Long2ObjectMap<Optional<R>> f_63774_ = new Long2ObjectOpenHashMap<>();
-   private final LongLinkedOpenHashSet f_63775_ = new LongLinkedOpenHashSet();
+   public final LongLinkedOpenHashSet f_63775_ = new LongLinkedOpenHashSet();
    private final Function<Runnable, Codec<R>> f_63776_;
    private final Function<Runnable, R> f_63777_;
    private final DataFixer f_63778_;
    private final DataFixTypes f_63779_;
-   private final RegistryAccess f_223507_;
+   public final RegistryAccess f_223507_;
    protected final LevelHeightAccessor f_156618_;
 
    public SectionStorage(Path p_223509_, Function<Runnable, Codec<R>> p_223510_, Function<Runnable, R> p_223511_, DataFixer p_223512_, DataFixTypes p_223513_, boolean p_223514_, RegistryAccess p_223515_, LevelHeightAccessor p_223516_) {
+      super(p_223509_, p_223514_);
       this.f_63776_ = p_223510_;
       this.f_63777_ = p_223511_;
       this.f_63778_ = p_223512_;
       this.f_63779_ = p_223513_;
       this.f_223507_ = p_223515_;
       this.f_156618_ = p_223516_;
-      this.f_63773_ = new IOWorker(p_223509_, p_223514_, p_223509_.getFileName().toString());
    }
+
+    // Paper start - actually unload POI data
+    public void unloadData(long coordinate) {
+        ChunkPos chunkPos = new ChunkPos(coordinate);
+        this.m_63796_(chunkPos);
+
+        Long2ObjectMap<Optional<R>> data = this.f_63774_;
+        int before = data.size();
+
+        for (int section = this.f_156618_.m_151560_(); section < this.f_156618_.m_151561_(); ++section) {
+            data.remove(SectionPos.m_123209_(chunkPos.f_45578_, section, chunkPos.f_45579_));
+        }
+
+        if (before != data.size()) {
+            this.onUnload(coordinate);
+        }
+    }
+
+    protected void onUnload(long coordinate) {}
+
+    public boolean isEmpty(long coordinate) {
+        Long2ObjectMap<Optional<R>> data = this.f_63774_;
+        int x = MCUtil.getCoordinateX(coordinate);
+        int z = MCUtil.getCoordinateZ(coordinate);
+        for (int section = this.f_156618_.m_151560_(); section < this.f_156618_.m_151561_(); ++section) {
+            Optional<R> optional = data.get(SectionPos.m_123209_(x, section, z));
+            if (optional != null && optional.orElse(null) != null) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+    // Paper end - actually unload POI data
 
    protected void m_6202_(BooleanSupplier p_63812_) {
       while(this.m_202164_() && p_63812_.getAsBoolean()) {
@@ -70,11 +_,11 @@
    }
 
    @Nullable
-   protected Optional<R> m_63818_(long p_63819_) {
+   public Optional<R> m_63818_(long p_63819_) {
       return this.f_63774_.get(p_63819_);
    }
 
-   protected Optional<R> m_63823_(long p_63824_) {
+   public Optional<R> m_63823_(long p_63824_) {
       if (this.m_156630_(p_63824_)) {
          return Optional.empty();
       } else {
@@ -115,21 +_,22 @@
       }
    }
 
-   private void m_63814_(ChunkPos p_63815_) {
-      Optional<CompoundTag> optional = this.m_223532_(p_63815_).join();
-      RegistryOps<Tag> registryops = RegistryOps.m_206821_(NbtOps.f_128958_, this.f_223507_);
-      this.m_63801_(p_63815_, registryops, optional.orElse((CompoundTag)null));
-   }
+    private void m_63814_(ChunkPos p_63815_) {
+        // Paper start - expose function to load in data
+        this.loadInData(p_63815_, this.tryRead(p_63815_));
+    }
+    public void loadInData(ChunkPos chunkPos, CompoundTag compound) {
+        this.m_63801_(chunkPos, RegistryOps.m_206821_(NbtOps.f_128958_, this.f_223507_), compound);
+        // Paper end - expose function to load in data
+    }
 
-   private CompletableFuture<Optional<CompoundTag>> m_223532_(ChunkPos p_223533_) {
-      return this.f_63773_.m_156587_(p_223533_).exceptionally((p_223526_) -> {
-         if (p_223526_ instanceof IOException ioexception) {
-            f_63772_.error("Error reading chunk {} data from disk", p_223533_, ioexception);
-            return Optional.empty();
-         } else {
-            throw new CompletionException(p_223526_);
-         }
-      });
+   private CompoundTag tryRead(ChunkPos p_223533_) {
+       try {
+           return this.m_63706_(p_223533_); // Paper - nuke IOWorker
+       } catch (IOException var3) {
+           f_63772_.error("Error reading chunk {} data from disk", p_223533_, var3);
+           return null;
+       }
    }
 
    private <T> void m_63801_(ChunkPos p_63802_, DynamicOps<T> p_63803_, @Nullable T p_63804_) {
@@ -162,7 +_,7 @@
             });
          }
       }
-
+       if (this instanceof net.minecraft.world.entity.ai.village.poi.PoiManager) { ((net.minecraft.world.entity.ai.village.poi.PoiManager)this).queueUnload(p_63802_.longKey, net.minecraft.server.MinecraftServer.currentTickLong + 1); } // Paper - unload POI data
    }
 
    private void m_63825_(ChunkPos p_63826_) {
@@ -170,13 +_,30 @@
       Dynamic<Tag> dynamic = this.m_63798_(p_63826_, registryops);
       Tag tag = dynamic.getValue();
       if (tag instanceof CompoundTag) {
-         this.f_63773_.m_63538_(p_63826_, (CompoundTag)tag);
+          try { this.m_63708_(p_63826_, (CompoundTag)tag); } catch (IOException ioexception) { SectionStorage.f_63772_.error("Error writing data to disk", ioexception); } // Paper - nuke IOWorker
+
       } else {
          f_63772_.error("Expected compound tag, got {}", (Object)tag);
       }
 
    }
 
+
+    // Paper start - internal get data function, copied from above
+    private CompoundTag getDataInternal(ChunkPos chunkcoordintpair) {
+        RegistryOps<Tag> registryOps = RegistryOps.m_206821_(NbtOps.f_128958_, this.f_223507_);
+        Dynamic<Tag> dynamic = this.m_63798_(chunkcoordintpair, registryOps);
+        Tag nbtbase = (Tag) dynamic.getValue();
+
+        if (nbtbase instanceof CompoundTag) {
+            return (CompoundTag)nbtbase;
+        } else {
+            SectionStorage.f_63772_.error("Expected compound tag, got {}", nbtbase);
+        }
+        return null;
+    }
+    // Paper end
+
    private <T> Dynamic<T> m_63798_(ChunkPos p_63799_, DynamicOps<T> p_63800_) {
       Map<T, T> map = Maps.newHashMap();
 
@@ -232,6 +_,24 @@
    }
 
    public void close() throws IOException {
-      this.f_63773_.close();
+      //this.worker.close();
    }
+
+
+    // Paper start - get data function
+    public CompoundTag getData(ChunkPos chunkcoordintpair) {
+        // Note: Copied from above
+        // This is checking if the data needs to be written, then it builds it later in getDataInternal(ChunkCoordIntPair)
+        if (!this.f_63775_.isEmpty()) {
+            for (int i = this.f_156618_.m_151560_(); i < this.f_156618_.m_151561_(); ++i) {
+                long j = SectionPos.m_123196_(chunkcoordintpair, i).m_123252_();
+
+                if (this.f_63775_.contains(j)) {
+                    return this.getDataInternal(chunkcoordintpair);
+                }
+            }
+        }
+        return null;
+    }
+    // Paper end
 }
