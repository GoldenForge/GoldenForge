--- a/net/minecraft/world/level/chunk/storage/SectionStorage.java
+++ b/net/minecraft/world/level/chunk/storage/SectionStorage.java
@@ -9,6 +_,7 @@
 import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.DynamicOps;
 import com.mojang.serialization.OptionalDynamic;
+import io.papermc.paper.util.MCUtil;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet;
@@ -34,27 +_,27 @@
 import net.minecraft.world.level.LevelHeightAccessor;
 import org.slf4j.Logger;
 
-public class SectionStorage<R> implements AutoCloseable {
+public class SectionStorage<R> extends RegionFileStorage implements AutoCloseable {
    private static final Logger f_63772_ = LogUtils.getLogger();
    private static final String f_156617_ = "Sections";
-   private final IOWorker f_63773_;
+  // private final IOWorker worker;
    private final Long2ObjectMap<Optional<R>> f_63774_ = new Long2ObjectOpenHashMap<>();
-   private final LongLinkedOpenHashSet f_63775_ = new LongLinkedOpenHashSet();
+   public final LongLinkedOpenHashSet f_63775_ = new LongLinkedOpenHashSet();
    private final Function<Runnable, Codec<R>> f_63776_;
    private final Function<Runnable, R> f_63777_;
    private final DataFixer f_63778_;
    private final DataFixTypes f_63779_;
-   private final RegistryAccess f_223507_;
+   public final RegistryAccess f_223507_;
    protected final LevelHeightAccessor f_156618_;
 
-   public SectionStorage(Path p_223509_, Function<Runnable, Codec<R>> p_223510_, Function<Runnable, R> p_223511_, DataFixer p_223512_, DataFixTypes p_223513_, boolean p_223514_, RegistryAccess p_223515_, LevelHeightAccessor p_223516_) {
+   public SectionStorage(dev.kaiijumc.kaiiju.region.RegionFileFormat format, int linearCompression, boolean linearCrashOnBrokenSymlink, Path p_223509_, Function<Runnable, Codec<R>> p_223510_, Function<Runnable, R> p_223511_, DataFixer p_223512_, DataFixTypes p_223513_, boolean p_223514_, RegistryAccess p_223515_, LevelHeightAccessor p_223516_) {
+      super(format, linearCompression, linearCrashOnBrokenSymlink, p_223509_, p_223514_);
       this.f_63776_ = p_223510_;
       this.f_63777_ = p_223511_;
       this.f_63778_ = p_223512_;
       this.f_63779_ = p_223513_;
       this.f_223507_ = p_223515_;
       this.f_156618_ = p_223516_;
-      this.f_63773_ = new IOWorker(p_223509_, p_223514_, p_223509_.getFileName().toString());
    }
 
    protected void m_6202_(BooleanSupplier p_63812_) {
@@ -70,11 +_,11 @@
    }
 
    @Nullable
-   protected Optional<R> m_63818_(long p_63819_) {
+   public Optional<R> m_63818_(long p_63819_) {
       return this.f_63774_.get(p_63819_);
    }
 
-   protected Optional<R> m_63823_(long p_63824_) {
+   public Optional<R> m_63823_(long p_63824_) {
       if (this.m_156630_(p_63824_)) {
          return Optional.empty();
       } else {
@@ -115,21 +_,17 @@
       }
    }
 
-   private void m_63814_(ChunkPos p_63815_) {
-      Optional<CompoundTag> optional = this.m_223532_(p_63815_).join();
-      RegistryOps<Tag> registryops = RegistryOps.m_206821_(NbtOps.f_128958_, this.f_223507_);
-      this.m_63801_(p_63815_, registryops, optional.orElse((CompoundTag)null));
-   }
+    private void m_63814_(ChunkPos p_63815_) {
+        throw new IllegalStateException("Only chunk system can load in state, offending class:" + this.getClass().getName()); // Paper - rewrite chunk system;
+    }
 
-   private CompletableFuture<Optional<CompoundTag>> m_223532_(ChunkPos p_223533_) {
-      return this.f_63773_.m_156587_(p_223533_).exceptionally((p_223526_) -> {
-         if (p_223526_ instanceof IOException ioexception) {
-            f_63772_.error("Error reading chunk {} data from disk", p_223533_, ioexception);
-            return Optional.empty();
-         } else {
-            throw new CompletionException(p_223526_);
-         }
-      });
+   private CompoundTag tryRead(ChunkPos p_223533_) {
+       try {
+           return this.m_63706_(p_223533_); // Paper - nuke IOWorker
+       } catch (IOException var3) {
+           f_63772_.error("Error reading chunk {} data from disk", p_223533_, var3);
+           return null;
+       }
    }
 
    private <T> void m_63801_(ChunkPos p_63802_, DynamicOps<T> p_63803_, @Nullable T p_63804_) {
@@ -142,8 +_,16 @@
          int j = m_63805_(dynamic1);
          int k = SharedConstants.m_183709_().getWorldVersion();
          boolean flag = j != k;
-         Dynamic<T> dynamic = this.f_63778_.update(this.f_63779_.m_14504_(), dynamic1, j, k);
-         OptionalDynamic<T> optionaldynamic = dynamic.get("Sections");
+         //Dynamic<T> dynamic = this.fixerUpper.update(this.type.getType(), dynamic1, j, k);
+          // Paper start - route to new converter system
+          Dynamic<T> dynamic2;
+          if (this.f_63779_.m_14504_() == net.minecraft.util.datafix.fixes.References.f_16780_) {
+              dynamic2 = new Dynamic<>(dynamic1.getOps(), (T)ca.spottedleaf.dataconverter.minecraft.MCDataConverter.convertTag(ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry.POI_CHUNK, (CompoundTag)dynamic1.getValue(), j, k));
+          } else {
+              dynamic2 = this.f_63778_.update(this.f_63779_.m_14504_(), dynamic1, j, k);
+          }
+          // Paper end - route to new converter system
+         OptionalDynamic<T> optionaldynamic = dynamic1.get("Sections");
 
          for(int l = this.f_156618_.m_151560_(); l < this.f_156618_.m_151561_(); ++l) {
             long i1 = m_156627_(p_63802_, l);
@@ -162,7 +_,6 @@
             });
          }
       }
-
    }
 
    private void m_63825_(ChunkPos p_63826_) {
@@ -170,7 +_,8 @@
       Dynamic<Tag> dynamic = this.m_63798_(p_63826_, registryops);
       Tag tag = dynamic.getValue();
       if (tag instanceof CompoundTag) {
-         this.f_63773_.m_63538_(p_63826_, (CompoundTag)tag);
+          try { this.m_63708_(p_63826_, (CompoundTag)tag); } catch (IOException ioexception) { SectionStorage.f_63772_.error("Error writing data to disk", ioexception); } // Paper - nuke IOWorker
+
       } else {
          f_63772_.error("Expected compound tag, got {}", (Object)tag);
       }
@@ -232,6 +_,7 @@
    }
 
    public void close() throws IOException {
-      this.f_63773_.close();
+      //this.worker.close();
+       super.close();
    }
 }
