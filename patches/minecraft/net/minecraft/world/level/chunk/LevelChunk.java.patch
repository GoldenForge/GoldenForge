--- a/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/net/minecraft/world/level/chunk/LevelChunk.java
@@ -12,6 +_,8 @@
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
+import net.minecraft.client.multiplayer.ClientChunkCache;
+import net.minecraft.client.multiplayer.ClientLevel;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.core.registries.Registries;
@@ -19,6 +_,7 @@
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.game.ClientboundLevelChunkPacketData;
 import net.minecraft.server.level.FullChunkStatus;
+import net.minecraft.server.level.ServerChunkCache;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.entity.Entity;
@@ -47,7 +_,7 @@
 import net.minecraft.world.ticks.TickContainerAccess;
 import org.slf4j.Logger;
 
-public class LevelChunk extends ChunkAccess {
+public class LevelChunk extends ChunkAccess implements net.minecraftforge.common.capabilities.ICapabilityProviderImpl<LevelChunk> {
    static final Logger LOGGER = LogUtils.getLogger();
    private static final TickingBlockEntity NULL_TICKER = new TickingBlockEntity() {
       public void tick() {
@@ -67,7 +_,7 @@
    };
    private final Map<BlockPos, LevelChunk.RebindableTickingBlockEntityWrapper> tickersInLevel = Maps.newHashMap();
    private boolean loaded;
-   final Level level;
+   public final Level level;
    @Nullable
    private Supplier<FullChunkStatus> fullStatus;
    @Nullable
@@ -75,6 +_,111 @@
    private final Int2ObjectMap<GameEventListenerRegistry> gameEventListenerRegistrySections;
    private final LevelChunkTicks<Block> blockTicks;
    private final LevelChunkTicks<Fluid> fluidTicks;
+   public volatile FullChunkStatus chunkStatus = FullChunkStatus.INACCESSIBLE; // Paper - rewrite chunk system
+
+   // Paper start
+   public @Nullable net.minecraft.server.level.ChunkHolder playerChunk;
+   public boolean mustNotSave = false;
+
+   static final int NEIGHBOUR_CACHE_RADIUS = 3;
+   public static int getNeighbourCacheRadius() {
+      return NEIGHBOUR_CACHE_RADIUS;
+   }
+
+   boolean loadedTicketLevel;
+   private long neighbourChunksLoadedBitset;
+   private final LevelChunk[] loadedNeighbourChunks = new LevelChunk[(NEIGHBOUR_CACHE_RADIUS * 2 + 1) * (NEIGHBOUR_CACHE_RADIUS * 2 + 1)];
+
+   private static int getNeighbourIndex(final int relativeX, final int relativeZ) {
+      // index = (relativeX + NEIGHBOUR_CACHE_RADIUS) + (relativeZ + NEIGHBOUR_CACHE_RADIUS) * (NEIGHBOUR_CACHE_RADIUS * 2 + 1)
+      // optimised variant of the above by moving some of the ops to compile time
+      return relativeX + (relativeZ * (NEIGHBOUR_CACHE_RADIUS * 2 + 1)) + (NEIGHBOUR_CACHE_RADIUS + NEIGHBOUR_CACHE_RADIUS * ((NEIGHBOUR_CACHE_RADIUS * 2 + 1)));
+   }
+
+   public final LevelChunk getRelativeNeighbourIfLoaded(final int relativeX, final int relativeZ) {
+      return this.loadedNeighbourChunks[getNeighbourIndex(relativeX, relativeZ)];
+   }
+
+   public final boolean isNeighbourLoaded(final int relativeX, final int relativeZ) {
+      return (this.neighbourChunksLoadedBitset & (1L << getNeighbourIndex(relativeX, relativeZ))) != 0;
+   }
+
+   public final void setNeighbourLoaded(final int relativeX, final int relativeZ, final LevelChunk chunk) {
+      if (chunk == null) {
+         throw new IllegalArgumentException("Chunk must be non-null, neighbour: (" + relativeX + "," + relativeZ + "), chunk: " + this.chunkPos);
+      }
+      final long before = this.neighbourChunksLoadedBitset;
+      final int index = getNeighbourIndex(relativeX, relativeZ);
+      this.loadedNeighbourChunks[index] = chunk;
+      this.neighbourChunksLoadedBitset |= (1L << index);
+      this.onNeighbourChange(before, this.neighbourChunksLoadedBitset);
+   }
+
+   public final void setNeighbourUnloaded(final int relativeX, final int relativeZ) {
+      final long before = this.neighbourChunksLoadedBitset;
+      final int index = getNeighbourIndex(relativeX, relativeZ);
+      this.loadedNeighbourChunks[index] = null;
+      this.neighbourChunksLoadedBitset &= ~(1L << index);
+      this.onNeighbourChange(before, this.neighbourChunksLoadedBitset);
+   }
+
+   public final void resetNeighbours() {
+      final long before = this.neighbourChunksLoadedBitset;
+      this.neighbourChunksLoadedBitset = 0L;
+      java.util.Arrays.fill(this.loadedNeighbourChunks, null);
+      this.onNeighbourChange(before, 0L);
+   }
+
+   protected void onNeighbourChange(final long bitsetBefore, final long bitsetAfter) {
+
+   }
+
+   public final boolean isAnyNeighborsLoaded() {
+      return neighbourChunksLoadedBitset != 0;
+   }
+   public final boolean areNeighboursLoaded(final int radius) {
+      return LevelChunk.areNeighboursLoaded(this.neighbourChunksLoadedBitset, radius);
+   }
+
+   public static boolean areNeighboursLoaded(final long bitset, final int radius) {
+      // index = relativeX + (relativeZ * (NEIGHBOUR_CACHE_RADIUS * 2 + 1)) + (NEIGHBOUR_CACHE_RADIUS + NEIGHBOUR_CACHE_RADIUS * ((NEIGHBOUR_CACHE_RADIUS * 2 + 1)))
+      switch (radius) {
+         case 0: {
+            return (bitset & (1L << getNeighbourIndex(0, 0))) != 0;
+         }
+         case 1: {
+            long mask = 0L;
+            for (int dx = -1; dx <= 1; ++dx) {
+               for (int dz = -1; dz <= 1; ++dz) {
+                  mask |= (1L << getNeighbourIndex(dx, dz));
+               }
+            }
+            return (bitset & mask) == mask;
+         }
+         case 2: {
+            long mask = 0L;
+            for (int dx = -2; dx <= 2; ++dx) {
+               for (int dz = -2; dz <= 2; ++dz) {
+                  mask |= (1L << getNeighbourIndex(dx, dz));
+               }
+            }
+            return (bitset & mask) == mask;
+         }
+         case 3: {
+            long mask = 0L;
+            for (int dx = -3; dx <= 3; ++dx) {
+               for (int dz = -3; dz <= 3; ++dz) {
+                  mask |= (1L << getNeighbourIndex(dx, dz));
+               }
+            }
+            return (bitset & mask) == mask;
+         }
+
+         default:
+            throw new IllegalArgumentException("Radius not recognized: " + radius);
+      }
+   }
+   // Paper end
 
    public LevelChunk(Level p_187945_, ChunkPos p_187946_) {
       this(p_187945_, p_187946_, UpgradeData.EMPTY, new LevelChunkTicks<>(), new LevelChunkTicks<>(), 0L, (LevelChunkSection[])null, (LevelChunk.PostLoadProcessor)null, (BlendingData)null);
@@ -82,6 +_,10 @@
 
    public LevelChunk(Level p_196854_, ChunkPos p_196855_, UpgradeData p_196856_, LevelChunkTicks<Block> p_196857_, LevelChunkTicks<Fluid> p_196858_, long p_196859_, @Nullable LevelChunkSection[] p_196860_, @Nullable LevelChunk.PostLoadProcessor p_196861_, @Nullable BlendingData p_196862_) {
       super(p_196855_, p_196856_, p_196854_, p_196854_.registryAccess().registryOrThrow(Registries.BIOME), p_196859_, p_196860_, p_196862_);
+      // Paper start - rewrite light engine
+      this.setBlockNibbles(ca.spottedleaf.starlight.common.light.StarLightEngine.getFilledEmptyLight(p_196854_));
+      this.setSkyNibbles(ca.spottedleaf.starlight.common.light.StarLightEngine.getFilledEmptyLight(p_196854_));
+      // Paper end - rewrite light engine
       this.level = p_196854_;
       this.gameEventListenerRegistrySections = new Int2ObjectOpenHashMap<>();
 
@@ -94,11 +_,17 @@
       this.postLoad = p_196861_;
       this.blockTicks = p_196857_;
       this.fluidTicks = p_196858_;
+      this.capProvider.initInternal();
    }
 
    public LevelChunk(ServerLevel p_196850_, ProtoChunk p_196851_, @Nullable LevelChunk.PostLoadProcessor p_196852_) {
       this(p_196850_, p_196851_.getPos(), p_196851_.getUpgradeData(), p_196851_.unpackBlockTicks(), p_196851_.unpackFluidTicks(), p_196851_.getInhabitedTime(), p_196851_.getSections(), p_196852_, p_196851_.getBlendingData());
-
+      // Paper start - rewrite light engine
+      this.setBlockNibbles(p_196851_.getBlockNibbles());
+      this.setSkyNibbles(p_196851_.getSkyNibbles());
+      this.setSkyEmptinessMap(p_196851_.getSkyEmptinessMap());
+      this.setBlockEmptinessMap(p_196851_.getBlockEmptinessMap());
+      // Paper end - rewrite light engine
       for(BlockEntity blockentity : p_196851_.getBlockEntities().values()) {
          this.setBlockEntity(blockentity);
       }
@@ -245,14 +_,14 @@
             boolean flag2 = blockstate.hasBlockEntity();
             if (!this.level.isClientSide) {
                blockstate.onRemove(this.level, p_62865_, p_62866_, p_62867_);
-            } else if (!blockstate.is(block) && flag2) {
+         } else if ((!blockstate.is(block) || !p_62866_.hasBlockEntity()) && flag2) {
                this.removeBlockEntity(p_62865_);
             }
 
             if (!levelchunksection.getBlockState(j, k, l).is(block)) {
                return null;
             } else {
-               if (!this.level.isClientSide) {
+            if (!this.level.isClientSide && !this.level.captureBlockSnapshots) {
                   p_62866_.onPlace(this.level, p_62865_, blockstate, p_62867_);
                }
 
@@ -295,6 +_,10 @@
    @Nullable
    public BlockEntity getBlockEntity(BlockPos p_62868_, LevelChunk.EntityCreationType p_62869_) {
       BlockEntity blockentity = this.blockEntities.get(p_62868_);
+      if (blockentity != null && blockentity.isRemoved()) {
+         blockEntities.remove(p_62868_);
+         blockentity = null;
+      }
       if (blockentity == null) {
          CompoundTag compoundtag = this.pendingBlockEntities.remove(p_62868_);
          if (compoundtag != null) {
@@ -312,9 +_,6 @@
                this.addAndRegisterBlockEntity(blockentity);
             }
          }
-      } else if (blockentity.isRemoved()) {
-         this.blockEntities.remove(p_62868_);
-         return null;
       }
 
       return blockentity;
@@ -330,6 +_,7 @@
          }
 
          this.updateBlockEntityTicker(p_156391_);
+         p_156391_.onLoad();
       }
 
    }
@@ -369,9 +_,14 @@
    public CompoundTag getBlockEntityNbtForSaving(BlockPos p_62932_) {
       BlockEntity blockentity = this.getBlockEntity(p_62932_);
       if (blockentity != null && !blockentity.isRemoved()) {
+         try {
          CompoundTag compoundtag1 = blockentity.saveWithFullMetadata();
          compoundtag1.putBoolean("keepPacked", false);
          return compoundtag1;
+         } catch (Exception e) {
+            LOGGER.error("A BlockEntity type {} has thrown an exception trying to write state. It will not persist, Report this to the mod author", blockentity.getClass().getName(), e);
+            return null;
+         }
       } else {
          CompoundTag compoundtag = this.pendingBlockEntities.get(p_62932_);
          if (compoundtag != null) {
@@ -433,6 +_,132 @@
 
    }
 
+   // Paper start - new load callbacks
+   private io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder;
+   public io.papermc.paper.chunk.system.scheduling.NewChunkHolder getChunkHolder() {
+      return this.chunkHolder;
+   }
+
+   public void setChunkHolder(io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder) {
+      if (chunkHolder == null) {
+         throw new NullPointerException("Chunkholder cannot be null");
+      }
+      if (this.chunkHolder != null) {
+         throw new IllegalStateException("Already have chunkholder: " + this.chunkHolder + ", cannot replace with " + chunkHolder);
+      }
+      this.chunkHolder = chunkHolder;
+      this.playerChunk = chunkHolder.vanillaChunkHolder;
+   }
+
+   /* Note: We skip the light neighbour chunk loading done for the vanilla full chunk */
+   /* Starlight does not need these chunks for lighting purposes because of edge checks */
+   public void pushChunkIntoLoadedMap() {
+      int chunkX = this.chunkPos.x;
+      int chunkZ = this.chunkPos.z;
+      net.minecraft.server.level.ServerChunkCache chunkProvider = ((ServerChunkCache) this.level.getChunkSource());
+      for (int dx = -NEIGHBOUR_CACHE_RADIUS; dx <= NEIGHBOUR_CACHE_RADIUS; ++dx) {
+         for (int dz = -NEIGHBOUR_CACHE_RADIUS; dz <= NEIGHBOUR_CACHE_RADIUS; ++dz) {
+            LevelChunk neighbour = chunkProvider.getChunkAtIfLoadedMainThreadNoCache(chunkX + dx, chunkZ + dz);
+            if (neighbour != null) {
+               neighbour.setNeighbourLoaded(-dx, -dz, this);
+               // should be in cached already
+               this.setNeighbourLoaded(dx, dz, neighbour);
+            }
+         }
+      }
+      this.setNeighbourLoaded(0, 0, this);
+      ((ServerChunkCache) this.level.getChunkSource()).addLoadedChunk(this);
+   }
+
+   public void onChunkLoad(io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder) {
+      // figure out how this should interface with:
+      // the entity chunk load event // -> moved to the FULL status
+      // the chunk load event // -> stays here
+      // any entity add to world events // -> in FULL status
+      this.loadCallback();
+      io.papermc.paper.chunk.system.ChunkSystem.onChunkBorder(this, chunkHolder.vanillaChunkHolder);
+   }
+
+   public void onChunkUnload(io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder) {
+      // figure out how this should interface with:
+      // the entity chunk load event // -> moved to chunk unload to disk (not written yet)
+      // the chunk load event // -> stays here
+      // any entity add to world events // -> goes into the unload logic, it will completely explode
+      // etc later
+      this.unloadCallback();
+      io.papermc.paper.chunk.system.ChunkSystem.onChunkNotBorder(this, chunkHolder.vanillaChunkHolder);
+   }
+
+   public void onChunkTicking(io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder) {
+      this.postProcessGeneration();
+      ((ServerLevel) this.level).startTickingChunk(this);
+      io.papermc.paper.chunk.system.ChunkSystem.onChunkTicking(this, chunkHolder.vanillaChunkHolder);
+   }
+
+   public void onChunkNotTicking(io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder) {
+      io.papermc.paper.chunk.system.ChunkSystem.onChunkNotTicking(this, chunkHolder.vanillaChunkHolder);
+   }
+
+   public void onChunkEntityTicking(io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder) {
+      io.papermc.paper.chunk.system.ChunkSystem.onChunkEntityTicking(this, chunkHolder.vanillaChunkHolder);
+   }
+
+   public void onChunkNotEntityTicking(io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder) {
+      io.papermc.paper.chunk.system.ChunkSystem.onChunkNotEntityTicking(this, chunkHolder.vanillaChunkHolder);
+   }
+   // Paper end - new load callbacks
+
+   // CraftBukkit start
+   public void loadCallback() {
+      if (this.loadedTicketLevel) { LOGGER.error("Double calling chunk load!", new Throwable()); } // Paper
+      // Paper - rewrite chunk system - move into separate callback
+      this.loadedTicketLevel = true;
+      // Paper - rewrite chunk system - move into separate callback
+   }
+
+   public void unloadCallback() {
+      if (!this.loadedTicketLevel) { LOGGER.error("Double calling chunk unload!", new Throwable()); } // Paper
+      ((ServerChunkCache) this.level.getChunkSource()).removeLoadedChunk(this); // Paper
+      // Paper start - neighbour cache
+      int chunkX = this.chunkPos.x;
+      int chunkZ = this.chunkPos.z;
+      net.minecraft.server.level.ServerChunkCache chunkProvider = ((ServerChunkCache) this.level.getChunkSource());
+      for (int dx = -NEIGHBOUR_CACHE_RADIUS; dx <= NEIGHBOUR_CACHE_RADIUS; ++dx) {
+         for (int dz = -NEIGHBOUR_CACHE_RADIUS; dz <= NEIGHBOUR_CACHE_RADIUS; ++dz) {
+            LevelChunk neighbour = chunkProvider.getChunkAtIfLoadedMainThreadNoCache(chunkX + dx, chunkZ + dz);
+            if (neighbour != null) {
+               neighbour.setNeighbourUnloaded(-dx, -dz);
+            }
+         }
+      }
+      this.loadedTicketLevel = false;
+      this.resetNeighbours();
+      // Paper end
+   }
+
+   // Paper start - add dirty system to tick lists
+   @Override
+   public void setUnsaved(boolean needsSaving) {
+      if (!needsSaving) {
+         this.blockTicks.clearDirty();
+         this.fluidTicks.clearDirty();
+      }
+      super.setUnsaved(needsSaving);
+   }
+   // Paper end - add dirty system to tick lists
+
+   @Override
+   public boolean isUnsaved() {
+      // Paper start - add dirty system to tick lists
+      long gameTime = this.level.getLevelData().getGameTime();
+      if (this.blockTicks.isDirty(gameTime) || this.fluidTicks.isDirty(gameTime)) {
+         return true;
+      }
+      // Paper end - add dirty system to tick lists
+      return super.isUnsaved(); // Paper - rewrite chunk system - do NOT clobber the dirty flag
+   }
+   // CraftBukkit end
+
    public boolean isEmpty() {
       return false;
    }
@@ -455,7 +_,7 @@
       p_187974_.accept((p_187968_, p_187969_, p_187970_) -> {
          BlockEntity blockentity = this.getBlockEntity(p_187968_, LevelChunk.EntityCreationType.IMMEDIATE);
          if (blockentity != null && p_187970_ != null && blockentity.getType() == p_187969_) {
-            blockentity.load(p_187970_);
+            blockentity.handleUpdateTag(p_187970_);
          }
 
       });
@@ -480,7 +_,9 @@
       return this.blockEntities;
    }
 
+   public boolean isPostProcessingDone; // Paper - replace chunk loader system
    public void postProcessGeneration() {
+      try { // Paper - replace chunk loader system
       ChunkPos chunkpos = this.getPos();
 
       for(int i = 0; i < this.postProcessing.length; ++i) {
@@ -496,6 +_,8 @@
                if (!(blockstate.getBlock() instanceof LiquidBlock)) {
                   BlockState blockstate1 = Block.updateFromNeighbourShapes(blockstate, this.level, blockpos);
                   this.level.setBlock(blockpos, blockstate1, 20);
+                  if (blockstate1 != blockstate) ((ServerLevel) this.level).chunkSource.blockChanged(blockpos); // Paper - replace player chunk loader - notify since we send before processing full updates
+
                }
             }
 
@@ -509,6 +_,10 @@
 
       this.pendingBlockEntities.clear();
       this.upgradeData.upgrade(this);
+      } finally { // Paper start - replace chunk loader system
+         this.isPostProcessingDone = true;
+      }
+      // Paper end - replace chunk loader system
    }
 
    @Nullable
@@ -556,7 +_,7 @@
    }
 
    public FullChunkStatus getFullStatus() {
-      return this.fullStatus == null ? FullChunkStatus.FULL : this.fullStatus.get();
+      return this.chunkHolder == null ? FullChunkStatus.INACCESSIBLE : this.chunkHolder.getChunkStatus(); // Paper - rewrite chunk system
    }
 
    public void setFullStatus(Supplier<FullChunkStatus> p_62880_) {
@@ -564,6 +_,7 @@
    }
 
    public void clearAllBlockEntities() {
+      this.blockEntities.values().forEach(BlockEntity::onChunkUnloaded);
       this.blockEntities.values().forEach(BlockEntity::setRemoved);
       this.blockEntities.clear();
       this.tickersInLevel.values().forEach((p_187966_) -> {
@@ -573,6 +_,7 @@
    }
 
    public void registerAllBlockEntitiesAfterLevelLoad() {
+      this.level.addFreshBlockEntities(this.blockEntities.values());
       this.blockEntities.values().forEach((p_187988_) -> {
          Level level = this.level;
          if (level instanceof ServerLevel serverlevel) {
@@ -621,6 +_,41 @@
       return new LevelChunk.BoundTickingBlockEntity<>(p_156376_, p_156377_);
    }
 
+   // FORGE START
+   private final net.minecraftforge.common.capabilities.CapabilityProvider.AsField<LevelChunk> capProvider = new net.minecraftforge.common.capabilities.CapabilityProvider.AsField<>(LevelChunk.class, this);
+
+   @org.jetbrains.annotations.NotNull
+   @Override
+   public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(@org.jetbrains.annotations.NotNull net.minecraftforge.common.capabilities.Capability<T> cap, @org.jetbrains.annotations.Nullable net.minecraft.core.Direction side)
+   {
+      return capProvider.getCapability(cap, side);
+   }
+
+   @Override
+   public boolean areCapsCompatible(net.minecraftforge.common.capabilities.CapabilityProvider<LevelChunk> other)
+   {
+      return capProvider.areCapsCompatible(other);
+   }
+
+   @Override
+   public boolean areCapsCompatible(@org.jetbrains.annotations.Nullable net.minecraftforge.common.capabilities.CapabilityDispatcher other)
+   {
+      return capProvider.areCapsCompatible(other);
+   }
+
+   @Override
+   public void invalidateCaps()
+   {
+      capProvider.invalidateCaps();
+   }
+
+   @Override
+   public void reviveCaps()
+   {
+      capProvider.reviveCaps();
+   }
+   // FORGE END
+
    class BoundTickingBlockEntity<T extends BlockEntity> implements TickingBlockEntity {
       private final T blockEntity;
       private final BlockEntityTicker<T> ticker;
@@ -637,6 +_,7 @@
             if (LevelChunk.this.isTicking(blockpos)) {
                try {
                   ProfilerFiller profilerfiller = LevelChunk.this.level.getProfiler();
+                  net.minecraftforge.server.timings.TimeTracker.BLOCK_ENTITY_UPDATE.trackStart(blockEntity);
                   profilerfiller.push(this::getType);
                   BlockState blockstate = LevelChunk.this.getBlockState(blockpos);
                   if (this.blockEntity.getType().isValid(blockstate)) {
@@ -652,6 +_,12 @@
                   CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking block entity");
                   CrashReportCategory crashreportcategory = crashreport.addCategory("Block entity being ticked");
                   this.blockEntity.fillCrashReportCategory(crashreportcategory);
+
+                  if (net.minecraftforge.common.ForgeConfig.SERVER.removeErroringBlockEntities.get()) {
+                     LOGGER.error("{}", crashreport.getFriendlyReport());
+                     blockEntity.setRemoved();
+                     LevelChunk.this.removeBlockEntity(blockEntity.getBlockPos());
+                  } else
                   throw new ReportedException(crashreport);
                }
             }
@@ -680,6 +_,34 @@
       IMMEDIATE,
       QUEUED,
       CHECK;
+   }
+
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link net.minecraft.world.level.chunk.storage.ChunkSerializer}.
+    */
+   @java.lang.Deprecated
+   @org.jetbrains.annotations.Nullable
+   public final CompoundTag writeCapsToNBT() {
+      return capProvider.serializeInternal();
+   }
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link net.minecraft.world.level.chunk.storage.ChunkSerializer}.
+    *
+    */
+   @java.lang.Deprecated
+   public final void readCapsFromNBT(CompoundTag tag) {
+      capProvider.deserializeInternal(tag);
+   }
+
+   @Override
+   public Level getWorldForge() {
+      return getLevel();
    }
 
    @FunctionalInterface
