--- a/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/net/minecraft/world/level/chunk/LevelChunk.java
@@ -14,6 +_,8 @@
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
+import net.minecraft.client.multiplayer.ClientChunkCache;
+import net.minecraft.client.multiplayer.ClientLevel;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
 import net.minecraft.core.SectionPos;
@@ -21,6 +_,7 @@
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.game.ClientboundLevelChunkPacketData;
 import net.minecraft.server.level.ChunkHolder;
+import net.minecraft.server.level.ServerChunkCache;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.entity.Entity;
@@ -46,9 +_,10 @@
 import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.ticks.LevelChunkTicks;
 import net.minecraft.world.ticks.TickContainerAccess;
+import org.goldenforge.GoldenForge;
 import org.slf4j.Logger;
 
-public class LevelChunk extends ChunkAccess {
+public class LevelChunk extends ChunkAccess implements net.minecraftforge.common.capabilities.ICapabilityProviderImpl<LevelChunk> {
    static final Logger f_62771_ = LogUtils.getLogger();
    private static final TickingBlockEntity f_156361_ = new TickingBlockEntity() {
       public void m_142224_() {
@@ -69,7 +_,7 @@
    private final Map<BlockPos, LevelChunk.RebindableTickingBlockEntityWrapper> f_156362_ = Maps.newHashMap();
    private boolean f_62775_;
    private boolean f_196848_ = false;
-   final Level f_62776_;
+   public final Level f_62776_;
    @Nullable
    private Supplier<ChunkHolder.FullChunkStatus> f_62790_;
    @Nullable
@@ -77,11 +_,59 @@
    private final Int2ObjectMap<GameEventDispatcher> f_156363_;
    private final LevelChunkTicks<Block> f_62784_;
    private final LevelChunkTicks<Fluid> f_187943_;
+   // Paper start - track last save time
+   public long lastSaveTime;
+   public void setLastSaved(long ticks) {
+      this.lastSaveTime = ticks;
+   }
+   // Paper end
+
+   public boolean mustNotSave = false;
+   boolean loadedTicketLevel; public final boolean wasLoadCallbackInvoked() { return this.loadedTicketLevel; } // Paper - public accessor
 
    public LevelChunk(Level p_187945_, ChunkPos p_187946_) {
       this(p_187945_, p_187946_, UpgradeData.f_63320_, new LevelChunkTicks<>(), new LevelChunkTicks<>(), 0L, (LevelChunkSection[])null, (LevelChunk.PostLoadProcessor)null, (BlendingData)null);
    }
 
+
+
+   public void onChunkLoad(io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder) {
+      // figure out how this should interface with:
+      // the entity chunk load event // -> moved to the FULL status
+      // the chunk load event // -> stays here
+      // any entity add to world events // -> in FULL status
+      io.papermc.paper.chunk.system.ChunkSystem.onChunkBorder(this, chunkHolder.vanillaChunkHolder);
+   }
+
+   public void onChunkUnload(io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder) {
+      // figure out how this should interface with:
+      // the entity chunk load event // -> moved to chunk unload to disk (not written yet)
+      // the chunk load event // -> stays here
+      // any entity add to world events // -> goes into the unload logic, it will completely explode
+      // etc later
+      io.papermc.paper.chunk.system.ChunkSystem.onChunkNotBorder(this, chunkHolder.vanillaChunkHolder);
+   }
+
+   public void onChunkTicking(io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder) {
+      this.m_62812_();
+      ((ServerLevel) this.f_62776_).m_184102_(this);
+      io.papermc.paper.chunk.system.ChunkSystem.onChunkTicking(this, chunkHolder.vanillaChunkHolder);
+   }
+
+   public void onChunkNotTicking(io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder) {
+      io.papermc.paper.chunk.system.ChunkSystem.onChunkNotTicking(this, chunkHolder.vanillaChunkHolder);
+   }
+
+   public void onChunkEntityTicking(io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder) {
+      io.papermc.paper.chunk.system.ChunkSystem.onChunkEntityTicking(this, chunkHolder.vanillaChunkHolder);
+   }
+
+   public void onChunkNotEntityTicking(io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder) {
+      io.papermc.paper.chunk.system.ChunkSystem.onChunkNotEntityTicking(this, chunkHolder.vanillaChunkHolder);
+   }
+   // Paper end - new load callbacks
+   // Paper end
+
    public LevelChunk(Level p_196854_, ChunkPos p_196855_, UpgradeData p_196856_, LevelChunkTicks<Block> p_196857_, LevelChunkTicks<Fluid> p_196858_, long p_196859_, @Nullable LevelChunkSection[] p_196860_, @Nullable LevelChunk.PostLoadProcessor p_196861_, @Nullable BlendingData p_196862_) {
       super(p_196855_, p_196856_, p_196854_, p_196854_.m_5962_().m_175515_(Registry.f_122885_), p_196859_, p_196860_, p_196862_);
       this.f_62776_ = p_196854_;
@@ -96,11 +_,17 @@
       this.f_62791_ = p_196861_;
       this.f_62784_ = p_196857_;
       this.f_187943_ = p_196858_;
+      this.capProvider.initInternal();
    }
 
    public LevelChunk(ServerLevel p_196850_, ProtoChunk p_196851_, @Nullable LevelChunk.PostLoadProcessor p_196852_) {
       this(p_196850_, p_196851_.m_7697_(), p_196851_.m_7387_(), p_196851_.m_188181_(), p_196851_.m_188182_(), p_196851_.m_6319_(), p_196851_.m_7103_(), p_196852_, p_196851_.m_183407_());
-
+      // Paper start - rewrite light engine
+      this.setBlockNibbles(p_196851_.getBlockNibbles());
+      this.setSkyNibbles(p_196851_.getSkyNibbles());
+      this.setSkyEmptinessMap(p_196851_.getSkyEmptinessMap());
+      this.setBlockEmptinessMap(p_196851_.getBlockEmptinessMap());
+      // Paper end - rewrite light engine
       for(BlockEntity blockentity : p_196851_.m_63292_().values()) {
          this.m_142169_(blockentity);
       }
@@ -147,7 +_,35 @@
       }
    }
 
+   // Paper start - Optimize getBlockData to reduce instructions
+
+   @Override
+   public final BlockState getBlockStateIfLoaded(BlockPos blockposition) {
+      return this.m_8055_(blockposition);
+   }
+   @Override
    public BlockState m_8055_(BlockPos p_62923_) {
+      return this.getBlockStateFinal(p_62923_.m_123341_(), p_62923_.m_123342_(), p_62923_.m_123343_());
+   }
+
+   @Override
+   public BlockState getBlockState(final int x, final int y, final int z) {
+      return this.getBlockStateFinal(x, y, z);
+   }
+
+   public final BlockState getBlockStateFinal(final int x, final int y, final int z) {
+      // Method body / logic copied from below
+      final int i = this.m_151564_(y);
+      if (i < 0 || i >= this.f_187612_.length || this.f_187612_[i].f_62969_ == 0 || this.f_187612_[i].m_188008_()) {
+         return Blocks.f_50016_.m_49966_();
+      }
+      // Inlined ChunkSection.getType() and DataPaletteBlock.a(int,int,int)
+      //return this.sections[i].states.get((y & 15) << 8 | (z & 15) << 4 | x & 15);
+      return this.f_187612_[i].m_62982_(x & 15, y & 15, z & 15);
+
+   }
+
+   public BlockState getBlockState_old(BlockPos p_62923_) {
       int i = p_62923_.m_123341_();
       int j = p_62923_.m_123342_();
       int k = p_62923_.m_123343_();
@@ -189,24 +_,18 @@
    }
 
    public FluidState m_62814_(int p_62815_, int p_62816_, int p_62817_) {
-      try {
-         int i = this.m_151564_(p_62816_);
-         if (i >= 0 && i < this.f_187612_.length) {
-            LevelChunkSection levelchunksection = this.f_187612_[i];
-            if (!levelchunksection.m_188008_()) {
-               return levelchunksection.m_63007_(p_62815_ & 15, p_62816_ & 15, p_62817_ & 15);
-            }
+      // Paper start - reduce the number of ops in this call
+      int index = this.m_151564_(p_62816_);
+      if (index >= 0 && index < this.f_187612_.length) {
+         LevelChunkSection chunksection = this.f_187612_[index];
+
+         if (!chunksection.m_188008_()) {
+            return chunksection.f_62972_.m_63085_((p_62816_ & 15) << 8 | (p_62817_ & 15) << 4 | p_62815_ & 15).m_60819_();
+            // Paper end
          }
-
-         return Fluids.f_76191_.m_76145_();
-      } catch (Throwable throwable) {
-         CrashReport crashreport = CrashReport.m_127521_(throwable, "Getting fluid state");
-         CrashReportCategory crashreportcategory = crashreport.m_127514_("Block being got");
-         crashreportcategory.m_128165_("Location", () -> {
-            return CrashReportCategory.m_178942_(this, p_62815_, p_62816_, p_62817_);
-         });
-         throw new ReportedException(crashreport);
       }
+
+      return Fluids.f_76191_.m_76145_();
    }
 
    @Nullable
@@ -237,14 +_,14 @@
             boolean flag2 = blockstate.m_155947_();
             if (!this.f_62776_.f_46443_) {
                blockstate.m_60753_(this.f_62776_, p_62865_, p_62866_, p_62867_);
-            } else if (!blockstate.m_60713_(block) && flag2) {
+         } else if ((!blockstate.m_60713_(block) || !p_62866_.m_155947_()) && flag2) {
                this.m_8114_(p_62865_);
             }
 
             if (!levelchunksection.m_62982_(j, k, l).m_60713_(block)) {
                return null;
             } else {
-               if (!this.f_62776_.f_46443_) {
+            if (!this.f_62776_.f_46443_ && !this.f_62776_.captureBlockSnapshots) {
                   p_62866_.m_60696_(this.f_62776_, p_62865_, blockstate, p_62867_);
                }
 
@@ -287,6 +_,10 @@
    @Nullable
    public BlockEntity m_5685_(BlockPos p_62868_, LevelChunk.EntityCreationType p_62869_) {
       BlockEntity blockentity = this.f_187610_.get(p_62868_);
+      if (blockentity != null && blockentity.m_58901_()) {
+         f_187610_.remove(p_62868_);
+         blockentity = null;
+      }
       if (blockentity == null) {
          CompoundTag compoundtag = this.f_187609_.remove(p_62868_);
          if (compoundtag != null) {
@@ -304,9 +_,6 @@
                this.m_142170_(blockentity);
             }
          }
-      } else if (blockentity.m_58901_()) {
-         this.f_187610_.remove(p_62868_);
-         return null;
       }
 
       return blockentity;
@@ -322,6 +_,7 @@
          }
 
          this.m_156406_(p_156391_);
+         p_156391_.onLoad();
       }
 
    }
@@ -354,6 +_,16 @@
             blockentity.m_7651_();
          }
 
+      } else {
+         // Paper start - ServerExceptionEvent
+         GoldenForge.LOGGER.error(
+                 "Attempted to place a tile entity (" + p_156374_ + ") at " + p_156374_.m_58899_().m_123341_() + ","
+                         + p_156374_.m_58899_().m_123342_() + "," + p_156374_.m_58899_().m_123343_()
+                         + " (" + m_8055_(blockpos) + ") where there was no entity tile!\n" +
+                         "Chunk coordinates: " + (this.f_187604_.f_45578_ * 16) + "," + (this.f_187604_.f_45579_ * 16) +
+                         "\nWorld: " + f_62776_.m_46472_().m_135782_());
+         // Paper end - ServerExceptionEvent
+         // CraftBukkit end
       }
    }
 
@@ -361,9 +_,14 @@
    public CompoundTag m_8051_(BlockPos p_62932_) {
       BlockEntity blockentity = this.m_7702_(p_62932_);
       if (blockentity != null && !blockentity.m_58901_()) {
+         try {
          CompoundTag compoundtag1 = blockentity.m_187480_();
          compoundtag1.m_128379_("keepPacked", false);
          return compoundtag1;
+         } catch (Exception e) {
+            f_62771_.error("A BlockEntity type {} has thrown an exception trying to write state. It will not persist, Report this to the mod author", blockentity.getClass().getName(), e);
+            return null;
+         }
       } else {
          CompoundTag compoundtag = this.f_187609_.get(p_62932_);
          if (compoundtag != null) {
@@ -378,6 +_,13 @@
    public void m_8114_(BlockPos p_62919_) {
       if (this.m_156370_()) {
          BlockEntity blockentity = this.f_187610_.remove(p_62919_);
+
+         // CraftBukkit start - SPIGOT-5561: Also remove from pending map
+         if (!f_187609_.isEmpty()) {
+            f_187609_.remove(p_62919_);
+         }
+         // CraftBukkit end
+
          if (blockentity != null) {
             Level level = this.f_62776_;
             if (level instanceof ServerLevel) {
@@ -424,6 +_,31 @@
 
    }
 
+
+   // Paper start - add dirty system to tick lists
+   @Override
+   public void m_8092_(boolean needsSaving) {
+      if (!needsSaving) {
+         this.f_62784_.clearDirty();
+         this.f_187943_.clearDirty();
+      }
+      super.m_8092_(needsSaving);
+   }
+   // Paper end - add dirty system to tick lists
+
+   @Override
+   public boolean m_6344_() {
+      // Paper start - add dirty system to tick lists
+      long gameTime = this.f_62776_.m_6106_().m_6793_();
+      if (this.f_62784_.isDirty(gameTime) || this.f_187943_.isDirty(gameTime)) {
+         return true;
+      }
+      // Paper end - add dirty system to tick lists
+      return super.m_6344_(); // Paper - rewrite chunk system - do NOT clobber the dirty flag
+   }
+   // CraftBukkit end
+
+
    public boolean m_6430_() {
       return false;
    }
@@ -445,7 +_,7 @@
       p_187974_.accept((p_187968_, p_187969_, p_187970_) -> {
          BlockEntity blockentity = this.m_5685_(p_187968_, LevelChunk.EntityCreationType.IMMEDIATE);
          if (blockentity != null && p_187970_ != null && blockentity.m_58903_() == p_187969_) {
-            blockentity.m_142466_(p_187970_);
+            blockentity.handleUpdateTag(p_187970_);
          }
 
       });
@@ -465,11 +_,13 @@
 
    public Stream<BlockPos> m_6267_() {
       return StreamSupport.stream(BlockPos.m_121976_(this.f_187604_.m_45604_(), this.m_141937_(), this.f_187604_.m_45605_(), this.f_187604_.m_45608_(), this.m_151558_() - 1, this.f_187604_.m_45609_()).spliterator(), false).filter((p_187990_) -> {
-         return this.m_8055_(p_187990_).m_60791_() != 0;
+         return this.m_8055_(p_187990_).getLightEmission(m_62953_(), p_187990_) != 0;
       });
    }
 
+   public boolean isPostProcessingDone; // Paper - replace chunk loader system
    public void m_62812_() {
+      try { // Paper - replace chunk loader system
       ChunkPos chunkpos = this.m_7697_();
 
       for(int i = 0; i < this.f_187602_.length; ++i) {
@@ -485,6 +_,7 @@
                if (!(blockstate.m_60734_() instanceof LiquidBlock)) {
                   BlockState blockstate1 = Block.m_49931_(blockstate, this.f_62776_, blockpos);
                   this.f_62776_.m_7731_(blockpos, blockstate1, 20);
+                  if (blockstate1 != blockstate) ((ServerLevel) this.f_62776_).f_8547_.m_8450_(blockpos); // Paper - replace player chunk loader - notify since we send before processing full updates
                }
             }
 
@@ -498,6 +_,10 @@
 
       this.f_187609_.clear();
       this.f_187606_.m_63341_(this);
+      } finally { // Paper start - replace chunk loader system
+         this.isPostProcessingDone = true;
+      }
+      // Paper end - replace chunk loader system
    }
 
    @Nullable
@@ -545,7 +_,7 @@
    }
 
    public ChunkHolder.FullChunkStatus m_6708_() {
-      return this.f_62790_ == null ? ChunkHolder.FullChunkStatus.BORDER : this.f_62790_.get();
+      return this.f_62790_ == null ? ChunkHolder.FullChunkStatus.BORDER : (ChunkHolder.FullChunkStatus) this.f_62790_.get();
    }
 
    public void m_62879_(Supplier<ChunkHolder.FullChunkStatus> p_62880_) {
@@ -553,6 +_,7 @@
    }
 
    public void m_187957_() {
+      this.f_187610_.values().forEach(BlockEntity::onChunkUnloaded);
       this.f_187610_.values().forEach(BlockEntity::m_7651_);
       this.f_187610_.clear();
       this.f_156362_.values().forEach((p_187966_) -> {
@@ -562,6 +_,7 @@
    }
 
    public void m_156369_() {
+      this.f_62776_.addFreshBlockEntities(this.f_187610_.values());
       this.f_187610_.values().forEach((p_187988_) -> {
          Level level = this.f_62776_;
          if (level instanceof ServerLevel serverlevel) {
@@ -619,6 +_,41 @@
       this.f_196848_ = p_196865_;
    }
 
+   // FORGE START
+   private final net.minecraftforge.common.capabilities.CapabilityProvider.AsField<LevelChunk> capProvider = new net.minecraftforge.common.capabilities.CapabilityProvider.AsField<>(LevelChunk.class, this);
+
+   @org.jetbrains.annotations.NotNull
+   @Override
+   public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(@org.jetbrains.annotations.NotNull net.minecraftforge.common.capabilities.Capability<T> cap, @org.jetbrains.annotations.Nullable net.minecraft.core.Direction side)
+   {
+      return capProvider.getCapability(cap, side);
+   }
+
+   @Override
+   public boolean areCapsCompatible(net.minecraftforge.common.capabilities.CapabilityProvider<LevelChunk> other)
+   {
+      return capProvider.areCapsCompatible(other);
+   }
+
+   @Override
+   public boolean areCapsCompatible(@org.jetbrains.annotations.Nullable net.minecraftforge.common.capabilities.CapabilityDispatcher other)
+   {
+      return capProvider.areCapsCompatible(other);
+   }
+
+   @Override
+   public void invalidateCaps()
+   {
+      capProvider.invalidateCaps();
+   }
+
+   @Override
+   public void reviveCaps()
+   {
+      capProvider.reviveCaps();
+   }
+   // FORGE END
+
    class BoundTickingBlockEntity<T extends BlockEntity> implements TickingBlockEntity {
       private final T f_156428_;
       private final BlockEntityTicker<T> f_156429_;
@@ -635,6 +_,7 @@
             if (LevelChunk.this.m_156410_(blockpos)) {
                try {
                   ProfilerFiller profilerfiller = LevelChunk.this.f_62776_.m_46473_();
+                  net.minecraftforge.server.timings.TimeTracker.BLOCK_ENTITY_UPDATE.trackStart(f_156428_);
                   profilerfiller.m_6521_(this::m_142280_);
                   BlockState blockstate = LevelChunk.this.m_8055_(blockpos);
                   if (this.f_156428_.m_58903_().m_155262_(blockstate)) {
@@ -650,6 +_,12 @@
                   CrashReport crashreport = CrashReport.m_127521_(throwable, "Ticking block entity");
                   CrashReportCategory crashreportcategory = crashreport.m_127514_("Block entity being ticked");
                   this.f_156428_.m_58886_(crashreportcategory);
+
+                  if (net.minecraftforge.common.ForgeConfig.SERVER.removeErroringBlockEntities.get()) {
+                     f_62771_.error("{}", crashreport.m_127526_());
+                     f_156428_.m_7651_();
+                     LevelChunk.this.m_8114_(f_156428_.m_58899_());
+                  } else
                   throw new ReportedException(crashreport);
                }
             }
@@ -678,6 +_,34 @@
       IMMEDIATE,
       QUEUED,
       CHECK;
+   }
+
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link net.minecraft.world.level.chunk.storage.ChunkSerializer}.
+    */
+   @java.lang.Deprecated
+   @org.jetbrains.annotations.Nullable
+   public final CompoundTag writeCapsToNBT() {
+      return capProvider.serializeInternal();
+   }
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link net.minecraft.world.level.chunk.storage.ChunkSerializer}.
+    *
+    */
+   @java.lang.Deprecated
+   public final void readCapsFromNBT(CompoundTag tag) {
+      capProvider.deserializeInternal(tag);
+   }
+
+   @Override
+   public Level getWorldForge() {
+      return m_62953_();
    }
 
    @FunctionalInterface
