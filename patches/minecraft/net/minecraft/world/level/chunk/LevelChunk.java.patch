--- a/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/net/minecraft/world/level/chunk/LevelChunk.java
@@ -14,6 +_,7 @@
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
+import net.minecraft.client.multiplayer.ClientChunkCache;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
 import net.minecraft.core.SectionPos;
@@ -21,6 +_,7 @@
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.game.ClientboundLevelChunkPacketData;
 import net.minecraft.server.level.ChunkHolder;
+import net.minecraft.server.level.ServerChunkCache;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.entity.Entity;
@@ -48,7 +_,7 @@
 import net.minecraft.world.ticks.TickContainerAccess;
 import org.slf4j.Logger;
 
-public class LevelChunk extends ChunkAccess {
+public class LevelChunk extends ChunkAccess implements net.minecraftforge.common.capabilities.ICapabilityProviderImpl<LevelChunk> {
    static final Logger f_62771_ = LogUtils.getLogger();
    private static final TickingBlockEntity f_156361_ = new TickingBlockEntity() {
       public void m_142224_() {
@@ -77,11 +_,199 @@
    private final Int2ObjectMap<GameEventDispatcher> f_156363_;
    private final LevelChunkTicks<Block> f_62784_;
    private final LevelChunkTicks<Fluid> f_187943_;
+   // Paper start - track last save time
+   public long lastSaveTime;
+   public void setLastSaved(long ticks) {
+      this.lastSaveTime = ticks;
+   }
+   // Paper end
+
+   boolean loadedTicketLevel; public final boolean wasLoadCallbackInvoked() { return this.loadedTicketLevel; } // Paper - public accessor
 
    public LevelChunk(Level p_187945_, ChunkPos p_187946_) {
       this(p_187945_, p_187946_, UpgradeData.f_63320_, new LevelChunkTicks<>(), new LevelChunkTicks<>(), 0L, (LevelChunkSection[])null, (LevelChunk.PostLoadProcessor)null, (BlendingData)null);
    }
 
+   public void loadCallback() {
+      if (this.loadedTicketLevel) { f_62771_.error("Double calling chunk load!", new Throwable()); } // Paper
+      // Paper start - neighbour cache
+      int chunkX = this.f_187604_.f_45578_;
+      int chunkZ = this.f_187604_.f_45579_;
+      ServerChunkCache chunkProvider = ((ServerChunkCache) this.f_62776_.m_7726_());
+      for (int dx = -NEIGHBOUR_CACHE_RADIUS; dx <= NEIGHBOUR_CACHE_RADIUS; ++dx) {
+         for (int dz = -NEIGHBOUR_CACHE_RADIUS; dz <= NEIGHBOUR_CACHE_RADIUS; ++dz) {
+            LevelChunk neighbour = chunkProvider.getChunkAtIfLoadedMainThreadNoCache(chunkX + dx, chunkZ + dz);
+            if (neighbour != null) {
+               neighbour.setNeighbourLoaded(-dx, -dz, this);
+               // should be in cached already
+               this.setNeighbourLoaded(dx, dz, neighbour);
+            }
+         }
+      }
+      this.setNeighbourLoaded(0, 0, this);
+      // Paper end - neighbour cache
+      this.loadedTicketLevel = true;
+      ((ServerChunkCache) this.f_62776_.m_7726_()).addLoadedChunk(this); // Paper
+      ((ServerLevel)this.f_62776_).m_7726_().f_8325_.playerChunkManager.onChunkLoad(this.f_187604_.f_45578_, this.f_187604_.f_45579_); // Paper - rewrite player chunk management
+   }
+
+   public void unloadCallback() {
+      if (!this.loadedTicketLevel) { f_62771_.error("Double calling chunk unload!", new Throwable()); } // Paper
+      ((ServerChunkCache) this.f_62776_.m_7726_()).removeLoadedChunk(this); // Paper
+      // Paper start - neighbour cache
+      int chunkX = this.f_187604_.f_45578_;
+      int chunkZ = this.f_187604_.f_45579_;
+      ServerChunkCache chunkProvider = ((ServerChunkCache) this.f_62776_.m_7726_());
+      for (int dx = -NEIGHBOUR_CACHE_RADIUS; dx <= NEIGHBOUR_CACHE_RADIUS; ++dx) {
+         for (int dz = -NEIGHBOUR_CACHE_RADIUS; dz <= NEIGHBOUR_CACHE_RADIUS; ++dz) {
+            LevelChunk neighbour = chunkProvider.getChunkAtIfLoadedMainThreadNoCache(chunkX + dx, chunkZ + dz);
+            if (neighbour != null) {
+               neighbour.setNeighbourUnloaded(-dx, -dz);
+            }
+         }
+      }
+      this.loadedTicketLevel = false;
+      this.resetNeighbours();
+      // Paper end
+   }
+
+   public @Nullable ChunkHolder playerChunk;
+   static final int NEIGHBOUR_CACHE_RADIUS = 3;
+   public static int getNeighbourCacheRadius() {
+      return NEIGHBOUR_CACHE_RADIUS;
+   }
+
+   private long neighbourChunksLoadedBitset;
+   private final LevelChunk[] loadedNeighbourChunks = new LevelChunk[(NEIGHBOUR_CACHE_RADIUS * 2 + 1) * (NEIGHBOUR_CACHE_RADIUS * 2 + 1)];
+
+   private static int getNeighbourIndex(final int relativeX, final int relativeZ) {
+      // index = (relativeX + NEIGHBOUR_CACHE_RADIUS) + (relativeZ + NEIGHBOUR_CACHE_RADIUS) * (NEIGHBOUR_CACHE_RADIUS * 2 + 1)
+      // optimised variant of the above by moving some of the ops to compile time
+      return relativeX + (relativeZ * (NEIGHBOUR_CACHE_RADIUS * 2 + 1)) + (NEIGHBOUR_CACHE_RADIUS + NEIGHBOUR_CACHE_RADIUS * ((NEIGHBOUR_CACHE_RADIUS * 2 + 1)));
+   }
+
+   public final LevelChunk getRelativeNeighbourIfLoaded(final int relativeX, final int relativeZ) {
+      return this.loadedNeighbourChunks[getNeighbourIndex(relativeX, relativeZ)];
+   }
+
+   public final boolean isNeighbourLoaded(final int relativeX, final int relativeZ) {
+      return (this.neighbourChunksLoadedBitset & (1L << getNeighbourIndex(relativeX, relativeZ))) != 0;
+   }
+
+   public final void setNeighbourLoaded(final int relativeX, final int relativeZ, final LevelChunk chunk) {
+      if (chunk == null) {
+         throw new IllegalArgumentException("Chunk must be non-null, neighbour: (" + relativeX + "," + relativeZ + "), chunk: " + this.f_187604_);
+      }
+      final long before = this.neighbourChunksLoadedBitset;
+      final int index = getNeighbourIndex(relativeX, relativeZ);
+      this.loadedNeighbourChunks[index] = chunk;
+      this.neighbourChunksLoadedBitset |= (1L << index);
+      this.onNeighbourChange(before, this.neighbourChunksLoadedBitset);
+   }
+
+   public final void setNeighbourUnloaded(final int relativeX, final int relativeZ) {
+      final long before = this.neighbourChunksLoadedBitset;
+      final int index = getNeighbourIndex(relativeX, relativeZ);
+      this.loadedNeighbourChunks[index] = null;
+      this.neighbourChunksLoadedBitset &= ~(1L << index);
+      this.onNeighbourChange(before, this.neighbourChunksLoadedBitset);
+   }
+
+   public final void resetNeighbours() {
+      final long before = this.neighbourChunksLoadedBitset;
+      this.neighbourChunksLoadedBitset = 0L;
+      java.util.Arrays.fill(this.loadedNeighbourChunks, null);
+      this.onNeighbourChange(before, 0L);
+   }
+
+   protected void onNeighbourChange(final long bitsetBefore, final long bitsetAfter) {
+
+      // Paper start - no-tick view distance
+      ServerChunkCache chunkProviderServer = ((ServerLevel)this.f_62776_).m_7726_();
+      net.minecraft.server.level.ChunkMap chunkMap = chunkProviderServer.f_8325_;
+      // this code handles the addition of ticking tickets - the distance map handles the removal
+      if (!areNeighboursLoaded(bitsetBefore, 2) && areNeighboursLoaded(bitsetAfter, 2)) {
+         if (chunkMap.playerChunkManager.tickMap.getObjectsInRange(this.coordinateKey) != null) { // Paper - replace old player chunk loading system
+            // now we're ready for entity ticking
+            chunkProviderServer.f_8332_.execute(() -> {
+               // double check that this condition still holds.
+               if (LevelChunk.this.areNeighboursLoaded(2) && chunkMap.playerChunkManager.tickMap.getObjectsInRange(LevelChunk.this.coordinateKey) != null) { // Paper - replace old player chunk loading system
+                  chunkMap.playerChunkManager.onChunkPlayerTickReady(this.f_187604_.f_45578_, this.f_187604_.f_45579_); // Paper - replace old player chunk
+                  chunkProviderServer.addTicketAtLevel(net.minecraft.server.level.TicketType.f_9444_, LevelChunk.this.f_187604_, 31, LevelChunk.this.f_187604_); // 31 -> entity ticking, TODO check on update
+               }
+            });
+         }
+      }
+
+      // this code handles the chunk sending
+      if (!areNeighboursLoaded(bitsetBefore, 1) && areNeighboursLoaded(bitsetAfter, 1)) {
+         // Paper start - replace old player chunk loading system
+         if (chunkMap.playerChunkManager.isChunkNearPlayers(this.f_187604_.f_45578_, this.f_187604_.f_45579_)) {
+            // the post processing is expensive, so we don't want to run it unless we're actually near
+            // a player.
+            chunkProviderServer.f_8332_.execute(() -> {
+               if (!LevelChunk.this.areNeighboursLoaded(1)) {
+                  return;
+               }
+               LevelChunk.this.m_62812_();
+               if (!LevelChunk.this.areNeighboursLoaded(1)) {
+                  return;
+               }
+               chunkMap.playerChunkManager.onChunkSendReady(this.f_187604_.f_45578_, this.f_187604_.f_45579_);
+            });
+         }
+         // Paper end - replace old player chunk loading system
+      }
+      // Paper end - no-tick view distance
+   }
+
+   public final boolean isAnyNeighborsLoaded() {
+      return neighbourChunksLoadedBitset != 0;
+   }
+   public final boolean areNeighboursLoaded(final int radius) {
+      return LevelChunk.areNeighboursLoaded(this.neighbourChunksLoadedBitset, radius);
+   }
+
+   public static boolean areNeighboursLoaded(final long bitset, final int radius) {
+      // index = relativeX + (relativeZ * (NEIGHBOUR_CACHE_RADIUS * 2 + 1)) + (NEIGHBOUR_CACHE_RADIUS + NEIGHBOUR_CACHE_RADIUS * ((NEIGHBOUR_CACHE_RADIUS * 2 + 1)))
+      switch (radius) {
+         case 0: {
+            return (bitset & (1L << getNeighbourIndex(0, 0))) != 0;
+         }
+         case 1: {
+            long mask = 0L;
+            for (int dx = -1; dx <= 1; ++dx) {
+               for (int dz = -1; dz <= 1; ++dz) {
+                  mask |= (1L << getNeighbourIndex(dx, dz));
+               }
+            }
+            return (bitset & mask) == mask;
+         }
+         case 2: {
+            long mask = 0L;
+            for (int dx = -2; dx <= 2; ++dx) {
+               for (int dz = -2; dz <= 2; ++dz) {
+                  mask |= (1L << getNeighbourIndex(dx, dz));
+               }
+            }
+            return (bitset & mask) == mask;
+         }
+         case 3: {
+            long mask = 0L;
+            for (int dx = -3; dx <= 3; ++dx) {
+               for (int dz = -3; dz <= 3; ++dz) {
+                  mask |= (1L << getNeighbourIndex(dx, dz));
+               }
+            }
+            return (bitset & mask) == mask;
+         }
+
+         default:
+            throw new IllegalArgumentException("Radius not recognized: " + radius);
+      }
+   }
+   // Paper end
+
    public LevelChunk(Level p_196854_, ChunkPos p_196855_, UpgradeData p_196856_, LevelChunkTicks<Block> p_196857_, LevelChunkTicks<Fluid> p_196858_, long p_196859_, @Nullable LevelChunkSection[] p_196860_, @Nullable LevelChunk.PostLoadProcessor p_196861_, @Nullable BlendingData p_196862_) {
       super(p_196855_, p_196856_, p_196854_, p_196854_.m_5962_().m_175515_(Registry.f_122885_), p_196859_, p_196860_, p_196862_);
       this.f_62776_ = p_196854_;
@@ -96,6 +_,7 @@
       this.f_62791_ = p_196861_;
       this.f_62784_ = p_196857_;
       this.f_187943_ = p_196858_;
+      this.capProvider.initInternal();
    }
 
    public LevelChunk(ServerLevel p_196850_, ProtoChunk p_196851_, @Nullable LevelChunk.PostLoadProcessor p_196852_) {
@@ -237,14 +_,14 @@
             boolean flag2 = blockstate.m_155947_();
             if (!this.f_62776_.f_46443_) {
                blockstate.m_60753_(this.f_62776_, p_62865_, p_62866_, p_62867_);
-            } else if (!blockstate.m_60713_(block) && flag2) {
+         } else if ((!blockstate.m_60713_(block) || !p_62866_.m_155947_()) && flag2) {
                this.m_8114_(p_62865_);
             }
 
             if (!levelchunksection.m_62982_(j, k, l).m_60713_(block)) {
                return null;
             } else {
-               if (!this.f_62776_.f_46443_) {
+            if (!this.f_62776_.f_46443_ && !this.f_62776_.captureBlockSnapshots) {
                   p_62866_.m_60696_(this.f_62776_, p_62865_, blockstate, p_62867_);
                }
 
@@ -287,6 +_,10 @@
    @Nullable
    public BlockEntity m_5685_(BlockPos p_62868_, LevelChunk.EntityCreationType p_62869_) {
       BlockEntity blockentity = this.f_187610_.get(p_62868_);
+      if (blockentity != null && blockentity.m_58901_()) {
+         f_187610_.remove(p_62868_);
+         blockentity = null;
+      }
       if (blockentity == null) {
          CompoundTag compoundtag = this.f_187609_.remove(p_62868_);
          if (compoundtag != null) {
@@ -304,9 +_,6 @@
                this.m_142170_(blockentity);
             }
          }
-      } else if (blockentity.m_58901_()) {
-         this.f_187610_.remove(p_62868_);
-         return null;
       }
 
       return blockentity;
@@ -322,6 +_,7 @@
          }
 
          this.m_156406_(p_156391_);
+         p_156391_.onLoad();
       }
 
    }
@@ -361,9 +_,14 @@
    public CompoundTag m_8051_(BlockPos p_62932_) {
       BlockEntity blockentity = this.m_7702_(p_62932_);
       if (blockentity != null && !blockentity.m_58901_()) {
+         try {
          CompoundTag compoundtag1 = blockentity.m_187480_();
          compoundtag1.m_128379_("keepPacked", false);
          return compoundtag1;
+         } catch (Exception e) {
+            f_62771_.error("A BlockEntity type {} has thrown an exception trying to write state. It will not persist, Report this to the mod author", blockentity.getClass().getName(), e);
+            return null;
+         }
       } else {
          CompoundTag compoundtag = this.f_187609_.get(p_62932_);
          if (compoundtag != null) {
@@ -378,6 +_,13 @@
    public void m_8114_(BlockPos p_62919_) {
       if (this.m_156370_()) {
          BlockEntity blockentity = this.f_187610_.remove(p_62919_);
+
+         // CraftBukkit start - SPIGOT-5561: Also remove from pending map
+         if (!f_187609_.isEmpty()) {
+            f_187609_.remove(p_62919_);
+         }
+         // CraftBukkit end
+
          if (blockentity != null) {
             Level level = this.f_62776_;
             if (level instanceof ServerLevel) {
@@ -445,7 +_,7 @@
       p_187974_.accept((p_187968_, p_187969_, p_187970_) -> {
          BlockEntity blockentity = this.m_5685_(p_187968_, LevelChunk.EntityCreationType.IMMEDIATE);
          if (blockentity != null && p_187970_ != null && blockentity.m_58903_() == p_187969_) {
-            blockentity.m_142466_(p_187970_);
+            blockentity.handleUpdateTag(p_187970_);
          }
 
       });
@@ -465,11 +_,13 @@
 
    public Stream<BlockPos> m_6267_() {
       return StreamSupport.stream(BlockPos.m_121976_(this.f_187604_.m_45604_(), this.m_141937_(), this.f_187604_.m_45605_(), this.f_187604_.m_45608_(), this.m_151558_() - 1, this.f_187604_.m_45609_()).spliterator(), false).filter((p_187990_) -> {
-         return this.m_8055_(p_187990_).m_60791_() != 0;
+         return this.m_8055_(p_187990_).getLightEmission(m_62953_(), p_187990_) != 0;
       });
    }
 
+   public boolean isPostProcessingDone; // Paper - replace chunk loader system
    public void m_62812_() {
+      try { // Paper - replace chunk loader system
       ChunkPos chunkpos = this.m_7697_();
 
       for(int i = 0; i < this.f_187602_.length; ++i) {
@@ -498,6 +_,11 @@
 
       this.f_187609_.clear();
       this.f_187606_.m_63341_(this);
+      } finally { // Paper start - replace chunk loader system
+         this.isPostProcessingDone = true;
+         ((ServerChunkCache) this.f_62776_.m_7726_()).f_8325_.playerChunkManager.onChunkPostProcessing(this.f_187604_.f_45578_, this.f_187604_.f_45579_);
+      }
+      // Paper end - replace chunk loader system
    }
 
    @Nullable
@@ -553,6 +_,7 @@
    }
 
    public void m_187957_() {
+      this.f_187610_.values().forEach(BlockEntity::onChunkUnloaded);
       this.f_187610_.values().forEach(BlockEntity::m_7651_);
       this.f_187610_.clear();
       this.f_156362_.values().forEach((p_187966_) -> {
@@ -562,6 +_,7 @@
    }
 
    public void m_156369_() {
+      this.f_62776_.addFreshBlockEntities(this.f_187610_.values());
       this.f_187610_.values().forEach((p_187988_) -> {
          Level level = this.f_62776_;
          if (level instanceof ServerLevel serverlevel) {
@@ -619,6 +_,41 @@
       this.f_196848_ = p_196865_;
    }
 
+   // FORGE START
+   private final net.minecraftforge.common.capabilities.CapabilityProvider.AsField<LevelChunk> capProvider = new net.minecraftforge.common.capabilities.CapabilityProvider.AsField<>(LevelChunk.class, this);
+
+   @org.jetbrains.annotations.NotNull
+   @Override
+   public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(@org.jetbrains.annotations.NotNull net.minecraftforge.common.capabilities.Capability<T> cap, @org.jetbrains.annotations.Nullable net.minecraft.core.Direction side)
+   {
+      return capProvider.getCapability(cap, side);
+   }
+
+   @Override
+   public boolean areCapsCompatible(net.minecraftforge.common.capabilities.CapabilityProvider<LevelChunk> other)
+   {
+      return capProvider.areCapsCompatible(other);
+   }
+
+   @Override
+   public boolean areCapsCompatible(@org.jetbrains.annotations.Nullable net.minecraftforge.common.capabilities.CapabilityDispatcher other)
+   {
+      return capProvider.areCapsCompatible(other);
+   }
+
+   @Override
+   public void invalidateCaps()
+   {
+      capProvider.invalidateCaps();
+   }
+
+   @Override
+   public void reviveCaps()
+   {
+      capProvider.reviveCaps();
+   }
+   // FORGE END
+
    class BoundTickingBlockEntity<T extends BlockEntity> implements TickingBlockEntity {
       private final T f_156428_;
       private final BlockEntityTicker<T> f_156429_;
@@ -635,6 +_,7 @@
             if (LevelChunk.this.m_156410_(blockpos)) {
                try {
                   ProfilerFiller profilerfiller = LevelChunk.this.f_62776_.m_46473_();
+                  net.minecraftforge.server.timings.TimeTracker.BLOCK_ENTITY_UPDATE.trackStart(f_156428_);
                   profilerfiller.m_6521_(this::m_142280_);
                   BlockState blockstate = LevelChunk.this.m_8055_(blockpos);
                   if (this.f_156428_.m_58903_().m_155262_(blockstate)) {
@@ -650,6 +_,12 @@
                   CrashReport crashreport = CrashReport.m_127521_(throwable, "Ticking block entity");
                   CrashReportCategory crashreportcategory = crashreport.m_127514_("Block entity being ticked");
                   this.f_156428_.m_58886_(crashreportcategory);
+
+                  if (net.minecraftforge.common.ForgeConfig.SERVER.removeErroringBlockEntities.get()) {
+                     f_62771_.error("{}", crashreport.m_127526_());
+                     f_156428_.m_7651_();
+                     LevelChunk.this.m_8114_(f_156428_.m_58899_());
+                  } else
                   throw new ReportedException(crashreport);
                }
             }
@@ -678,6 +_,34 @@
       IMMEDIATE,
       QUEUED,
       CHECK;
+   }
+
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link net.minecraft.world.level.chunk.storage.ChunkSerializer}.
+    */
+   @java.lang.Deprecated
+   @org.jetbrains.annotations.Nullable
+   public final CompoundTag writeCapsToNBT() {
+      return capProvider.serializeInternal();
+   }
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link net.minecraft.world.level.chunk.storage.ChunkSerializer}.
+    *
+    */
+   @java.lang.Deprecated
+   public final void readCapsFromNBT(CompoundTag tag) {
+      capProvider.deserializeInternal(tag);
+   }
+
+   @Override
+   public Level getWorldForge() {
+      return m_62953_();
    }
 
    @FunctionalInterface
