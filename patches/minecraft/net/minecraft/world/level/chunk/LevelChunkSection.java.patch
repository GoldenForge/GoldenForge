--- a/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -20,12 +_,14 @@
    public static final int f_156457_ = 4096;
    public static final int f_187994_ = 2;
    private final int f_62968_;
-   private short f_62969_;
+   public short f_62969_;
    private short f_62970_;
    private short f_62971_;
-   private final PalettedContainer<BlockState> f_62972_;
+   public final PalettedContainer<BlockState> f_62972_;
    private PalettedContainerRO<Holder<Biome>> f_187995_;
 
+   public final com.destroystokyo.paper.util.maplist.IBlockDataList tickingList = new com.destroystokyo.paper.util.maplist.IBlockDataList(); // Paper
+
    public LevelChunkSection(int p_238255_, PalettedContainer<BlockState> p_238256_, PalettedContainerRO<Holder<Biome>> p_238257_) {
       this.f_62968_ = m_156458_(p_238255_);
       this.f_62972_ = p_238256_;
@@ -39,6 +_,110 @@
       this.f_187995_ = new PalettedContainer<>(p_188002_.m_206115_(), p_188002_.m_206081_(Biomes.f_48202_), PalettedContainer.Strategy.f_188138_);
    }
 
+   // Paper start
+   protected int specialCollidingBlocks;
+   // blockIndex = x | (z << 4) | (y << 8)
+   private long[] knownBlockCollisionData;
+
+   private long[] initKnownDataField() {
+      return this.knownBlockCollisionData = new long[16 * 16 * 16 * 2 / Long.SIZE];
+   }
+
+   public final boolean hasSpecialCollidingBlocks() {
+      return this.specialCollidingBlocks != 0;
+   }
+
+   public static long getKnownBlockInfo(final int blockIndex, final long value) {
+      final int valueShift = (blockIndex & (Long.SIZE / 2 - 1));
+
+      return (value >>> (valueShift << 1)) & 0b11L;
+   }
+
+   public final long getKnownBlockInfo(final int blockIndex) {
+      if (this.knownBlockCollisionData == null) {
+         return 0L;
+      }
+
+      final int arrayIndex = (blockIndex >>> (6 - 1)); // blockIndex / (64/2)
+      final int valueShift = (blockIndex & (Long.SIZE / 2 - 1));
+
+      final long value = this.knownBlockCollisionData[arrayIndex];
+
+      return (value >>> (valueShift << 1)) & 0b11L;
+   }
+
+   // important detail: this returns 32 values, one for localZ = localZ & (~1) and one for localZ = localZ | 1
+   // the even localZ is the lower 32 bits, the odd is the upper 32 bits
+   public final long getKnownBlockInfoHorizontalRaw(final int localY, final int localZ) {
+      if (this.knownBlockCollisionData == null) {
+         return 0L;
+      }
+
+      final int horizontalIndex = (localZ << 4) | (localY << 8);
+      return this.knownBlockCollisionData[horizontalIndex >>> (6 - 1)];
+   }
+
+   private void initBlockCollisionData() {
+      this.specialCollidingBlocks = 0;
+      // In 1.18 all sections will be initialised, whether or not they have blocks (fucking stupid btw)
+      // This means we can't aggressively initialise the backing long[], or else memory usage will just skyrocket.
+      // So only init if we contain non-empty blocks.
+      if (this.f_62969_ == 0) {
+         this.knownBlockCollisionData = null;
+         return;
+      }
+      this.initKnownDataField();
+      for (int index = 0; index < (16 * 16 * 16); ++index) {
+         final BlockState state = this.f_62972_.m_63085_(index);
+         this.setKnownBlockInfo(index, state);
+         if (io.papermc.paper.util.CollisionUtil.isSpecialCollidingBlock(state)) {
+            ++this.specialCollidingBlocks;
+         }
+      }
+   }
+
+   // only use for initBlockCollisionData
+   private void setKnownBlockInfo(final int blockIndex, final BlockState blockState) {
+      final int arrayIndex = (blockIndex >>> (6 - 1)); // blockIndex / (64/2)
+      final int valueShift = (blockIndex & (Long.SIZE / 2 - 1)) << 1;
+
+      long value = this.knownBlockCollisionData[arrayIndex];
+
+      value &= ~(0b11L << valueShift);
+      value |= blockState.getBlockCollisionBehavior() << valueShift;
+
+      this.knownBlockCollisionData[arrayIndex] = value;
+   }
+
+   public void updateKnownBlockInfo(final int blockIndex, final BlockState from, final BlockState to) {
+      if (io.papermc.paper.util.CollisionUtil.isSpecialCollidingBlock(from)) {
+         --this.specialCollidingBlocks;
+      }
+      if (io.papermc.paper.util.CollisionUtil.isSpecialCollidingBlock(to)) {
+         ++this.specialCollidingBlocks;
+      }
+
+      if (this.f_62969_ == 0) {
+         this.knownBlockCollisionData = null;
+         return;
+      }
+
+      if (this.knownBlockCollisionData == null) {
+         this.initKnownDataField();
+      }
+
+      final int arrayIndex = (blockIndex >>> (6 - 1)); // blockIndex / (64/2)
+      final int valueShift = (blockIndex & (Long.SIZE / 2 - 1)) << 1;
+
+      long value = this.knownBlockCollisionData[arrayIndex];
+
+      value &= ~(0b11L << valueShift);
+      value |= to.getBlockCollisionBehavior() << valueShift;
+
+      this.knownBlockCollisionData[arrayIndex] = value;
+   }
+   // Paper end
+
    public static int m_156458_(int p_156459_) {
       return p_156459_ << 4;
    }
@@ -77,6 +_,9 @@
          --this.f_62969_;
          if (blockstate.m_60823_()) {
             --this.f_62970_;
+            // Paper start
+            this.tickingList.remove(p_62992_, p_62993_, p_62994_);
+            // Paper end
          }
       }
 
@@ -88,6 +_,9 @@
          ++this.f_62969_;
          if (p_62995_.m_60823_()) {
             ++this.f_62970_;
+            // Paper start
+            this.tickingList.add(p_62992_, p_62993_, p_62994_, p_62995_);
+            // Paper end
          }
       }
 
@@ -95,6 +_,7 @@
          ++this.f_62971_;
       }
 
+      this.updateKnownBlockInfo(p_62992_ | (p_62994_ << 4) | (p_62993_ << 8), blockstate, p_62995_); // Paper
       return blockstate;
    }
 
@@ -119,35 +_,34 @@
    }
 
    public void m_63018_() {
-      class BlockCounter implements PalettedContainer.CountConsumer<BlockState> {
-         public int f_204437_;
-         public int f_204438_;
-         public int f_204439_;
-
-         public void m_63144_(BlockState p_204444_, int p_204445_) {
-            FluidState fluidstate = p_204444_.m_60819_();
-            if (!p_204444_.m_60795_()) {
-               this.f_204437_ += p_204445_;
-               if (p_204444_.m_60823_()) {
-                  this.f_204438_ += p_204445_;
-               }
-            }
-
-            if (!fluidstate.m_76178_()) {
-               this.f_204437_ += p_204445_;
-               if (fluidstate.m_76187_()) {
-                  this.f_204439_ += p_204445_;
-               }
-            }
-
-         }
+      // Paper start - unfuck this
+      this.tickingList.clear();
+      this.f_62969_ = 0;
+      this.f_62970_ = 0;
+      this.f_62971_ = 0;
+      if (this.m_63002_((BlockState state) -> !state.m_60795_() || !state.m_60819_().m_76178_())) { // Folia - do not run forEachLocation on clearly empty sections
+         this.f_62972_.forEachLocation((BlockState iblockdata, int i) -> {
+            FluidState fluid = iblockdata.m_60819_();
+
+            if (!iblockdata.m_60795_()) {
+               this.f_62969_ = (short) (this.f_62969_ + 1);
+               if (iblockdata.m_60823_()) {
+                  this.f_62970_ = (short) (this.f_62970_ + 1);
+                  this.tickingList.add(i, iblockdata);
+               }
+            }
+
+            if (!fluid.m_76178_()) {
+               this.f_62969_ = (short) (this.f_62969_ + 1);
+               if (fluid.m_76187_()) {
+                  this.f_62971_ = (short) (this.f_62971_ + 1);
+               }
+            }
+
+         });
       }
-
-      BlockCounter levelchunksection$1blockcounter = new BlockCounter();
-      this.f_62972_.m_63099_(levelchunksection$1blockcounter);
-      this.f_62969_ = (short)levelchunksection$1blockcounter.f_204437_;
-      this.f_62970_ = (short)levelchunksection$1blockcounter.f_204438_;
-      this.f_62971_ = (short)levelchunksection$1blockcounter.f_204439_;
+      // Paper end
+      this.initBlockCollisionData(); // Paper
    }
 
    public PalettedContainer<BlockState> m_63019_() {
