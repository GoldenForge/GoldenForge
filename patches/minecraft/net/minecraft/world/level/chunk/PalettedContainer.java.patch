--- a/net/minecraft/world/level/chunk/PalettedContainer.java
+++ b/net/minecraft/world/level/chunk/PalettedContainer.java
@@ -1,13 +_,14 @@
 package net.minecraft.world.level.chunk;
 
+import com.abdelaziz.canary.common.world.chunk.CanaryHashPalette;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
-import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;
 import it.unimi.dsi.fastutil.ints.IntArraySet;
 import it.unimi.dsi.fastutil.ints.IntSet;
 import java.util.Arrays;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.function.Consumer;
 import java.util.function.IntUnaryOperator;
@@ -24,21 +_,25 @@
 import net.minecraft.util.ZeroBitStorage;
 
 public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainerRO<T> {
+   // TODO: forceBits-parametered setBits function. -C
    private static final int f_188031_ = 0;
    private final PaletteResize<T> f_63070_ = (p_238275_, p_238276_) -> {
       return 0;
    };
    private final IdMap<T> f_63071_;
-   private volatile PalettedContainer.Data<T> f_188032_;
-   private final PalettedContainer.Strategy f_188033_;
+   public volatile PalettedContainer.Data<T> f_188032_;
+   public final PalettedContainer.Strategy f_188033_;
    private final ThreadingDetector f_199441_ = new ThreadingDetector("PalettedContainer");
 
+   private static final ThreadLocal<short[]> CACHED_ARRAY_4096 = ThreadLocal.withInitial(() -> new short[4096]);
+   private static final ThreadLocal<short[]> CACHED_ARRAY_64 = ThreadLocal.withInitial(() -> new short[64]);
+
    public void m_63084_() {
-      this.f_199441_.m_199416_();
+      //this.threadingDetector.checkAndLock();
    }
 
    public void m_63120_() {
-      this.f_199441_.m_199422_();
+      //this.threadingDetector.checkAndUnlock();
    }
 
    public static <T> Codec<PalettedContainer<T>> m_238371_(IdMap<T> p_238372_, Codec<T> p_238373_, PalettedContainer.Strategy p_238374_, T p_238375_) {
@@ -89,7 +_,7 @@
       return p_188052_ != null && configuration.equals(p_188052_.f_188100_()) ? p_188052_ : configuration.m_188091_(this.f_63071_, this, this.f_188033_.m_188144_());
    }
 
-   public int m_7248_(int p_63142_, T p_63143_) {
+   public synchronized int m_7248_(int p_63142_, T p_63143_) {
       PalettedContainer.Data<T> data = this.f_188032_;
       PalettedContainer.Data<T> data1 = this.m_188051_(data, p_63142_);
       data1.m_188111_(data.f_188102_, data.f_188101_);
@@ -114,7 +_,7 @@
       return this.m_63096_(this.f_188033_.m_188145_(p_63128_, p_63129_, p_63130_), p_63131_);
    }
 
-   private T m_63096_(int p_63097_, T p_63098_) {
+   private synchronized T m_63096_(int p_63097_, T p_63098_) {
       int i = this.f_188032_.f_188102_.m_6796_(p_63098_);
       int j = this.f_188032_.f_188101_.m_13516_(p_63097_, i);
       return this.f_188032_.f_188102_.m_5795_(j);
@@ -131,7 +_,7 @@
 
    }
 
-   private void m_63132_(int p_63133_, T p_63134_) {
+   private synchronized void m_63132_(int p_63133_, T p_63134_) {
       int i = this.f_188032_.f_188102_.m_6796_(p_63134_);
       this.f_188032_.f_188101_.m_13524_(p_63133_, i);
    }
@@ -140,7 +_,7 @@
       return this.m_63085_(this.f_188033_.m_188145_(p_63088_, p_63089_, p_63090_));
    }
 
-   protected T m_63085_(int p_63086_) {
+   public T m_63085_(int p_63086_) {
       PalettedContainer.Data<T> data = this.f_188032_;
       return data.f_188102_.m_5795_(data.f_188101_.m_13514_(p_63086_));
    }
@@ -154,7 +_,7 @@
       });
    }
 
-   public void m_63118_(FriendlyByteBuf p_63119_) {
+   public synchronized void m_63118_(FriendlyByteBuf p_63119_) {
       this.m_63084_();
 
       try {
@@ -169,7 +_,7 @@
 
    }
 
-   public void m_63135_(FriendlyByteBuf p_63136_) {
+   public synchronized void m_63135_(FriendlyByteBuf p_63136_) {
       this.m_63084_();
 
       try {
@@ -219,33 +_,62 @@
       return DataResult.success(new PalettedContainer<>(p_188068_, p_188069_, configuration, bitstorage, list));
    }
 
-   public PalettedContainerRO.PackedData<T> m_188064_(IdMap<T> p_188065_, PalettedContainer.Strategy p_188066_) {
-      this.m_63084_();
-
-      PalettedContainerRO.PackedData palettedcontainerro$packeddata;
-      try {
-         HashMapPalette<T> hashmappalette = new HashMapPalette<>(p_188065_, this.f_188032_.f_188101_.m_144604_(), this.f_63070_);
-         int i = p_188066_.m_188144_();
-         int[] aint = new int[i];
-         this.f_188032_.f_188101_.m_197970_(aint);
-         m_198189_(aint, (p_198178_) -> {
-            return hashmappalette.m_6796_(this.f_188032_.f_188102_.m_5795_(p_198178_));
-         });
-         int j = p_188066_.m_188151_(p_188065_, hashmappalette.m_62680_());
-         Optional<LongStream> optional;
-         if (j != 0) {
-            SimpleBitStorage simplebitstorage = new SimpleBitStorage(j, i, aint);
-            optional = Optional.of(Arrays.stream(simplebitstorage.m_13513_()));
+   public synchronized PalettedContainerRO.PackedData<T> m_188064_(IdMap<T> p_188065_, PalettedContainer.Strategy p_188066_) {
+      // The palette that will be serialized
+      CanaryHashPalette<T> hashPalette = null;
+      Optional<LongStream> data = Optional.empty();
+      List<T> elements = null;
+
+      final Palette<T> palette = this.f_188032_.f_188102_();
+      final BitStorage storage = this.f_188032_.f_188101_();
+      if (storage instanceof ZeroBitStorage || palette.m_62680_() == 1) {
+         // If the palette only contains one entry, don't attempt to repack it.
+         elements = List.of(palette.m_5795_(0));
+      } else if (palette instanceof CanaryHashPalette<T> lithiumHashPalette) {
+         hashPalette = lithiumHashPalette;
+      }
+
+      if (elements == null) {
+         CanaryHashPalette<T> compactedPalette = new CanaryHashPalette<>(p_188065_, storage.m_144604_(), this.f_63070_);
+         short[] array = this.getOrCreate(p_188066_.m_188144_());
+
+         ((SimpleBitStorage) storage).compact(this.f_188032_.f_188102_(), compactedPalette, array);
+
+         // If the palette didn't change during compaction, do a simple copy of the data array
+         if (hashPalette != null && hashPalette.m_62680_() == compactedPalette.m_62680_() && storage.m_144604_() == p_188066_.m_188151_(p_188065_, hashPalette.m_62680_())) { // paletteSize can de-sync from palette - see https://github.com/CaffeineMC/lithium-fabric/issues/279
+            data = this.asOptional(storage.m_13513_().clone());
+            elements = hashPalette.getElements();
          } else {
-            optional = Optional.empty();
+            int bits = p_188066_.m_188151_(p_188065_, compactedPalette.m_62680_());
+            if (bits != 0) {
+               // Re-pack the integer array as the palette has changed size
+               SimpleBitStorage copy = new SimpleBitStorage(bits, array.length);
+               for (int i = 0; i < array.length; ++i) {
+                  copy.m_13524_(i, array[i]);
+               }
+
+               // We don't need to clone the data array as we are the sole owner of it
+               data = this.asOptional(copy.m_13513_());
+            }
+
+            elements = compactedPalette.getElements();
          }
-
-         palettedcontainerro$packeddata = new PalettedContainerRO.PackedData<>(hashmappalette.m_187917_(), optional);
-      } finally {
-         this.m_63120_();
       }
 
-      return palettedcontainerro$packeddata;
+      this.m_63120_();
+      return new PalettedContainerRO.PackedData<>(elements, data);
+   }
+
+   private Optional<LongStream> asOptional(long[] data) {
+      return Optional.of(Arrays.stream(data));
+   }
+
+   private short[] getOrCreate(int size) {
+      return switch (size) {
+         case 64 -> CACHED_ARRAY_64.get();
+         case 4096 -> CACHED_ARRAY_4096.get();
+         default -> new short[size];
+      };
    }
 
    private static <T> void m_198189_(int[] p_198190_, IntUnaryOperator p_198191_) {
@@ -281,17 +_,25 @@
    }
 
    public void m_63099_(PalettedContainer.CountConsumer<T> p_63100_) {
-      if (this.f_188032_.f_188102_.m_62680_() == 1) {
-         p_63100_.m_63144_(this.f_188032_.f_188102_.m_5795_(0), this.f_188032_.f_188101_.m_13521_());
-      } else {
-         Int2IntOpenHashMap int2intopenhashmap = new Int2IntOpenHashMap();
-         this.f_188032_.f_188101_.m_13519_((p_238269_) -> {
-            int2intopenhashmap.addTo(p_238269_, 1);
-         });
-         int2intopenhashmap.int2IntEntrySet().forEach((p_238271_) -> {
-            p_63100_.m_63144_(this.f_188032_.f_188102_.m_5795_(p_238271_.getIntKey()), p_238271_.getIntValue());
-         });
-      }
+      int len = this.f_188032_.f_188102_().m_62680_();
+
+      // Do not allocate huge arrays if we're using a large palette
+      if (len > 4096) {
+         return;
+      }
+
+      short[] counts = new short[len];
+
+      this.f_188032_.f_188101_().m_13519_(i -> counts[i]++);
+
+      for (int i = 0; i < counts.length; i++) {
+         T obj = this.f_188032_.f_188102_().m_5795_(i);
+
+         if (obj != null) {
+            p_63100_.m_63144_(obj, counts[i]);
+         }
+      }
+
    }
 
    static record Configuration<T>(Palette.Factory f_188085_, int f_188086_) {
@@ -302,34 +_,88 @@
       }
    }
 
+   // Paper start
+   public void forEachLocation(PalettedContainer.CountConsumer<T> consumer) {
+      this.f_188032_.f_188101_.forEach((int location, int data) -> {
+         consumer.m_63144_(this.f_188032_.f_188102_.m_5795_(data), location);
+      });
+   }
+   // Paper end
+
    @FunctionalInterface
    public interface CountConsumer<T> {
       void m_63144_(T p_63145_, int p_63146_);
    }
 
-   static record Data<T>(PalettedContainer.Configuration<T> f_188100_, BitStorage f_188101_, Palette<T> f_188102_) {
-      public void m_188111_(Palette<T> p_188112_, BitStorage p_188113_) {
-         for(int i = 0; i < p_188113_.m_13521_(); ++i) {
-            T t = p_188112_.m_5795_(p_188113_.m_13514_(i));
-            this.f_188101_.m_13524_(i, this.f_188102_.m_6796_(t));
-         }
-
-      }
-
-      public int m_188107_() {
-         return 1 + this.f_188102_.m_6429_() + FriendlyByteBuf.m_130053_(this.f_188101_.m_13521_()) + this.f_188101_.m_13513_().length * 8;
-      }
-
-      public void m_188114_(FriendlyByteBuf p_188115_) {
-         p_188115_.writeByte(this.f_188101_.m_144604_());
-         this.f_188102_.m_5678_(p_188115_);
-         p_188115_.m_130091_(this.f_188101_.m_13513_());
-      }
-
-      public PalettedContainer.Data<T> m_238361_() {
-         return new PalettedContainer.Data<>(this.f_188100_, this.f_188101_.m_199833_(), this.f_188102_.m_199814_());
-      }
-   }
+    public static final class Data<T> {
+        private final Configuration<T> f_188100_;
+        private final BitStorage f_188101_;
+        public final Palette<T> f_188102_;
+
+        public Data(Configuration<T> f_188100_, BitStorage f_188101_, Palette<T> f_188102_) {
+            this.f_188100_ = f_188100_;
+            this.f_188101_ = f_188101_;
+            this.f_188102_ = f_188102_;
+        }
+
+        public void m_188111_(Palette<T> p_188112_, BitStorage p_188113_) {
+            for (int i = 0; i < p_188113_.m_13521_(); ++i) {
+                T t = p_188112_.m_5795_(p_188113_.m_13514_(i));
+                this.f_188101_.m_13524_(i, this.f_188102_.m_6796_(t));
+            }
+
+        }
+
+        public int m_188107_() {
+            return 1 + this.f_188102_.m_6429_() + FriendlyByteBuf.m_130053_(this.f_188101_.m_13521_()) + this.f_188101_.m_13513_().length * 8;
+        }
+
+        public void m_188114_(FriendlyByteBuf p_188115_) {
+            p_188115_.writeByte(this.f_188101_.m_144604_());
+            this.f_188102_.m_5678_(p_188115_);
+            p_188115_.m_130091_(this.f_188101_.m_13513_());
+        }
+
+        public Data<T> m_238361_() {
+            return new Data<>(this.f_188100_, this.f_188101_.m_199833_(), this.f_188102_.m_199814_());
+        }
+
+        public Configuration<T> f_188100_() {
+            return f_188100_;
+        }
+
+        public BitStorage f_188101_() {
+            return f_188101_;
+        }
+
+        public Palette<T> f_188102_() {
+            return f_188102_;
+        }
+
+        @Override
+        public boolean equals(Object p_188120_) {
+            if (p_188120_ == this) return true;
+            if (p_188120_ == null || p_188120_.getClass() != this.getClass()) return false;
+            var that = (Data) p_188120_;
+            return Objects.equals(this.f_188100_, that.f_188100_) &&
+                    Objects.equals(this.f_188101_, that.f_188101_) &&
+                    Objects.equals(this.f_188102_, that.f_188102_);
+        }
+
+        @Override
+        public int hashCode() {
+            return Objects.hash(f_188100_, f_188101_, f_188102_);
+        }
+
+        @Override
+        public String toString() {
+            return "Data[" +
+                    "configuration=" + f_188100_ + ", " +
+                    "storage=" + f_188101_ + ", " +
+                    "palette=" + f_188102_ + ']';
+        }
+
+    }
 
    public abstract static class Strategy {
       public static final Palette.Factory f_188134_ = SingleValuePalette::m_188213_;
