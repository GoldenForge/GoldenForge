--- a/net/minecraft/world/entity/ai/sensing/NearestBedSensor.java
+++ b/net/minecraft/world/entity/ai/sensing/NearestBedSensor.java
@@ -51,10 +_,31 @@
                return true;
             }
          };
-         Set<Pair<Holder<PoiType>, BlockPos>> set = poimanager.m_217983_((p_217819_) -> {
-            return p_217819_.m_203565_(PoiTypes.f_218060_);
-         }, predicate, p_26686_.m_20183_(), 48, PoiManager.Occupancy.ANY).collect(Collectors.toSet());
-         Path path = AcquirePoi.m_217097_(p_26686_, set);
+         // Paper start - optimise POI access
+         java.util.List<Pair<Holder<PoiType>, BlockPos>> poiposes = new java.util.ArrayList<>();
+         // don't ask me why it's unbounded. ask mojang.
+         io.papermc.paper.util.PoiAccess.findAnyPoiPositions(poimanager, type -> type.m_203565_(PoiTypes.f_218060_), predicate, p_26686_.m_20183_(), 48, PoiManager.Occupancy.ANY, false, Integer.MAX_VALUE, poiposes);
+         // Kaiiju start - await on async path processing
+         if (org.goldenforge.config.GoldenForgeConfig.Server.asyncPathProcessing.get()) {
+            Path possiblePath = AcquirePoi.m_217097_(p_26686_, new java.util.HashSet<>(poiposes));
+            dev.kaiijumc.kaiiju.path.AsyncPathProcessor.awaitProcessing(p_26686_, possiblePath, path -> {
+               // read canReach check
+               if ((path == null || !path.m_77403_()) && this.f_26677_ < 5) {
+                  this.f_26676_.long2LongEntrySet().removeIf((entry) -> entry.getLongValue() < this.f_26678_);
+                  return;
+               }
+               if (path == null) return;
+
+               BlockPos blockPos = path.m_77406_();
+               Optional<Holder<PoiType>> optional = poimanager.m_27177_(blockPos);
+               if (optional.isPresent()) {
+                  p_26686_.m_6274_().m_21879_(MemoryModuleType.f_26380_, blockPos);
+               }
+            });
+         } else {
+            // Kaiiju end
+         Path path = AcquirePoi.m_217097_(p_26686_, new java.util.HashSet<>(poiposes));
+         // Paper end - optimise POI access
          if (path != null && path.m_77403_()) {
             BlockPos blockpos = path.m_77406_();
             Optional<Holder<PoiType>> optional = poimanager.m_27177_(blockpos);
@@ -68,5 +_,6 @@
          }
 
       }
+      } // Kaiiju - async path processing
    }
 }
