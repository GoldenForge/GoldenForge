--- a/net/minecraft/world/entity/ai/village/poi/PoiManager.java
+++ b/net/minecraft/world/entity/ai/village/poi/PoiManager.java
@@ -2,10 +_,9 @@
 
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
-import it.unimi.dsi.fastutil.longs.Long2ByteMap;
-import it.unimi.dsi.fastutil.longs.Long2ByteOpenHashMap;
-import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
-import it.unimi.dsi.fastutil.longs.LongSet;
+import io.papermc.paper.util.MCUtil;
+import it.unimi.dsi.fastutil.longs.*;
+
 import java.nio.file.Path;
 import java.util.Comparator;
 import java.util.List;
@@ -38,13 +_,142 @@
 public class PoiManager extends SectionStorage<PoiSection> {
    public static final int f_148565_ = 6;
    public static final int f_148566_ = 1;
-   private final PoiManager.DistanceTracker f_27029_;
+  // private final PoiManager.DistanceTracker distanceTracker;
    private final LongSet f_27030_ = new LongOpenHashSet();
 
+   public final net.minecraft.server.level.ServerLevel world;
+   private final io.papermc.paper.util.misc.Delayed26WayDistancePropagator3D villageDistanceTracker = new io.papermc.paper.util.misc.Delayed26WayDistancePropagator3D();
+   static final int POI_DATA_SOURCE = 7;
+   public static int convertBetweenLevels(final int level) {
+      return POI_DATA_SOURCE - level;
+   }
+
+   protected void updateDistanceTracking(long section) {
+      if (this.m_27197_(section)) {
+         this.villageDistanceTracker.setSource(section, POI_DATA_SOURCE);
+      } else {
+         this.villageDistanceTracker.removeSource(section);
+      }
+   }
+
    public PoiManager(Path p_217869_, DataFixer p_217870_, boolean p_217871_, RegistryAccess p_217872_, LevelHeightAccessor p_217873_) {
       super(p_217869_, PoiSection::m_27295_, PoiSection::new, p_217870_, DataFixTypes.POI_CHUNK, p_217871_, p_217872_, p_217873_);
-      this.f_27029_ = new PoiManager.DistanceTracker();
-   }
+      //this.distanceTracker = new PoiManager.DistanceTracker();
+      this.world = (net.minecraft.server.level.ServerLevel)p_217873_; // Paper
+   }
+
+
+   // Paper start - actually unload POI data
+   private final java.util.TreeSet<QueuedUnload> queuedUnloads = new java.util.TreeSet<>();
+   private final Long2ObjectOpenHashMap<QueuedUnload> queuedUnloadsByCoordinate = new Long2ObjectOpenHashMap<>();
+
+   static final class QueuedUnload implements Comparable<QueuedUnload> {
+
+      private final long unloadTick;
+      private final long coordinate;
+
+      public QueuedUnload(long unloadTick, long coordinate) {
+         this.unloadTick = unloadTick;
+         this.coordinate = coordinate;
+      }
+
+      @Override
+      public int compareTo(QueuedUnload other) {
+         if (other.unloadTick == this.unloadTick) {
+            return Long.compare(this.coordinate, other.coordinate);
+         } else {
+            return Long.compare(this.unloadTick, other.unloadTick);
+         }
+      }
+
+      @Override
+      public int hashCode() {
+         int hash = 1;
+         hash = hash * 31 + Long.hashCode(this.unloadTick);
+         hash = hash * 31 + Long.hashCode(this.coordinate);
+         return hash;
+      }
+
+      @Override
+      public boolean equals(Object obj) {
+         if (obj == null || obj.getClass() != QueuedUnload.class) {
+            return false;
+         }
+         QueuedUnload other = (QueuedUnload)obj;
+         return other.unloadTick == this.unloadTick && other.coordinate == this.coordinate;
+      }
+   }
+
+   long determineDelay(long coordinate) {
+      if (this.isEmpty(coordinate)) {
+         return 5 * 60 * 20;
+      } else {
+         return 60 * 20;
+      }
+   }
+
+   public void queueUnload(long coordinate, long minTarget) {
+      QueuedUnload unload = new QueuedUnload(minTarget + this.determineDelay(coordinate), coordinate);
+      QueuedUnload existing = this.queuedUnloadsByCoordinate.put(coordinate, unload);
+      if (existing != null) {
+         this.queuedUnloads.remove(existing);
+      }
+      this.queuedUnloads.add(unload);
+   }
+
+   public void dequeueUnload(long coordinate) {
+      QueuedUnload unload = this.queuedUnloadsByCoordinate.remove(coordinate);
+      if (unload != null) {
+         this.queuedUnloads.remove(unload);
+      }
+
+   }
+
+   public void pollUnloads(BooleanSupplier canSleepForTick) {
+      long currentTick = net.minecraft.server.MinecraftServer.currentTickLong;
+      net.minecraft.server.level.ServerChunkCache chunkProvider = this.world.m_7726_();
+      net.minecraft.server.level.ChunkMap playerChunkMap = chunkProvider.f_8325_;
+      // copied target determination from PlayerChunkMap
+
+      java.util.Iterator<QueuedUnload> iterator = this.queuedUnloads.iterator();
+      for (int i = 0; iterator.hasNext() && (i < 200 || this.queuedUnloads.size() > 2000 || canSleepForTick.getAsBoolean()); i++) {
+         QueuedUnload unload = iterator.next();
+         if (unload.unloadTick > currentTick) {
+            break;
+         }
+
+         long coordinate = unload.coordinate;
+
+         iterator.remove();
+         this.queuedUnloadsByCoordinate.remove(coordinate);
+
+         if (playerChunkMap.getUnloadingChunkHolder(MCUtil.getCoordinateX(coordinate), MCUtil.getCoordinateZ(coordinate)) != null
+                 || playerChunkMap.m_140174_(coordinate) != null) {
+            continue;
+         }
+
+         this.unloadData(coordinate);
+      }
+   }
+
+   @Override
+   public void unloadData(long coordinate) {
+      super.unloadData(coordinate);
+   }
+
+   @Override
+   protected void onUnload(long coordinate) {
+      this.f_27030_.remove(coordinate);
+      int chunkX = MCUtil.getCoordinateX(coordinate);
+      int chunkZ = MCUtil.getCoordinateZ(coordinate);
+      for (int section = this.f_156618_.m_151560_(); section < this.f_156618_.m_151561_(); ++section) {
+         long sectionPos = SectionPos.m_123209_(chunkX, section, chunkZ);
+         this.updateDistanceTracking(sectionPos);
+         //this.distanceTracker.runAllUpdates();
+      }
+   }
+
+   // Paper end - actually unload POI data
 
    public void m_217919_(BlockPos p_217920_, Holder<PoiType> p_217921_) {
       this.m_63827_(SectionPos.m_175568_(p_217920_)).m_218021_(p_217920_, p_217921_);
@@ -111,43 +_,62 @@
    }
 
    public Optional<BlockPos> m_27186_(Predicate<Holder<PoiType>> p_27187_, Predicate<BlockPos> p_27188_, BlockPos p_27189_, int p_27190_, PoiManager.Occupancy p_27191_) {
-      return this.m_27138_(p_27187_, p_27188_, p_27189_, p_27190_, p_27191_).findFirst();
+      // Paper start - re-route to faster logic
+      BlockPos ret = io.papermc.paper.util.PoiAccess.findAnyPoiPosition(this, p_27187_, p_27188_, p_27189_, p_27190_, p_27191_, false);
+      return Optional.ofNullable(ret);
+      // Paper end
    }
 
    public Optional<BlockPos> m_27192_(Predicate<Holder<PoiType>> p_27193_, BlockPos p_27194_, int p_27195_, PoiManager.Occupancy p_27196_) {
-      return this.m_27181_(p_27193_, p_27194_, p_27195_, p_27196_).map(PoiRecord::m_27257_).min(Comparator.comparingDouble((p_217977_) -> {
-         return p_217977_.m_123331_(p_27194_);
-      }));
+      // Paper start - re-route to faster logic
+      BlockPos ret = io.papermc.paper.util.PoiAccess.findClosestPoiDataPosition(this, p_27193_, null, p_27194_, p_27195_, p_27195_ * p_27195_, p_27196_, false);
+      return Optional.ofNullable(ret);
+      // Paper end - re-route to faster logic
    }
 
    public Optional<Pair<Holder<PoiType>, BlockPos>> m_218002_(Predicate<Holder<PoiType>> p_218003_, BlockPos p_218004_, int p_218005_, PoiManager.Occupancy p_218006_) {
-      return this.m_27181_(p_218003_, p_218004_, p_218005_, p_218006_).min(Comparator.comparingDouble((p_217909_) -> {
-         return p_217909_.m_27257_().m_123331_(p_218004_);
-      })).map((p_217959_) -> {
-         return Pair.of(p_217959_.m_218018_(), p_217959_.m_27257_());
-      });
+      // Paper start - re-route to faster logic
+      return Optional.ofNullable(io.papermc.paper.util.PoiAccess.findClosestPoiDataTypeAndPosition(
+              this, p_218003_, null, p_218004_, p_218005_, p_218005_ * p_218005_, p_218006_, false
+      ));
+      // Paper end - re-route to faster logic
    }
 
    public Optional<BlockPos> m_148658_(Predicate<Holder<PoiType>> p_148659_, Predicate<BlockPos> p_148660_, BlockPos p_148661_, int p_148662_, PoiManager.Occupancy p_148663_) {
-      return this.m_27181_(p_148659_, p_148661_, p_148662_, p_148663_).map(PoiRecord::m_27257_).filter(p_148660_).min(Comparator.comparingDouble((p_217918_) -> {
-         return p_217918_.m_123331_(p_148661_);
-      }));
+      // Paper start - re-route to faster logic
+      BlockPos ret = io.papermc.paper.util.PoiAccess.findClosestPoiDataPosition(this, p_148659_, p_148660_, p_148661_, p_148662_, p_148662_ * p_148662_, p_148663_, false);
+      return Optional.ofNullable(ret);
+      // Paper end - re-route to faster logic
    }
 
    public Optional<BlockPos> m_217946_(Predicate<Holder<PoiType>> p_217947_, BiPredicate<Holder<PoiType>, BlockPos> p_217948_, BlockPos p_217949_, int p_217950_) {
-      return this.m_27181_(p_217947_, p_217949_, p_217950_, PoiManager.Occupancy.HAS_SPACE).filter((p_217934_) -> {
-         return p_217948_.test(p_217934_.m_218018_(), p_217934_.m_27257_());
-      }).findFirst().map((p_217881_) -> {
-         p_217881_.m_27247_();
-         return p_217881_.m_27257_();
+      // Paper start - re-route to faster logic
+      final @javax.annotation.Nullable PoiRecord closest = io.papermc.paper.util.PoiAccess.findClosestPoiDataRecord(
+              this, p_217947_, p_217948_, p_217949_, p_217950_, p_217950_ * p_217950_, Occupancy.HAS_SPACE, false
+      );
+      return Optional.ofNullable(closest).map(poi -> {
+         // Paper end - re-route to faster logic
+         poi.m_27247_();
+         return poi.m_27257_();
       });
    }
 
    public Optional<BlockPos> m_217951_(Predicate<Holder<PoiType>> p_217952_, Predicate<BlockPos> p_217953_, PoiManager.Occupancy p_217954_, BlockPos p_217955_, int p_217956_, RandomSource p_217957_) {
-      List<PoiRecord> list = Util.m_214661_(this.m_27181_(p_217952_, p_217955_, p_217956_, p_217954_), p_217957_);
-      return list.stream().filter((p_217945_) -> {
-         return p_217953_.test(p_217945_.m_27257_());
-      }).findFirst().map(PoiRecord::m_27257_);
+      // Paper start - re-route to faster logic
+      List<PoiRecord> list = new java.util.ArrayList<>();
+      io.papermc.paper.util.PoiAccess.findAnyPoiRecords(
+              this, p_217952_, p_217953_, p_217955_, p_217956_, p_217954_, false, Integer.MAX_VALUE, list
+      );
+
+      // the old method shuffled the list and then tried to find the first element in it that
+      // matched positionPredicate, however we moved positionPredicate into the poi search. This means we can avoid a
+      // shuffle entirely, and just pick a random element from list
+      if (list.isEmpty()) {
+         return Optional.empty();
+      }
+
+      return Optional.of(list.get(p_217957_.m_188503_(list.size())).m_27257_());
+      // Paper end - re-route to faster logic
    }
 
    public boolean m_27154_(BlockPos p_27155_) {
@@ -180,8 +_,10 @@
    }
 
    public int m_27098_(SectionPos p_27099_) {
-      this.f_27029_.m_27203_();
-      return this.f_27029_.m_6172_(p_27099_.m_123252_());
+      this.villageDistanceTracker.propagateUpdates(); // Paper - replace distance tracking util
+      return convertBetweenLevels(this.villageDistanceTracker.getLevel(io.papermc.paper.util.CoordinateUtils.getChunkSectionKey(p_27099_))); // Paper - replace distance tracking util
+//      this.distanceTracker.runAllUpdates();
+//      return this.distanceTracker.getLevel(p_27099_.asLong());
    }
 
    boolean m_27197_(long p_27198_) {
@@ -194,17 +_,64 @@
    }
 
    public void m_6202_(BooleanSupplier p_27105_) {
-      super.m_6202_(p_27105_);
-      this.f_27029_.m_27203_();
-   }
+      // Paper start - async chunk io
+      while (!this.f_63775_.isEmpty() && p_27105_.getAsBoolean() && !this.world.m_7441_()) { // Paper - unload POI data - don't write to disk if saving is disabled
+         ChunkPos chunkcoordintpair = SectionPos.m_123184_(this.f_63775_.firstLong()).m_123251_();
+
+         net.minecraft.nbt.CompoundTag data = this.getData(chunkcoordintpair);
+         com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE.scheduleSave(this.world,
+                 chunkcoordintpair.f_45578_, chunkcoordintpair.f_45579_, data, null, com.destroystokyo.paper.io.PrioritizedTaskQueue.NORMAL_PRIORITY);
+      }
+
+      // Paper start - unload POI data
+      if (!this.world.m_7441_()) { // don't write to disk if saving is disabled
+         this.pollUnloads(p_27105_);
+      }
+      // Paper end - unload POI data
+      // Paper end
+      this.villageDistanceTracker.propagateUpdates(); // Paper - replace distance tracking until
+      //this.distanceTracker.runAllUpdates();
+   }
+
+
+   // Paper start - Asynchronous chunk io
+   @javax.annotation.Nullable
+   @Override
+   public net.minecraft.nbt.CompoundTag m_63706_(ChunkPos chunkcoordintpair) throws java.io.IOException {
+      if (this.world != null && Thread.currentThread() != com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE) {
+         net.minecraft.nbt.CompoundTag ret = com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE
+                 .loadChunkDataAsyncFuture(this.world, chunkcoordintpair.f_45578_, chunkcoordintpair.f_45579_, com.destroystokyo.paper.io.IOUtil.getPriorityForCurrentThread(),
+                         true, false, true).join().poiData;
+
+         if (ret == com.destroystokyo.paper.io.PaperFileIOThread.FAILURE_VALUE) {
+            throw new java.io.IOException("See logs for further detail");
+         }
+         return ret;
+      }
+      return super.m_63706_(chunkcoordintpair);
+   }
+
+   @Override
+   public void m_63708_(ChunkPos chunkcoordintpair, net.minecraft.nbt.CompoundTag nbttagcompound) throws java.io.IOException {
+      if (this.world != null && Thread.currentThread() != com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE) {
+         com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE.scheduleSave(
+                 this.world, chunkcoordintpair.f_45578_, chunkcoordintpair.f_45579_, nbttagcompound, null,
+                 com.destroystokyo.paper.io.IOUtil.getPriorityForCurrentThread());
+         return;
+      }
+      super.m_63708_(chunkcoordintpair, nbttagcompound);
+   }
+   // Paper end
 
    protected void m_5838_(long p_27036_) {
       super.m_5838_(p_27036_);
-      this.f_27029_.m_8288_(p_27036_, this.f_27029_.m_7409_(p_27036_), false);
+      //this.distanceTracker.update(p_27036_, this.distanceTracker.getLevelFromSource(p_27036_), false);
+      this.updateDistanceTracking(p_27036_); // Paper - move to new distance tracking util
    }
 
    protected void m_5839_(long p_27145_) {
-      this.f_27029_.m_8288_(p_27145_, this.f_27029_.m_7409_(p_27145_), false);
+      //this.distanceTracker.update(p_27145_, this.distanceTracker.getLevelFromSource(p_27145_), false);
+      this.updateDistanceTracking(p_27145_); // Paper - move to new distance tracking util
    }
 
    public void m_27047_(ChunkPos p_27048_, LevelChunkSection p_27049_) {
