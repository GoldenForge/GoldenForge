--- a/net/minecraft/world/entity/ai/village/poi/PoiManager.java
+++ b/net/minecraft/world/entity/ai/village/poi/PoiManager.java
@@ -2,10 +_,9 @@
 
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
-import it.unimi.dsi.fastutil.longs.Long2ByteMap;
-import it.unimi.dsi.fastutil.longs.Long2ByteOpenHashMap;
-import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
-import it.unimi.dsi.fastutil.longs.LongSet;
+import io.papermc.paper.util.MCUtil;
+import it.unimi.dsi.fastutil.longs.*;
+
 import java.nio.file.Path;
 import java.util.Comparator;
 import java.util.List;
@@ -38,13 +_,30 @@
 public class PoiManager extends SectionStorage<PoiSection> {
    public static final int f_148565_ = 6;
    public static final int f_148566_ = 1;
-   private final PoiManager.DistanceTracker f_27029_;
-   private final LongSet f_27030_ = new LongOpenHashSet();
+  // private final PoiManager.DistanceTracker distanceTracker;
+  // private final LongSet loadedChunks = new LongOpenHashSet();
+
+   public final net.minecraft.server.level.ServerLevel world;
+   private final io.papermc.paper.util.misc.Delayed26WayDistancePropagator3D villageDistanceTracker = new io.papermc.paper.util.misc.Delayed26WayDistancePropagator3D();
+   static final int POI_DATA_SOURCE = 7;
+   public static int convertBetweenLevels(final int level) {
+      return POI_DATA_SOURCE - level;
+   }
+
+   protected void updateDistanceTracking(long section) {
+      if (this.m_27197_(section)) {
+         this.villageDistanceTracker.setSource(section, POI_DATA_SOURCE);
+      } else {
+         this.villageDistanceTracker.removeSource(section);
+      }
+   }
 
    public PoiManager(Path p_217869_, DataFixer p_217870_, boolean p_217871_, RegistryAccess p_217872_, LevelHeightAccessor p_217873_) {
       super(p_217869_, PoiSection::m_27295_, PoiSection::new, p_217870_, DataFixTypes.POI_CHUNK, p_217871_, p_217872_, p_217873_);
-      this.f_27029_ = new PoiManager.DistanceTracker();
+      //this.distanceTracker = new PoiManager.DistanceTracker();
+      this.world = (net.minecraft.server.level.ServerLevel)p_217873_; // Paper
    }
+
 
    public void m_217919_(BlockPos p_217920_, Holder<PoiType> p_217921_) {
       this.m_63827_(SectionPos.m_175568_(p_217920_)).m_218021_(p_217920_, p_217921_);
@@ -111,43 +_,62 @@
    }
 
    public Optional<BlockPos> m_27186_(Predicate<Holder<PoiType>> p_27187_, Predicate<BlockPos> p_27188_, BlockPos p_27189_, int p_27190_, PoiManager.Occupancy p_27191_) {
-      return this.m_27138_(p_27187_, p_27188_, p_27189_, p_27190_, p_27191_).findFirst();
+      // Paper start - re-route to faster logic
+      BlockPos ret = io.papermc.paper.util.PoiAccess.findAnyPoiPosition(this, p_27187_, p_27188_, p_27189_, p_27190_, p_27191_, false);
+      return Optional.ofNullable(ret);
+      // Paper end
    }
 
    public Optional<BlockPos> m_27192_(Predicate<Holder<PoiType>> p_27193_, BlockPos p_27194_, int p_27195_, PoiManager.Occupancy p_27196_) {
-      return this.m_27181_(p_27193_, p_27194_, p_27195_, p_27196_).map(PoiRecord::m_27257_).min(Comparator.comparingDouble((p_217977_) -> {
-         return p_217977_.m_123331_(p_27194_);
-      }));
+      // Paper start - re-route to faster logic
+      BlockPos ret = io.papermc.paper.util.PoiAccess.findClosestPoiDataPosition(this, p_27193_, null, p_27194_, p_27195_, p_27195_ * p_27195_, p_27196_, false);
+      return Optional.ofNullable(ret);
+      // Paper end - re-route to faster logic
    }
 
    public Optional<Pair<Holder<PoiType>, BlockPos>> m_218002_(Predicate<Holder<PoiType>> p_218003_, BlockPos p_218004_, int p_218005_, PoiManager.Occupancy p_218006_) {
-      return this.m_27181_(p_218003_, p_218004_, p_218005_, p_218006_).min(Comparator.comparingDouble((p_217909_) -> {
-         return p_217909_.m_27257_().m_123331_(p_218004_);
-      })).map((p_217959_) -> {
-         return Pair.of(p_217959_.m_218018_(), p_217959_.m_27257_());
-      });
+      // Paper start - re-route to faster logic
+      return Optional.ofNullable(io.papermc.paper.util.PoiAccess.findClosestPoiDataTypeAndPosition(
+              this, p_218003_, null, p_218004_, p_218005_, p_218005_ * p_218005_, p_218006_, false
+      ));
+      // Paper end - re-route to faster logic
    }
 
    public Optional<BlockPos> m_148658_(Predicate<Holder<PoiType>> p_148659_, Predicate<BlockPos> p_148660_, BlockPos p_148661_, int p_148662_, PoiManager.Occupancy p_148663_) {
-      return this.m_27181_(p_148659_, p_148661_, p_148662_, p_148663_).map(PoiRecord::m_27257_).filter(p_148660_).min(Comparator.comparingDouble((p_217918_) -> {
-         return p_217918_.m_123331_(p_148661_);
-      }));
+      // Paper start - re-route to faster logic
+      BlockPos ret = io.papermc.paper.util.PoiAccess.findClosestPoiDataPosition(this, p_148659_, p_148660_, p_148661_, p_148662_, p_148662_ * p_148662_, p_148663_, false);
+      return Optional.ofNullable(ret);
+      // Paper end - re-route to faster logic
    }
 
    public Optional<BlockPos> m_217946_(Predicate<Holder<PoiType>> p_217947_, BiPredicate<Holder<PoiType>, BlockPos> p_217948_, BlockPos p_217949_, int p_217950_) {
-      return this.m_27181_(p_217947_, p_217949_, p_217950_, PoiManager.Occupancy.HAS_SPACE).filter((p_217934_) -> {
-         return p_217948_.test(p_217934_.m_218018_(), p_217934_.m_27257_());
-      }).findFirst().map((p_217881_) -> {
-         p_217881_.m_27247_();
-         return p_217881_.m_27257_();
+      // Paper start - re-route to faster logic
+      final @javax.annotation.Nullable PoiRecord closest = io.papermc.paper.util.PoiAccess.findClosestPoiDataRecord(
+              this, p_217947_, p_217948_, p_217949_, p_217950_, p_217950_ * p_217950_, Occupancy.HAS_SPACE, false
+      );
+      return Optional.ofNullable(closest).map(poi -> {
+         // Paper end - re-route to faster logic
+         poi.m_27247_();
+         return poi.m_27257_();
       });
    }
 
    public Optional<BlockPos> m_217951_(Predicate<Holder<PoiType>> p_217952_, Predicate<BlockPos> p_217953_, PoiManager.Occupancy p_217954_, BlockPos p_217955_, int p_217956_, RandomSource p_217957_) {
-      List<PoiRecord> list = Util.m_214661_(this.m_27181_(p_217952_, p_217955_, p_217956_, p_217954_), p_217957_);
-      return list.stream().filter((p_217945_) -> {
-         return p_217953_.test(p_217945_.m_27257_());
-      }).findFirst().map(PoiRecord::m_27257_);
+      // Paper start - re-route to faster logic
+      List<PoiRecord> list = new java.util.ArrayList<>();
+      io.papermc.paper.util.PoiAccess.findAnyPoiRecords(
+              this, p_217952_, p_217953_, p_217955_, p_217956_, p_217954_, false, Integer.MAX_VALUE, list
+      );
+
+      // the old method shuffled the list and then tried to find the first element in it that
+      // matched positionPredicate, however we moved positionPredicate into the poi search. This means we can avoid a
+      // shuffle entirely, and just pick a random element from list
+      if (list.isEmpty()) {
+         return Optional.empty();
+      }
+
+      return Optional.of(list.get(p_217957_.m_188503_(list.size())).m_27257_());
+      // Paper end - re-route to faster logic
    }
 
    public boolean m_27154_(BlockPos p_27155_) {
@@ -180,8 +_,10 @@
    }
 
    public int m_27098_(SectionPos p_27099_) {
-      this.f_27029_.m_27203_();
-      return this.f_27029_.m_6172_(p_27099_.m_123252_());
+      this.villageDistanceTracker.propagateUpdates(); // Paper - replace distance tracking util
+      return convertBetweenLevels(this.villageDistanceTracker.getLevel(io.papermc.paper.util.CoordinateUtils.getChunkSectionKey(p_27099_))); // Paper - replace distance tracking util
+//      this.distanceTracker.runAllUpdates();
+//      return this.distanceTracker.getLevel(p_27099_.asLong());
    }
 
    boolean m_27197_(long p_27198_) {
@@ -194,18 +_,61 @@
    }
 
    public void m_6202_(BooleanSupplier p_27105_) {
-      super.m_6202_(p_27105_);
-      this.f_27029_.m_27203_();
+       this.villageDistanceTracker.propagateUpdates(); // Paper - rewrite chunk system
    }
 
-   protected void m_5838_(long p_27036_) {
-      super.m_5838_(p_27036_);
-      this.f_27029_.m_8288_(p_27036_, this.f_27029_.m_7409_(p_27036_), false);
+    // Paper start - Asynchronous chunk io
+    @javax.annotation.Nullable
+    @Override
+    public net.minecraft.nbt.CompoundTag m_63706_(ChunkPos chunkcoordintpair) throws java.io.IOException {
+        // Paper start - rewrite chunk system
+        if (!io.papermc.paper.chunk.system.io.RegionFileIOThread.isRegionFileThread()) {
+            return io.papermc.paper.chunk.system.io.RegionFileIOThread.loadData(
+                    this.world, chunkcoordintpair.f_45578_, chunkcoordintpair.f_45579_, io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.POI_DATA,
+                    io.papermc.paper.chunk.system.io.RegionFileIOThread.getIOBlockingPriorityForCurrentThread()
+            );
+        }
+        // Paper end - rewrite chunk system
+        return super.m_63706_(chunkcoordintpair);
+    }
+
+    @Override
+    public void m_63708_(ChunkPos chunkcoordintpair, net.minecraft.nbt.CompoundTag nbttagcompound) throws java.io.IOException {
+        // Paper start - rewrite chunk system
+        if (!io.papermc.paper.chunk.system.io.RegionFileIOThread.isRegionFileThread()) {
+            io.papermc.paper.chunk.system.io.RegionFileIOThread.scheduleSave(
+                    this.world, chunkcoordintpair.f_45578_, chunkcoordintpair.f_45579_, nbttagcompound,
+                    io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.POI_DATA);
+            return;
+        }
+        // Paper end - rewrite chunk system
+        super.m_63708_(chunkcoordintpair, nbttagcompound);
+    }
+    // Paper end
+
+   public void m_5838_(long p_27036_) {
+       // Paper start - rewrite chunk system
+       int chunkX = io.papermc.paper.util.CoordinateUtils.getChunkSectionX(p_27036_);
+       int chunkZ = io.papermc.paper.util.CoordinateUtils.getChunkSectionZ(p_27036_);
+       io.papermc.paper.chunk.system.scheduling.ChunkHolderManager manager = this.world.chunkTaskScheduler.chunkHolderManager;
+       io.papermc.paper.chunk.system.poi.PoiChunk chunk = manager.getPoiChunkIfLoaded(chunkX, chunkZ, false);
+       if (chunk != null) {
+           chunk.setDirty(true);
+       }
+       this.updateDistanceTracking(p_27036_);
+       // Paper end - rewrite chunk system
    }
 
    protected void m_5839_(long p_27145_) {
-      this.f_27029_.m_8288_(p_27145_, this.f_27029_.m_7409_(p_27145_), false);
+      //this.distanceTracker.update(p_27145_, this.distanceTracker.getLevelFromSource(p_27145_), false);
+      this.updateDistanceTracking(p_27145_); // Paper - move to new distance tracking util
    }
+
+    public void checkConsistency(net.minecraft.world.level.chunk.ChunkAccess chunk) {
+        for (LevelChunkSection section : chunk.m_7103_()) {
+            this.m_27047_(chunk.m_7697_(), section);
+        }
+    }
 
    public void m_27047_(ChunkPos p_27048_, LevelChunkSection p_27049_) {
       SectionPos sectionpos = SectionPos.m_123196_(p_27048_, SectionPos.m_123171_(p_27049_.m_63017_()));
@@ -238,19 +_,98 @@
       });
    }
 
-   public void m_27056_(LevelReader p_27057_, BlockPos p_27058_, int p_27059_) {
-      SectionPos.m_175557_(new ChunkPos(p_27058_), Math.floorDiv(p_27059_, 16), this.f_156618_.m_151560_(), this.f_156618_.m_151561_()).map((p_217979_) -> {
-         return Pair.of(p_217979_, this.m_63823_(p_217979_.m_123252_()));
-      }).filter((p_217963_) -> {
-         return !p_217963_.getSecond().map(PoiSection::m_27272_).orElse(false);
-      }).map((p_217891_) -> {
-         return p_217891_.getFirst().m_123251_();
-      }).filter((p_217961_) -> {
-         return this.f_27030_.add(p_217961_.m_45588_());
-      }).forEach((p_217889_) -> {
-         p_27057_.m_46819_(p_217889_.f_45578_, p_217889_.f_45579_, ChunkStatus.f_62314_);
-      });
-   }
+    public void m_27056_(LevelReader p_27057_, BlockPos p_27058_, int p_27059_) {
+        SectionPos.m_175557_(new ChunkPos(p_27058_), Math.floorDiv(p_27059_, 16), this.f_156618_.m_151560_(), this.f_156618_.m_151561_()).map((sectionPos) -> {
+            return Pair.of(sectionPos, this.m_63823_(sectionPos.m_123252_()));
+        }).filter((pair) -> {
+            return !pair.getSecond().map(PoiSection::m_27272_).orElse(false);
+        }).map((pair) -> {
+            return pair.getFirst().m_123251_();
+        }).filter((chunkPos) -> {
+            return true; // Paper - rewrite chunk system
+        }).forEach((chunkPos) -> {
+            p_27057_.m_46819_(chunkPos.f_45578_, chunkPos.f_45579_, ChunkStatus.f_62314_);
+        });
+    }
+
+
+    @Override
+    public Optional<PoiSection> m_63818_(long pos) {
+        int chunkX = io.papermc.paper.util.CoordinateUtils.getChunkSectionX(pos);
+        int chunkY = io.papermc.paper.util.CoordinateUtils.getChunkSectionY(pos);
+        int chunkZ = io.papermc.paper.util.CoordinateUtils.getChunkSectionZ(pos);
+
+        io.papermc.paper.util.TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Accessing poi chunk off-main");
+
+        io.papermc.paper.chunk.system.scheduling.ChunkHolderManager manager = this.world.chunkTaskScheduler.chunkHolderManager;
+        io.papermc.paper.chunk.system.poi.PoiChunk ret = manager.getPoiChunkIfLoaded(chunkX, chunkZ, true);
+
+        return ret == null ? Optional.empty() : ret.getSectionForVanilla(chunkY);
+    }
+
+    @Override
+    public Optional<PoiSection> m_63823_(long pos) {
+        int chunkX = io.papermc.paper.util.CoordinateUtils.getChunkSectionX(pos);
+        int chunkY = io.papermc.paper.util.CoordinateUtils.getChunkSectionY(pos);
+        int chunkZ = io.papermc.paper.util.CoordinateUtils.getChunkSectionZ(pos);
+
+        io.papermc.paper.util.TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Accessing poi chunk off-main");
+
+        io.papermc.paper.chunk.system.scheduling.ChunkHolderManager manager = this.world.chunkTaskScheduler.chunkHolderManager;
+
+        if (chunkY >= io.papermc.paper.util.WorldUtil.getMinSection(this.world) &&
+                chunkY <= io.papermc.paper.util.WorldUtil.getMaxSection(this.world)) {
+            io.papermc.paper.chunk.system.poi.PoiChunk ret = manager.getPoiChunkIfLoaded(chunkX, chunkZ, true);
+            if (ret != null) {
+                return ret.getSectionForVanilla(chunkY);
+            } else {
+                return manager.loadPoiChunk(chunkX, chunkZ).getSectionForVanilla(chunkY);
+            }
+        }
+        // retain vanilla behavior: do not load section if out of bounds!
+        return Optional.empty();
+    }
+
+    @Override
+    protected PoiSection m_63827_(long pos) {
+        int chunkX = io.papermc.paper.util.CoordinateUtils.getChunkSectionX(pos);
+        int chunkY = io.papermc.paper.util.CoordinateUtils.getChunkSectionY(pos);
+        int chunkZ = io.papermc.paper.util.CoordinateUtils.getChunkSectionZ(pos);
+
+        io.papermc.paper.util.TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Accessing poi chunk off-main");
+
+        io.papermc.paper.chunk.system.scheduling.ChunkHolderManager manager = this.world.chunkTaskScheduler.chunkHolderManager;
+
+        io.papermc.paper.chunk.system.poi.PoiChunk ret = manager.getPoiChunkIfLoaded(chunkX, chunkZ, true);
+        if (ret != null) {
+            return ret.getOrCreateSection(chunkY);
+        } else {
+            return manager.loadPoiChunk(chunkX, chunkZ).getOrCreateSection(chunkY);
+        }
+    }
+
+    public void onUnload(long coordinate) { // Paper - rewrite chunk system
+        int chunkX = io.papermc.paper.util.MCUtil.getCoordinateX(coordinate);
+        int chunkZ = io.papermc.paper.util.MCUtil.getCoordinateZ(coordinate);
+        io.papermc.paper.util.TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Unloading poi chunk off-main");
+        for (int section = this.f_156618_.m_151560_(); section < this.f_156618_.m_151561_(); ++section) {
+            long sectionPos = SectionPos.m_123209_(chunkX, section, chunkZ);
+            this.updateDistanceTracking(sectionPos);
+        }
+    }
+
+    public void loadInPoiChunk(io.papermc.paper.chunk.system.poi.PoiChunk poiChunk) {
+        int chunkX = poiChunk.chunkX;
+        int chunkZ = poiChunk.chunkZ;
+        io.papermc.paper.util.TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Loading poi chunk off-main");
+        for (int sectionY = this.f_156618_.m_151560_(); sectionY < this.f_156618_.m_151561_(); ++sectionY) {
+            PoiSection section = poiChunk.getSection(sectionY);
+            if (section != null && !section.isEmpty()) {
+                this.m_5839_(SectionPos.m_123209_(chunkX, sectionY, chunkZ));
+            }
+        }
+    }
+    // Paper end - rewrite chunk system
 
    final class DistanceTracker extends SectionTracker {
       private final Long2ByteMap f_27200_ = new Long2ByteOpenHashMap();
