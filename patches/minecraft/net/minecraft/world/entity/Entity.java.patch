--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -5,6 +_,7 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.mojang.logging.LogUtils;
+import io.papermc.paper.util.MCUtil;
 import it.unimi.dsi.fastutil.objects.Object2DoubleArrayMap;
 import it.unimi.dsi.fastutil.objects.Object2DoubleMap;
 import java.util.Arrays;
@@ -85,7 +_,6 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.FenceGateBlock;
 import net.minecraft.world.level.block.HoneyBlock;
 import net.minecraft.world.level.block.Mirror;
 import net.minecraft.world.level.block.RenderShape;
@@ -116,9 +_,11 @@
 import net.minecraft.world.phys.shapes.VoxelShape;
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Team;
+import org.goldenforge.GoldenConfig;
+import org.goldenforge.config.GoldenForgeConfig;
 import org.slf4j.Logger;
 
-public abstract class Entity implements Nameable, EntityAccess, CommandSource {
+public abstract class Entity extends net.minecraftforge.common.capabilities.CapabilityProvider<Entity> implements Nameable, EntityAccess, CommandSource, net.minecraftforge.common.extensions.IForgeEntity {
    private static final Logger f_19849_ = LogUtils.getLogger();
    public static final String f_146815_ = "id";
    public static final String f_146816_ = "Passengers";
@@ -137,6 +_,7 @@
    private static final double f_146812_ = 0.0023333333333333335D;
    public static final String f_146824_ = "UUID";
    private static double f_19846_ = 1.0D;
+   @Deprecated // Forge: Use the getter to allow overriding in mods
    private final EntityType<?> f_19847_;
    private int f_19848_ = f_19843_.incrementAndGet();
    public boolean f_19850_;
@@ -149,15 +_,15 @@
    public double f_19855_;
    public double f_19856_;
    private Vec3 f_19825_;
-   private BlockPos f_19826_;
+   public BlockPos f_19826_;
    private ChunkPos f_185933_;
    private Vec3 f_19827_ = Vec3.f_82478_;
-   private float f_19857_;
+   public float f_19857_;
    private float f_19858_;
    public float f_19859_;
    public float f_19860_;
    private AABB f_19828_ = f_19845_;
-   protected boolean f_19861_;
+   public boolean f_19861_;
    public boolean f_19862_;
    public boolean f_19863_;
    public boolean f_201939_;
@@ -177,14 +_,89 @@
    public double f_19790_;
    public double f_19791_;
    public double f_19792_;
+   @Deprecated // Forge - see IForgeEntity#getStepHeight
    public float f_19793_;
    public boolean f_19794_;
-   protected final RandomSource f_19796_ = RandomSource.m_216327_();
+   // Paper start
+   public static RandomSource SHARED_RANDOM = new RandomRandomSource();
+   private static final class RandomRandomSource extends java.util.Random implements net.minecraft.world.level.levelgen.BitRandomSource {
+      private boolean locked = false;
+
+      @Override
+      public synchronized void setSeed(long seed) {
+         if (locked) {
+            f_19849_.error("Ignoring setSeed on Entity.SHARED_RANDOM", new Throwable());
+         } else {
+            super.setSeed(seed);
+            locked = true;
+         }
+      }
+
+      @Override
+      public RandomSource m_213769_() {
+         return new net.minecraft.world.level.levelgen.LegacyRandomSource(this.nextLong());
+      }
+
+      @Override
+      public net.minecraft.world.level.levelgen.PositionalRandomFactory m_188582_() {
+         return new net.minecraft.world.level.levelgen.LegacyRandomSource.LegacyPositionalRandomFactory(this.nextLong());
+      }
+
+      // these below are added to fix reobf issues that I don't wanna deal with right now
+      @Override
+      public int next(int bits) {
+         return super.next(bits);
+      }
+
+      @Override
+      public int nextInt(int origin, int bound) {
+         return net.minecraft.world.level.levelgen.BitRandomSource.super.m_216339_(origin, bound);
+      }
+
+      @Override
+      public long nextLong() {
+         return net.minecraft.world.level.levelgen.BitRandomSource.super.m_188505_();
+      }
+
+      @Override
+      public int nextInt() {
+         return net.minecraft.world.level.levelgen.BitRandomSource.super.m_188502_();
+      }
+
+      @Override
+      public int nextInt(int bound) {
+         return net.minecraft.world.level.levelgen.BitRandomSource.super.m_188503_(bound);
+      }
+
+      @Override
+      public boolean nextBoolean() {
+         return net.minecraft.world.level.levelgen.BitRandomSource.super.m_188499_();
+      }
+
+      @Override
+      public float nextFloat() {
+         return net.minecraft.world.level.levelgen.BitRandomSource.super.m_188501_();
+      }
+
+      @Override
+      public double nextDouble() {
+         return net.minecraft.world.level.levelgen.BitRandomSource.super.m_188500_();
+      }
+
+      @Override
+      public double nextGaussian() {
+         return super.nextGaussian();
+      }
+   }
+   // Paper end
+   protected final RandomSource f_19796_ = SHARED_RANDOM;
    public int f_19797_;
-   private int f_19831_ = -this.m_6101_();
-   protected boolean f_19798_;
+   public int f_19831_ = -this.m_6101_();
+   public boolean f_19798_;
+   @Deprecated // Forge: Use forgeFluidTypeHeight instead
    protected Object2DoubleMap<TagKey<Fluid>> f_19799_ = new Object2DoubleArrayMap<>(2);
    protected boolean f_19800_;
+   @Deprecated // Forge: Use forgeFluidTypeOnEyes instead
    private final Set<TagKey<Fluid>> f_19801_ = new HashSet<>();
    public int f_19802_;
    protected boolean f_19803_ = true;
@@ -208,8 +_,8 @@
    private final VecDeltaCodec f_216985_ = new VecDeltaCodec();
    public boolean f_19811_;
    public boolean f_19812_;
-   private int f_19839_;
-   protected boolean f_19817_;
+   public int f_19839_;
+   public boolean f_19817_;
    protected int f_19818_;
    protected BlockPos f_19819_;
    private boolean f_19840_;
@@ -230,13 +_,97 @@
    @Nullable
    private BlockState f_185934_ = null;
 
+   public net.minecraft.server.level.ChunkHolder.FullChunkStatus chunkStatus;
+   public boolean isValid;
+
+   public int sectionX = Integer.MIN_VALUE;
+   public int sectionY = Integer.MIN_VALUE;
+   public int sectionZ = Integer.MIN_VALUE;
+   public boolean updatingSectionStatus = false;
+   private final boolean hardCollides;
+   public final boolean hardCollides() {
+      return this.hardCollides;
+   }
+
+   {
+      this.hardCollides = this instanceof Boat
+              || this instanceof net.minecraft.world.entity.monster.Shulker
+              || this instanceof net.minecraft.world.entity.vehicle.AbstractMinecart;
+   }
+
+   // Spigot start
+   public final org.spigotmc.ActivationRange.ActivationType activationType = org.spigotmc.ActivationRange.initializeEntityActivationType(this);
+   public final boolean defaultActivationState;
+   public long activatedTick = Integer.MIN_VALUE;
+   public void inactiveTick() { }
+   // Spigot end
+   // Paper start
+   public long activatedImmunityTick = Integer.MIN_VALUE; // Paper
+   public boolean isTemporarilyActive = false; // Paper
+   // Paper start - optimise entity tracking
+   final org.spigotmc.TrackingRange.TrackingRangeType trackingRangeType = org.spigotmc.TrackingRange.getTrackingRangeType(this);
+
+   private org.spigotmc.TrackingRange.TrackingRangeType getFurthestEntity(Entity entity, net.minecraft.server.level.ChunkMap chunkMap, org.spigotmc.TrackingRange.TrackingRangeType type, int range) {
+      List<Entity> passengers = entity.m_20197_();
+      for (int i = 0, size = passengers.size(); i < size; i++) {
+         Entity passenger = passengers.get(i);
+         org.spigotmc.TrackingRange.TrackingRangeType passengerType = passenger.trackingRangeType;
+         int passengerRange = chunkMap.getEntityTrackerRange(passengerType.ordinal());
+         if (passengerRange > range) {
+            type = passengerType;
+            range = passengerRange;
+         }
+
+         type = this.getFurthestEntity(passenger, chunkMap, type, range);
+      }
+
+      return type;
+   }
+
+   public final com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> getPlayersInTrackRange() {
+      // determine highest range of passengers
+      if (this.f_19823_.isEmpty()) {
+         return ((ServerLevel)this.f_19853_).m_7726_().f_8325_.playerEntityTrackerTrackMaps[this.trackingRangeType.ordinal()]
+                 .getObjectsInRange(MCUtil.getCoordinateKey(this));
+      }
+     // Iterable<Entity> passengers = this.getIndirectPassengers();
+      net.minecraft.server.level.ChunkMap chunkMap = ((ServerLevel)this.f_19853_).m_7726_().f_8325_;
+      org.spigotmc.TrackingRange.TrackingRangeType type = this.trackingRangeType;
+      int range = chunkMap.getEntityTrackerRange(type.ordinal());
+
+      // Pufferfish start - use getFurthestEntity to skip getIndirectPassengers
+//      for (Entity passenger : passengers) {
+//         org.spigotmc.TrackingRange.TrackingRangeType passengerType = passenger.trackingRangeType;
+//         int passengerRange = chunkMap.getEntityTrackerRange(passengerType.ordinal());
+//         if (passengerRange > range) {
+//            type = passengerType;
+//            range = passengerRange;
+//         }
+//      }
+      type = this.getFurthestEntity(this, chunkMap, type, range);
+      // Pufferfish end
+
+      return chunkMap.playerEntityTrackerTrackMaps[type.ordinal()].getObjectsInRange(MCUtil.getCoordinateKey(this));
+   }
+   // Paper end - optimise entity tracking
+   public boolean collidingWithWorldBorder; // Paper
+   public boolean collisionLoadChunks = false; // Paper
+   public boolean preserveMotion = true; // Paper - keep initial motion on first setPositionRotation
    public Entity(EntityType<?> p_19870_, Level p_19871_) {
+      super(Entity.class);
       this.f_19847_ = p_19870_;
       this.f_19853_ = p_19871_;
       this.f_19815_ = p_19870_.m_20680_();
       this.f_19825_ = Vec3.f_82478_;
       this.f_19826_ = BlockPos.f_121853_;
       this.f_185933_ = ChunkPos.f_186419_;
+      // Spigot start
+      if (f_19853_ != null) {
+         this.defaultActivationState = org.spigotmc.ActivationRange.initializeEntityActivationState(this);
+      } else {
+         this.defaultActivationState = false;
+      }
+      // Spigot end
       this.f_19804_ = new SynchedEntityData(this);
       this.f_19804_.m_135372_(f_19805_, (byte)0);
       this.f_19804_.m_135372_(f_19832_, this.m_6062_());
@@ -248,7 +_,11 @@
       this.f_19804_.m_135372_(f_146800_, 0);
       this.m_8097_();
       this.m_6034_(0.0D, 0.0D, 0.0D);
-      this.f_19816_ = this.m_6380_(Pose.STANDING, this.f_19815_);
+      net.minecraftforge.event.entity.EntityEvent.Size sizeEvent = net.minecraftforge.event.ForgeEventFactory.getEntitySizeForge(this, Pose.STANDING, this.f_19815_, this.m_6380_(Pose.STANDING, this.f_19815_));
+      this.f_19815_ = sizeEvent.getNewSize();
+      this.f_19816_ = sizeEvent.getNewEyeHeight();
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityEvent.EntityConstructing(this));
+      this.gatherCapabilities();
    }
 
    public boolean m_20039_(BlockPos p_20040_, BlockState p_20041_) {
@@ -338,6 +_,7 @@
 
    public void m_142687_(Entity.RemovalReason p_146834_) {
       this.m_142467_(p_146834_);
+      //this.invalidateCaps();
    }
 
    public void m_142036_() {
@@ -376,8 +_,15 @@
    }
 
    public void m_6034_(double p_20210_, double p_20211_, double p_20212_) {
-      this.m_20343_(p_20210_, p_20211_, p_20212_);
-      this.m_20011_(this.m_142242_());
+      this.m_20343_(p_20210_, p_20211_, p_20212_); // Paper - force bounding box update
+
+      // Goldenforge, move this here, to keep compat with immersive portal
+      // Paper start - never allow AABB to become desynced from position
+      // hanging has its own special logic
+      if (!(this instanceof net.minecraft.world.entity.decoration.HangingEntity)) {
+         this.m_20011_(this.m_142242_());
+      }
+      // Paper end
    }
 
    protected AABB m_142242_() {
@@ -455,7 +_,7 @@
 
       if (this.m_20077_()) {
          this.m_20093_();
-         this.f_19789_ *= 0.5F;
+         this.f_19789_ *= this.getFluidFallDistanceModifier(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get());
       }
 
       this.m_146871_();
@@ -551,12 +_,49 @@
       return this.f_19861_;
    }
 
+   // Paper start - detailed watchdog information
+   public final Object posLock = new Object(); // Paper - log detailed entity tick information
+
+   private Vec3 moveVector;
+   private double moveStartX;
+   private double moveStartY;
+   private double moveStartZ;
+
+   public final Vec3 getMoveVector() {
+      return this.moveVector;
+   }
+
+   public final double getMoveStartX() {
+      return this.moveStartX;
+   }
+
+   public final double getMoveStartY() {
+      return this.moveStartY;
+   }
+
+   public final double getMoveStartZ() {
+      return this.moveStartZ;
+   }
+   // Paper end - detailed watchdog information
+
    public void m_6478_(MoverType p_19973_, Vec3 p_19974_) {
+      // Paper start - detailed watchdog information
+      io.papermc.paper.util.TickThread.ensureTickThread("Cannot move an entity off-main");
+      synchronized (this.posLock) {
+         this.moveStartX = this.m_20185_();
+         this.moveStartY = this.m_20186_();
+         this.moveStartZ = this.m_20189_();
+         this.moveVector = p_19974_;
+      }
+      try {
+         // Paper end - detailed watchdog information
       if (this.f_19794_) {
          this.m_6034_(this.m_20185_() + p_19974_.f_82479_, this.m_20186_() + p_19974_.f_82480_, this.m_20189_() + p_19974_.f_82481_);
       } else {
          this.f_146810_ = this.m_6060_();
          if (p_19973_ == MoverType.PISTON) {
+            this.activatedTick = Math.max(this.activatedTick, MinecraftServer.currentTick + 20); // Paper
+            this.activatedImmunityTick = Math.max(this.activatedImmunityTick, MinecraftServer.currentTick + 20);   // Paper
             p_19974_ = this.m_20133_(p_19974_);
             if (p_19974_.equals(Vec3.f_82478_)) {
                return;
@@ -569,6 +_,13 @@
             this.f_19865_ = Vec3.f_82478_;
             this.m_20256_(Vec3.f_82478_);
          }
+         // Paper start - ignore movement changes while inactive.
+         if (isTemporarilyActive && !(this instanceof ItemEntity || this instanceof net.minecraft.world.entity.vehicle.AbstractMinecart) && p_19974_ == m_20184_() && p_19973_ == MoverType.SELF) {
+            m_20256_(Vec3.f_82478_);
+            this.f_19853_.m_46473_().m_7238_();
+            return;
+         }
+         // Paper end
 
          p_19974_ = this.m_5763_(p_19974_, p_19973_);
          Vec3 vec3 = this.m_20272_(p_19974_);
@@ -623,14 +_,14 @@
                double d1 = vec3.f_82479_;
                double d2 = vec3.f_82480_;
                double d3 = vec3.f_82481_;
-               this.f_146794_ += (float)(vec3.m_82553_() * 0.6D);
+               this.f_146794_ = (float) ((double) this.f_146794_ + vec3.m_82553_() * 0.6D);
                boolean flag1 = blockstate.m_204336_(BlockTags.f_13082_) || blockstate.m_60713_(Blocks.f_152499_);
                if (!flag1) {
                   d2 = 0.0D;
                }
 
-               this.f_19787_ += (float)vec3.m_165924_() * 0.6F;
-               this.f_19788_ += (float)Math.sqrt(d1 * d1 + d2 * d2 + d3 * d3) * 0.6F;
+               this.f_19787_ += (float) vec3.m_165924_() * 0.6F;
+               this.f_19788_ += (float) Math.sqrt(d1 * d1 + d2 * d2 + d3 * d3) * 0.6F;
                if (this.f_19788_ > this.f_19829_ && !blockstate.m_60795_()) {
                   this.f_19829_ = this.m_6059_();
                   if (this.m_20069_()) {
@@ -638,7 +_,7 @@
                         Entity entity = this.m_20160_() && this.m_6688_() != null ? this.m_6688_() : this;
                         float f = entity == this ? 0.35F : 0.4F;
                         Vec3 vec32 = entity.m_20184_();
-                        float f1 = Math.min(1.0F, (float)Math.sqrt(vec32.f_82479_ * vec32.f_82479_ * (double)0.2F + vec32.f_82480_ * vec32.f_82480_ + vec32.f_82481_ * vec32.f_82481_ * (double)0.2F) * f);
+                        float f1 = Math.min(1.0F, (float) Math.sqrt(vec32.f_82479_ * vec32.f_82479_ * (double) 0.2F + vec32.f_82480_ * vec32.f_82480_ + vec32.f_82481_ * vec32.f_82481_ * (double) 0.2F) * f);
                         this.m_5625_(f1);
                      }
 
@@ -662,10 +_,45 @@
 
             this.m_146872_();
             float f2 = this.m_6041_();
-            this.m_20256_(this.m_20184_().m_82542_((double)f2, 1.0D, (double)f2));
-            if (this.f_19853_.m_46847_(this.m_20191_().m_82406_(1.0E-6D)).noneMatch((p_20127_) -> {
-               return p_20127_.m_204336_(BlockTags.f_13076_) || p_20127_.m_60713_(Blocks.f_49991_);
-            })) {
+            this.m_20256_(this.m_20184_().m_82542_((double) f2, 1.0D, (double) f2));
+            // Paper start - remove expensive streams from here
+            boolean noneMatch = true;
+            AABB fireSearchBox = this.m_20191_().m_82406_(1.0E-6D);
+            {
+               int minX = Mth.m_14107_(fireSearchBox.f_82288_);
+               int minY = Mth.m_14107_(fireSearchBox.f_82289_);
+               int minZ = Mth.m_14107_(fireSearchBox.f_82290_);
+               int maxX = Mth.m_14107_(fireSearchBox.f_82291_);
+               int maxY = Mth.m_14107_(fireSearchBox.f_82292_);
+               int maxZ = Mth.m_14107_(fireSearchBox.f_82293_);
+               fire_search_loop:
+               for (int fz = minZ; fz <= maxZ; ++fz) {
+                  for (int fx = minX; fx <= maxX; ++fx) {
+                     for (int fy = minY; fy <= maxY; ++fy) {
+                        net.minecraft.world.level.chunk.LevelChunk chunk = (net.minecraft.world.level.chunk.LevelChunk) this.f_19853_.getChunkIfLoadedImmediately(fx >> 4, fz >> 4);
+                        if (chunk == null) {
+                           // Vanilla rets an empty stream if all the chunks are not loaded, so noneMatch will be true
+                           // even if we're in lava/fire
+                           noneMatch = true;
+                           break fire_search_loop;
+                        }
+                        if (!noneMatch) {
+                           // don't do get type, we already know we're in fire - we just need to check the chunks
+                           // loaded state
+                           continue;
+                        }
+
+                        BlockState type = chunk.getBlockStateFinal(fx, fy, fz);
+                        if (type.m_204336_(BlockTags.f_13076_) || type.m_60713_(Blocks.f_49991_)) {
+                           noneMatch = false;
+                           // can't break, we need to retain vanilla behavior by ensuring ALL chunks are loaded
+                        }
+                     }
+                  }
+               }
+            }
+            if (noneMatch) {
+               // Paper end - remove expensive streams from here
                if (this.f_19831_ <= 0) {
                   this.m_7311_(-this.m_6101_());
                }
@@ -682,6 +_,13 @@
             this.f_19853_.m_46473_().m_7238_();
          }
       }
+         // Paper start - detailed watchdog information
+      } finally {
+         synchronized (this.posLock) { // Paper
+            this.moveVector = null;
+         } // Paper
+      }
+      // Paper end - detailed watchdog information
    }
 
    protected boolean m_196406_(Vec3 p_196625_) {
@@ -728,10 +_,10 @@
       int j = Mth.m_14107_(this.f_19825_.f_82480_ - (double)p_216987_);
       int k = Mth.m_14107_(this.f_19825_.f_82481_);
       BlockPos blockpos = new BlockPos(i, j, k);
-      if (this.f_19853_.m_8055_(blockpos).m_60795_()) {
+      if (this.f_19853_.m_46859_(blockpos)) {
          BlockPos blockpos1 = blockpos.m_7495_();
          BlockState blockstate = this.f_19853_.m_8055_(blockpos1);
-         if (blockstate.m_204336_(BlockTags.f_13039_) || blockstate.m_204336_(BlockTags.f_13032_) || blockstate.m_60734_() instanceof FenceGateBlock) {
+         if (blockstate.collisionExtendsVertically(this.f_19853_, blockpos1, this)) {
             return blockpos1;
          }
       }
@@ -797,29 +_,78 @@
    }
 
    private Vec3 m_20272_(Vec3 p_20273_) {
-      AABB aabb = this.m_20191_();
-      List<VoxelShape> list = this.f_19853_.m_183134_(this, aabb.m_82369_(p_20273_));
-      Vec3 vec3 = p_20273_.m_82556_() == 0.0D ? p_20273_ : m_198894_(this, p_20273_, aabb, this.f_19853_, list);
-      boolean flag = p_20273_.f_82479_ != vec3.f_82479_;
-      boolean flag1 = p_20273_.f_82480_ != vec3.f_82480_;
-      boolean flag2 = p_20273_.f_82481_ != vec3.f_82481_;
-      boolean flag3 = this.f_19861_ || flag1 && p_20273_.f_82480_ < 0.0D;
-      if (this.f_19793_ > 0.0F && flag3 && (flag || flag2)) {
-         Vec3 vec31 = m_198894_(this, new Vec3(p_20273_.f_82479_, (double)this.f_19793_, p_20273_.f_82481_), aabb, this.f_19853_, list);
-         Vec3 vec32 = m_198894_(this, new Vec3(0.0D, (double)this.f_19793_, 0.0D), aabb.m_82363_(p_20273_.f_82479_, 0.0D, p_20273_.f_82481_), this.f_19853_, list);
-         if (vec32.f_82480_ < (double)this.f_19793_) {
-            Vec3 vec33 = m_198894_(this, new Vec3(p_20273_.f_82479_, 0.0D, p_20273_.f_82481_), aabb.m_82383_(vec32), this.f_19853_, list).m_82549_(vec32);
-            if (vec33.m_165925_() > vec31.m_165925_()) {
-               vec31 = vec33;
-            }
-         }
-
-         if (vec31.m_165925_() > vec3.m_165925_()) {
-            return vec31.m_82549_(m_198894_(this, new Vec3(0.0D, -vec31.f_82480_ + p_20273_.f_82480_, 0.0D), aabb.m_82383_(vec31), this.f_19853_, list));
-         }
-      }
-
-      return vec3;
+      // Paper start - optimise collisions
+      // This is a copy of vanilla's except that it uses strictly AABB math
+      if (p_20273_.f_82479_ == 0.0 && p_20273_.f_82480_ == 0.0 && p_20273_.f_82481_ == 0.0) {
+         return p_20273_;
+      }
+
+      final Level world = this.f_19853_;
+      final AABB currBoundingBox = this.m_20191_();
+
+      if (io.papermc.paper.util.CollisionUtil.isEmpty(currBoundingBox)) {
+         return p_20273_;
+      }
+
+      final List<AABB> potentialCollisions = io.papermc.paper.util.CachedLists.getTempCollisionList();
+      try {
+         final double stepHeight = (double)this.f_19793_;
+         final AABB collisionBox;
+
+         if (p_20273_.f_82479_ == 0.0 && p_20273_.f_82481_ == 0.0 && p_20273_.f_82480_ != 0.0) {
+            if (p_20273_.f_82480_ > 0.0) {
+               collisionBox = io.papermc.paper.util.CollisionUtil.cutUpwards(currBoundingBox, p_20273_.f_82480_);
+            } else {
+               collisionBox = io.papermc.paper.util.CollisionUtil.cutDownwards(currBoundingBox, p_20273_.f_82480_);
+            }
+         } else {
+            if (stepHeight > 0.0 && (this.f_19861_ || (p_20273_.f_82480_ < 0.0)) && (p_20273_.f_82479_ != 0.0 || p_20273_.f_82481_ != 0.0)) {
+               // don't bother getting the collisions if we don't need them.
+               if (p_20273_.f_82480_ <= 0.0) {
+                  collisionBox = io.papermc.paper.util.CollisionUtil.expandUpwards(currBoundingBox.m_82363_(p_20273_.f_82479_, p_20273_.f_82480_, p_20273_.f_82481_), stepHeight);
+               } else {
+                  collisionBox = currBoundingBox.m_82363_(p_20273_.f_82479_, Math.max(stepHeight, p_20273_.f_82480_), p_20273_.f_82481_);
+               }
+            } else {
+               collisionBox = currBoundingBox.m_82363_(p_20273_.f_82479_, p_20273_.f_82480_, p_20273_.f_82481_);
+            }
+         }
+
+         io.papermc.paper.util.CollisionUtil.getCollisions(world, this, collisionBox, potentialCollisions, false, GoldenForgeConfig.Server.preventMovingIntoUnloadedChunks.get(),
+                 false, false, null, null);
+
+         if (collidingWithWorldBorder = io.papermc.paper.util.CollisionUtil.isCollidingWithBorderEdge(world.m_6857_(), collisionBox)) { // Paper - this line *is* correct, ignore the IDE warning about assignments being used as a condition
+            io.papermc.paper.util.CollisionUtil.addBoxesToIfIntersects(world.m_6857_().m_61946_(), collisionBox, potentialCollisions);
+         }
+
+         final Vec3 limitedMoveVector = io.papermc.paper.util.CollisionUtil.performCollisions(p_20273_, currBoundingBox, potentialCollisions);
+
+         if (stepHeight > 0.0
+                 && (this.f_19861_ || (limitedMoveVector.f_82480_ != p_20273_.f_82480_ && p_20273_.f_82480_ < 0.0))
+                 && (limitedMoveVector.f_82479_ != p_20273_.f_82479_ || limitedMoveVector.f_82481_ != p_20273_.f_82481_)) {
+            Vec3 vec3d2 = io.papermc.paper.util.CollisionUtil.performCollisions(new Vec3(p_20273_.f_82479_, stepHeight, p_20273_.f_82481_), currBoundingBox, potentialCollisions);
+            final Vec3 vec3d3 = io.papermc.paper.util.CollisionUtil.performCollisions(new Vec3(0.0, stepHeight, 0.0), currBoundingBox.m_82363_(p_20273_.f_82479_, 0.0, p_20273_.f_82481_), potentialCollisions);
+
+            if (vec3d3.f_82480_ < stepHeight) {
+               final Vec3 vec3d4 = io.papermc.paper.util.CollisionUtil.performCollisions(new Vec3(p_20273_.f_82479_, 0.0D, p_20273_.f_82481_), currBoundingBox.m_82383_(vec3d3), potentialCollisions).m_82549_(vec3d3);
+
+               if (vec3d4.m_165925_() > vec3d2.m_165925_()) {
+                  vec3d2 = vec3d4;
+               }
+            }
+
+            if (vec3d2.m_165925_() > limitedMoveVector.m_165925_()) {
+               return vec3d2.m_82549_(io.papermc.paper.util.CollisionUtil.performCollisions(new Vec3(0.0D, -vec3d2.f_82480_ + p_20273_.f_82480_, 0.0D), currBoundingBox.m_82383_(vec3d2), potentialCollisions));
+            }
+
+            return limitedMoveVector;
+         } else {
+            return limitedMoveVector;
+         }
+      } finally {
+         io.papermc.paper.util.CachedLists.returnTempCollisionList(potentialCollisions);
+      }
+      // Paper end - optimise collisions
    }
 
    public static Vec3 m_198894_(@Nullable Entity p_198895_, Vec3 p_198896_, AABB p_198897_, Level p_198898_, List<VoxelShape> p_198899_) {
@@ -934,7 +_,7 @@
    protected void m_7355_(BlockPos p_20135_, BlockState p_20136_) {
       if (!p_20136_.m_60767_().m_76332_()) {
          BlockState blockstate = this.f_19853_.m_8055_(p_20135_.m_7494_());
-         SoundType soundtype = blockstate.m_204336_(BlockTags.f_144271_) ? blockstate.m_60827_() : p_20136_.m_60827_();
+         SoundType soundtype = blockstate.m_60713_(Blocks.f_50125_) ? blockstate.getSoundType(f_19853_, p_20135_, this) : p_20136_.getSoundType(f_19853_, p_20135_, this);
          this.m_5496_(soundtype.m_56776_(), soundtype.m_56773_() * 0.15F, soundtype.m_56774_());
       }
    }
@@ -1063,19 +_,22 @@
 
    public void m_5844_() {
       if (this.m_6069_()) {
-         this.m_20282_(this.m_20142_() && this.m_20069_() && !this.m_20159_());
+         this.m_20282_(this.m_20142_() && (this.m_20069_() || this.isInFluidType((fluidType, height) -> this.canSwimInFluidType(fluidType))) && !this.m_20159_());
       } else {
-         this.m_20282_(this.m_20142_() && this.m_5842_() && !this.m_20159_() && this.f_19853_.m_6425_(this.f_19826_).m_205070_(FluidTags.f_13131_));
+         this.m_20282_(this.m_20142_() && (this.m_5842_() || this.canStartSwimming()) && !this.m_20159_());
       }
 
    }
 
    protected boolean m_20073_() {
       this.f_19799_.clear();
+      this.forgeFluidTypeHeight.clear();
       this.m_20074_();
-      double d0 = this.f_19853_.m_6042_().f_63857_() ? 0.007D : 0.0023333333333333335D;
-      boolean flag = this.m_204031_(FluidTags.f_13132_, d0);
-      return this.m_20069_() || flag;
+      if (!(this.m_20202_() instanceof Boat)) {
+         this.f_19789_ *= this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().filter(e -> !e.getKey().isAir() && !e.getKey().isVanilla()).map(e -> this.getFluidFallDistanceModifier(e.getKey())).min(Float::compare).orElse(1F);
+         if (this.isInFluidType((fluidType, height) -> !fluidType.isAir() && !fluidType.isVanilla() && this.canFluidExtinguish(fluidType))) this.m_20095_();
+      }
+      return this.isInFluidType();
    }
 
    void m_20074_() {
@@ -1098,6 +_,7 @@
    private void m_20323_() {
       this.f_19800_ = this.m_204029_(FluidTags.f_13131_);
       this.f_19801_.clear();
+      this.forgeFluidTypeOnEyes = net.minecraftforge.common.ForgeMod.EMPTY_TYPE.get();
       double d0 = this.m_20188_() - (double)0.11111111F;
       Entity entity = this.m_20202_();
       if (entity instanceof Boat boat) {
@@ -1110,7 +_,7 @@
       FluidState fluidstate = this.f_19853_.m_6425_(blockpos);
       double d1 = (double)((float)blockpos.m_123342_() + fluidstate.m_76155_(this.f_19853_, blockpos));
       if (d1 > d0) {
-         fluidstate.m_205075_().forEach(this.f_19801_::add);
+         this.forgeFluidTypeOnEyes = fluidstate.getFluidType();
       }
 
    }
@@ -1154,7 +_,7 @@
    }
 
    public boolean m_5843_() {
-      return this.m_20142_() && !this.m_20069_() && !this.m_5833_() && !this.m_6047_() && !this.m_20077_() && this.m_6084_();
+      return this.m_20142_() && !this.m_20069_() && !this.m_5833_() && !this.m_6047_() && !this.m_20077_() && this.m_6084_() && !this.isInFluidType();
    }
 
    protected void m_20076_() {
@@ -1163,19 +_,23 @@
       int k = Mth.m_14107_(this.m_20189_());
       BlockPos blockpos = new BlockPos(i, j, k);
       BlockState blockstate = this.f_19853_.m_8055_(blockpos);
+      if(!blockstate.addRunningEffects(f_19853_, blockpos, this))
       if (blockstate.m_60799_() != RenderShape.INVISIBLE) {
          Vec3 vec3 = this.m_20184_();
-         this.f_19853_.m_7106_(new BlockParticleOption(ParticleTypes.f_123794_, blockstate), this.m_20185_() + (this.f_19796_.m_188500_() - 0.5D) * (double)this.f_19815_.f_20377_, this.m_20186_() + 0.1D, this.m_20189_() + (this.f_19796_.m_188500_() - 0.5D) * (double)this.f_19815_.f_20377_, vec3.f_82479_ * -4.0D, 1.5D, vec3.f_82481_ * -4.0D);
+         this.f_19853_.m_7106_(new BlockParticleOption(ParticleTypes.f_123794_, blockstate).setPos(blockpos), this.m_20185_() + (this.f_19796_.m_188500_() - 0.5D) * (double)this.f_19815_.f_20377_, this.m_20186_() + 0.1D, this.m_20189_() + (this.f_19796_.m_188500_() - 0.5D) * (double)this.f_19815_.f_20377_, vec3.f_82479_ * -4.0D, 1.5D, vec3.f_82481_ * -4.0D);
       }
 
    }
 
+   @Deprecated // Forge: Use isEyeInFluidType instead
    public boolean m_204029_(TagKey<Fluid> p_204030_) {
+      if (p_204030_ == FluidTags.f_13131_) return this.isEyeInFluidType(net.minecraftforge.common.ForgeMod.WATER_TYPE.get());
+      else if (p_204030_ == FluidTags.f_13132_) return this.isEyeInFluidType(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get());
       return this.f_19801_.contains(p_204030_);
    }
 
    public boolean m_20077_() {
-      return !this.f_19803_ && this.f_19799_.getDouble(FluidTags.f_13132_) > 0.0D;
+      return !this.f_19803_ && this.forgeFluidTypeHeight.getDouble(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get()) > 0.0D;
    }
 
    public void m_19920_(float p_19921_, Vec3 p_19922_) {
@@ -1207,6 +_,7 @@
       this.m_146926_(Mth.m_14036_(p_19895_, -90.0F, 90.0F) % 360.0F);
       this.f_19859_ = this.m_146908_();
       this.f_19860_ = this.m_146909_();
+      this.m_5616_(p_19894_); // Paper - Update head rotation
    }
 
    public void m_20248_(double p_20249_, double p_20250_, double p_20251_) {
@@ -1216,6 +_,7 @@
       this.f_19855_ = p_20250_;
       this.f_19856_ = d1;
       this.m_6034_(d0, p_20250_, d1);
+      if (this.isValid) this.f_19853_.m_6325_((int) Math.floor(this.m_20185_()) >> 4, (int) Math.floor(this.m_20189_()) >> 4); // CraftBukkit
    }
 
    public void m_20219_(Vec3 p_20220_) {
@@ -1231,11 +_,19 @@
    }
 
    public void m_7678_(double p_20108_, double p_20109_, double p_20110_, float p_20111_, float p_20112_) {
+      // Paper - cancel entity velocity if teleported
+      if (!preserveMotion) {
+         this.f_19827_ = Vec3.f_82478_;
+      } else {
+         this.preserveMotion = false;
+      }
+      // Paper end
       this.m_20343_(p_20108_, p_20109_, p_20110_);
       this.m_146922_(p_20111_);
       this.m_146926_(p_20112_);
       this.m_146867_();
       this.m_20090_();
+      this.m_5616_(p_20111_); // Paper - Update head rotation
    }
 
    public final void m_146867_() {
@@ -1489,6 +_,8 @@
             p_20241_.m_128379_("HasVisualFire", this.f_146813_);
          }
 
+         p_20241_.m_128379_("CanUpdate", canUpdate);
+
          if (!this.f_19841_.isEmpty()) {
             ListTag listtag = new ListTag();
 
@@ -1499,6 +_,10 @@
             p_20241_.m_128365_("Tags", listtag);
          }
 
+         CompoundTag caps = serializeCaps();
+         if (caps != null) p_20241_.m_128365_("ForgeCaps", caps);
+         if (persistentData != null) p_20241_.m_128365_("ForgeData", persistentData.m_6426_());
+
          this.m_7380_(p_20241_);
          if (this.m_20160_()) {
             ListTag listtag1 = new ListTag();
@@ -1574,6 +_,9 @@
                this.m_146915_(p_20259_.m_128471_("Glowing"));
                this.m_146917_(p_20259_.m_128451_("TicksFrozen"));
                this.f_146813_ = p_20259_.m_128471_("HasVisualFire");
+               if (p_20259_.m_128425_("ForgeData", 10)) persistentData = p_20259_.m_128469_("ForgeData");
+               if (p_20259_.m_128425_("CanUpdate", 99)) this.canUpdate(p_20259_.m_128471_("CanUpdate"));
+               if (p_20259_.m_128425_("ForgeCaps", 10)) deserializeCaps(p_20259_.m_128469_("ForgeCaps"));
                if (p_20259_.m_128425_("Tags", 9)) {
                   this.f_19841_.clear();
                   ListTag listtag3 = p_20259_.m_128437_("Tags", 8);
@@ -1662,6 +_,8 @@
       } else {
          ItemEntity itementity = new ItemEntity(this.f_19853_, this.m_20185_(), this.m_20186_() + (double)p_19986_, this.m_20189_(), p_19985_);
          itementity.m_32060_();
+         if (captureDrops() != null) captureDrops().add(itementity);
+         else
          this.f_19853_.m_7967_(itementity);
          return itementity;
       }
@@ -1677,10 +_,30 @@
       } else {
          float f = this.f_19815_.f_20377_ * 0.8F;
          AABB aabb = AABB.m_165882_(this.m_146892_(), (double)f, 1.0E-6D, (double)f);
-         return BlockPos.m_121921_(aabb).anyMatch((p_201942_) -> {
-            BlockState blockstate = this.f_19853_.m_8055_(p_201942_);
-            return !blockstate.m_60795_() && blockstate.m_60828_(this.f_19853_, p_201942_) && Shapes.m_83157_(blockstate.m_60812_(this.f_19853_, p_201942_).m_83216_((double)p_201942_.m_123341_(), (double)p_201942_.m_123342_(), (double)p_201942_.m_123343_()), Shapes.m_83064_(aabb), BooleanOp.f_82689_);
-         });
+         BlockPos.MutableBlockPos blockposition = new BlockPos.MutableBlockPos();
+         int minX = Mth.m_14107_(aabb.f_82288_);
+         int minY = Mth.m_14107_(aabb.f_82289_);
+         int minZ = Mth.m_14107_(aabb.f_82290_);
+         int maxX = Mth.m_14107_(aabb.f_82291_);
+         int maxY = Mth.m_14107_(aabb.f_82292_);
+         int maxZ = Mth.m_14107_(aabb.f_82293_);
+         for (int fz = minZ; fz <= maxZ; ++fz) {
+            for (int fx = minX; fx <= maxX; ++fx) {
+               for (int fy = minY; fy <= maxY; ++fy) {
+                  net.minecraft.world.level.chunk.LevelChunk chunk = (net.minecraft.world.level.chunk.LevelChunk)this.f_19853_.getChunkIfLoadedImmediately(fx >> 4, fz >> 4);
+                  if (chunk == null) {
+                     continue;
+                  }
+
+                  BlockState iblockdata = chunk.getBlockStateFinal(fx, fy, fz);
+                  blockposition.m_122178_(fx, fy, fz);
+                  if (!iblockdata.m_60795_() && iblockdata.m_60828_(this.f_19853_, blockposition) && Shapes.m_83157_(iblockdata.m_60812_(this.f_19853_, blockposition).m_83216_((double) blockposition.m_123341_(), (double) blockposition.m_123342_(), (double) blockposition.m_123343_()), Shapes.m_83064_(aabb), BooleanOp.f_82689_)) {
+                     return true;
+                  }
+               }
+            }
+         }
+         return false;
       }
    }
 
@@ -1698,6 +_,7 @@
 
    public void m_6083_() {
       this.m_20256_(Vec3.f_82478_);
+      if (canUpdate())
       this.m_8119_();
       if (this.m_20159_()) {
          this.m_20202_().m_7332_(this);
@@ -1744,6 +_,7 @@
             }
          }
 
+      if (!net.minecraftforge.event.ForgeEventFactory.canMountEntity(this, p_19966_, true)) return false;
          if (p_19967_ || this.m_7341_(p_19966_) && p_19966_.m_7310_(this)) {
             if (this.m_20159_()) {
                this.m_8127_();
@@ -1782,6 +_,7 @@
    public void m_6038_() {
       if (this.f_19824_ != null) {
          Entity entity = this.f_19824_;
+         if (!net.minecraftforge.event.ForgeEventFactory.canMountEntity(this, entity, false)) return;
          this.f_19824_ = null;
          entity.m_20351_(this);
       }
@@ -1957,6 +_,8 @@
       return !this.f_19823_.isEmpty();
    }
 
+   /** @deprecated Forge: Use {@link #canBeRiddenUnderFluidType(net.minecraftforge.fluids.FluidType, Entity) rider sensitive version} */
+   @Deprecated
    public boolean m_6146_() {
       return true;
    }
@@ -2006,7 +_,7 @@
    }
 
    public boolean m_20143_() {
-      return this.m_6067_() && !this.m_20069_();
+      return this.m_6067_() && !this.m_20069_() && !this.isInFluidType((fluidType, height) -> this.canSwimInFluidType(fluidType));
    }
 
    public void m_20282_(boolean p_20283_) {
@@ -2112,7 +_,7 @@
          this.m_20254_(8);
       }
 
-      this.m_6469_(DamageSource.f_19306_, 5.0F);
+      this.m_6469_(DamageSource.f_19306_, p_19928_.getDamage());
    }
 
    public void m_6845_(boolean p_20313_) {
@@ -2201,7 +_,7 @@
    }
 
    protected Component m_5677_() {
-      return this.f_19847_.m_20676_();
+      return this.m_6095_().m_20676_(); // Forge: Use getter to allow overriding by mods
    }
 
    public boolean m_7306_(Entity p_20356_) {
@@ -2257,14 +_,20 @@
 
    @Nullable
    public Entity m_5489_(ServerLevel p_20118_) {
+      return this.changeDimension(p_20118_, p_20118_.m_8871_());
+   }
+   @Nullable
+   public Entity changeDimension(ServerLevel p_20118_, net.minecraftforge.common.util.ITeleporter teleporter) {
+      if (!net.minecraftforge.common.ForgeHooks.onTravelToDimension(this, p_20118_.m_46472_())) return null;
       if (this.f_19853_ instanceof ServerLevel && !this.m_213877_()) {
          this.f_19853_.m_46473_().m_6180_("changeDimension");
          this.m_19877_();
          this.f_19853_.m_46473_().m_6180_("reposition");
-         PortalInfo portalinfo = this.m_7937_(p_20118_);
+         PortalInfo portalinfo = teleporter.getPortalInfo(this, p_20118_, this::m_7937_);
          if (portalinfo == null) {
             return null;
          } else {
+            Entity transportedEntity = teleporter.placeEntity(this, (ServerLevel) this.f_19853_, p_20118_, this.f_19857_, spawnPortal -> { //Forge: Start vanilla logic
             this.f_19853_.m_46473_().m_6182_("reloading");
             Entity entity = this.m_6095_().m_20615_(p_20118_);
             if (entity != null) {
@@ -2272,17 +_,19 @@
                entity.m_7678_(portalinfo.f_77676_.f_82479_, portalinfo.f_77676_.f_82480_, portalinfo.f_77676_.f_82481_, portalinfo.f_77678_, entity.m_146909_());
                entity.m_20256_(portalinfo.f_77677_);
                p_20118_.m_143334_(entity);
-               if (p_20118_.m_46472_() == Level.f_46430_) {
+               if (spawnPortal && p_20118_.m_46472_() == Level.f_46430_) {
                   ServerLevel.m_8617_(p_20118_);
                }
             }
+            return entity;
+            }); //Forge: End vanilla logic
 
             this.m_6089_();
             this.f_19853_.m_46473_().m_7238_();
             ((ServerLevel)this.f_19853_).m_8886_();
             p_20118_.m_8886_();
             this.f_19853_.m_46473_().m_7238_();
-            return entity;
+            return transportedEntity;
          }
       } else {
          return null;
@@ -2404,6 +_,7 @@
       return this.f_19821_;
    }
 
+   @Deprecated // Forge: Use FluidType sensitive version
    public boolean m_6063_() {
       return true;
    }
@@ -2483,8 +_,10 @@
       EntityDimensions entitydimensions = this.f_19815_;
       Pose pose = this.m_20089_();
       EntityDimensions entitydimensions1 = this.m_6972_(pose);
+      net.minecraftforge.event.entity.EntityEvent.Size sizeEvent = net.minecraftforge.event.ForgeEventFactory.getEntitySizeForge(this, pose, entitydimensions, entitydimensions1, this.m_6380_(pose, entitydimensions1));
+      entitydimensions1 = sizeEvent.getNewSize();
       this.f_19815_ = entitydimensions1;
-      this.f_19816_ = this.m_6380_(pose, entitydimensions1);
+      this.f_19816_ = sizeEvent.getNewEyeHeight();
       this.m_20090_();
       boolean flag = (double)entitydimensions1.f_20377_ <= 4.0D && (double)entitydimensions1.f_20378_ <= 4.0D;
       if (!this.f_19853_.f_46443_ && !this.f_19803_ && !this.f_19794_ && flag && (entitydimensions1.f_20377_ > entitydimensions.f_20377_ || entitydimensions1.f_20378_ > entitydimensions.f_20378_) && !(this instanceof Player)) {
@@ -2492,8 +_,9 @@
          double d0 = (double)Math.max(0.0F, entitydimensions1.f_20377_ - entitydimensions.f_20377_) + 1.0E-6D;
          double d1 = (double)Math.max(0.0F, entitydimensions1.f_20378_ - entitydimensions.f_20378_) + 1.0E-6D;
          VoxelShape voxelshape = Shapes.m_83064_(AABB.m_165882_(vec3, d0, d1, d0));
+         EntityDimensions finalEntitydimensions = entitydimensions1;
          this.f_19853_.m_151418_(this, voxelshape, vec3, (double)entitydimensions1.f_20377_, (double)entitydimensions1.f_20378_, (double)entitydimensions1.f_20377_).ifPresent((p_185956_) -> {
-            this.m_146884_(p_185956_.m_82520_(0.0D, (double)(-entitydimensions1.f_20378_) / 2.0D, 0.0D));
+            this.m_146884_(p_185956_.m_82520_(0.0D, (double)(-finalEntitydimensions.f_20378_) / 2.0D, 0.0D));
          });
       }
 
@@ -2652,24 +_,44 @@
    }
 
    private Stream<Entity> m_146920_() {
+      if (this.f_19823_.isEmpty()) { return Stream.of(); } // Paper
       return this.f_19823_.stream().flatMap(Entity::m_20199_);
    }
 
    public Stream<Entity> m_20199_() {
+      if (this.f_19823_.isEmpty()) { return Stream.of(this); } // Paper
       return Stream.concat(Stream.of(this), this.m_146920_());
    }
 
    public Stream<Entity> m_142429_() {
+      if (this.f_19823_.isEmpty()) { return Stream.of(this); } // Paper
       return Stream.concat(this.f_19823_.stream().flatMap(Entity::m_142429_), Stream.of(this));
    }
 
    public Iterable<Entity> m_146897_() {
-      return () -> {
-         return this.m_146920_().iterator();
-      };
-   }
+      // Paper start - rewrite this method
+      if (this.f_19823_.isEmpty()) { return ImmutableList.of(); }
+      ImmutableList.Builder<Entity> indirectPassengers = ImmutableList.builder();
+      for (Entity passenger : this.f_19823_) {
+         indirectPassengers.add(passenger);
+         indirectPassengers.addAll(passenger.m_146897_());
+      }
+      return indirectPassengers.build();
+      // Paper end
+   }
+
+   // Paper start - rewrite chunk system
+   public boolean hasAnyPlayerPassengers() {
+      // copied from below
+      if (this.f_19823_.isEmpty()) { return false; }
+      return this.m_146920_().anyMatch((entity) -> {
+         return entity instanceof Player;
+      });
+   }
+   // Paper end - rewrite chunk system
 
    public boolean m_146898_() {
+      if (this.f_19823_.isEmpty()) { return false; } // Paper
       return this.m_146920_().filter((p_185943_) -> {
          return p_185943_ instanceof Player;
       }).count() == 1L;
@@ -2768,9 +_,17 @@
       this.f_19859_ = this.m_146908_();
    }
 
+   @Deprecated // Forge: Use no parameter version instead, only for vanilla Tags
    public boolean m_204031_(TagKey<Fluid> p_204032_, double p_204033_) {
+      this.updateFluidHeightAndDoFluidPushing();
+      if(p_204032_ == FluidTags.f_13131_) return this.isInFluidType(net.minecraftforge.common.ForgeMod.WATER_TYPE.get());
+      else if (p_204032_ == FluidTags.f_13132_) return this.isInFluidType(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get());
+      else return false;
+   }
+
+   public void updateFluidHeightAndDoFluidPushing() {
       if (this.m_146899_()) {
-         return false;
+         return;
       } else {
          AABB aabb = this.m_20191_().m_82406_(0.001D);
          int i = Mth.m_14107_(aabb.f_82288_);
@@ -2785,25 +_,28 @@
          Vec3 vec3 = Vec3.f_82478_;
          int k1 = 0;
          BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
+         it.unimi.dsi.fastutil.objects.Object2ObjectMap<net.minecraftforge.fluids.FluidType, org.apache.commons.lang3.tuple.MutableTriple<Double, Vec3, Integer>> interimCalcs = new it.unimi.dsi.fastutil.objects.Object2ObjectArrayMap<>(net.minecraftforge.fluids.FluidType.SIZE.get() - 1);
 
          for(int l1 = i; l1 < j; ++l1) {
             for(int i2 = k; i2 < l; ++i2) {
                for(int j2 = i1; j2 < j1; ++j2) {
                   blockpos$mutableblockpos.m_122178_(l1, i2, j2);
                   FluidState fluidstate = this.f_19853_.m_6425_(blockpos$mutableblockpos);
-                  if (fluidstate.m_205070_(p_204032_)) {
+                  net.minecraftforge.fluids.FluidType fluidType = fluidstate.getFluidType();
+                  if (!fluidType.isAir()) {
                      double d1 = (double)((float)i2 + fluidstate.m_76155_(this.f_19853_, blockpos$mutableblockpos));
                      if (d1 >= aabb.f_82289_) {
                         flag1 = true;
-                        d0 = Math.max(d1 - aabb.f_82289_, d0);
-                        if (flag) {
+                        org.apache.commons.lang3.tuple.MutableTriple<Double, Vec3, Integer> interim = interimCalcs.computeIfAbsent(fluidType, t -> org.apache.commons.lang3.tuple.MutableTriple.of(0.0D, Vec3.f_82478_, 0));
+                        interim.setLeft(Math.max(d1 - aabb.f_82289_, interim.getLeft()));
+                        if (this.isPushedByFluid(fluidType)) {
                            Vec3 vec31 = fluidstate.m_76179_(this.f_19853_, blockpos$mutableblockpos);
-                           if (d0 < 0.4D) {
-                              vec31 = vec31.m_82490_(d0);
+                           if (interim.getLeft() < 0.4D) {
+                              vec31 = vec31.m_82490_(interim.getLeft());
                            }
 
-                           vec3 = vec3.m_82549_(vec31);
-                           ++k1;
+                           interim.setMiddle(interim.getMiddle().m_82549_(vec31));
+                           interim.setRight(interim.getRight() + 1);
                         }
                      }
                   }
@@ -2811,27 +_,28 @@
             }
          }
 
-         if (vec3.m_82553_() > 0.0D) {
-            if (k1 > 0) {
-               vec3 = vec3.m_82490_(1.0D / (double)k1);
+         interimCalcs.forEach((fluidType, interim) -> {
+         if (interim.getMiddle().m_82553_() > 0.0D) {
+            if (interim.getRight() > 0) {
+               interim.setMiddle(interim.getMiddle().m_82490_(1.0D / (double)interim.getRight()));
             }
 
             if (!(this instanceof Player)) {
-               vec3 = vec3.m_82541_();
+               interim.setMiddle(interim.getMiddle().m_82541_());
             }
 
             Vec3 vec32 = this.m_20184_();
-            vec3 = vec3.m_82490_(p_204033_ * 1.0D);
+            interim.setMiddle(interim.getMiddle().m_82490_(this.getFluidMotionScale(fluidType)));
             double d2 = 0.003D;
-            if (Math.abs(vec32.f_82479_) < 0.003D && Math.abs(vec32.f_82481_) < 0.003D && vec3.m_82553_() < 0.0045000000000000005D) {
-               vec3 = vec3.m_82541_().m_82490_(0.0045000000000000005D);
+            if (Math.abs(vec32.f_82479_) < 0.003D && Math.abs(vec32.f_82481_) < 0.003D && interim.getMiddle().m_82553_() < 0.0045000000000000005D) {
+               interim.setMiddle(interim.getMiddle().m_82541_().m_82490_(0.0045000000000000005D));
             }
 
-            this.m_20256_(this.m_20184_().m_82549_(vec3));
+            this.m_20256_(this.m_20184_().m_82549_(interim.getMiddle()));
          }
 
-         this.f_19799_.put(p_204032_, d0);
-         return flag1;
+         this.setFluidTypeHeight(fluidType, interim.getLeft());
+         });
       }
    }
 
@@ -2844,7 +_,10 @@
       return !this.f_19853_.m_151572_(i, k, j, l);
    }
 
+   @Deprecated // Forge: Use getFluidTypeHeight instead
    public double m_204036_(TagKey<Fluid> p_204037_) {
+      if (p_204037_ == FluidTags.f_13131_) return getFluidTypeHeight(net.minecraftforge.common.ForgeMod.WATER_TYPE.get());
+      else if (p_204037_ == FluidTags.f_13132_) return getFluidTypeHeight(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get());
       return this.f_19799_.getDouble(p_204037_);
    }
 
@@ -2895,7 +_,9 @@
    }
 
    public void m_20256_(Vec3 p_20257_) {
-      this.f_19827_ = p_20257_;
+      synchronized (this.posLock) { // Paper
+         this.f_19827_ = p_20257_;
+      }
    }
 
    public void m_20334_(double p_20335_, double p_20336_, double p_20337_) {
@@ -2954,9 +_,42 @@
       return this.m_20246_((2.0D * this.f_19796_.m_188500_() - 1.0D) * p_20263_);
    }
 
+   // Paper start - block invalid positions
+   public static boolean checkPosition(Entity entity, double newX, double newY, double newZ) {
+      if (Double.isFinite(newX) && Double.isFinite(newY) && Double.isFinite(newZ)) {
+         return true;
+      }
+
+      String entityInfo = null;
+      try {
+         entityInfo = entity.toString();
+      } catch (Exception ex) {
+         entityInfo = "[Entity info unavailable] ";
+      }
+      f_19849_.error("New entity position is invalid! Tried to set invalid position (" + newX + "," + newY + "," + newZ + ") for entity " + entity.getClass().getName() + " located at " + entity.f_19825_ + ", entity info: " + entityInfo, new Throwable());
+      return false;
+   }
+   // Paper end - block invalid positions
+
+
    public final void m_20343_(double p_20344_, double p_20345_, double p_20346_) {
+      // Paper start - block invalid positions
+      if (!checkPosition(this, p_20344_, p_20345_, p_20346_)) {
+         return;
+      }
+      // Paper end - block invalid positions
+      // Paper end
+      // Paper start - rewrite chunk system
+      if (this.updatingSectionStatus) {
+         f_19849_.error("Refusing to update position for entity " + this + " to position " + new Vec3( p_20344_, p_20345_, p_20346_) + " since it is processing a section status update", new Throwable());
+         return;
+      }
+      // Paper end - rewrite chunk system
+
       if (this.f_19825_.f_82479_ != p_20344_ || this.f_19825_.f_82480_ != p_20345_ || this.f_19825_.f_82481_ != p_20346_) {
-         this.f_19825_ = new Vec3(p_20344_, p_20345_, p_20346_);
+         synchronized (this.posLock) { // Paper
+            this.f_19825_ = new Vec3(p_20344_, p_20345_, p_20346_);
+         }
          int i = Mth.m_14107_(p_20344_);
          int j = Mth.m_14107_(p_20345_);
          int k = Mth.m_14107_(p_20346_);
@@ -2971,6 +_,15 @@
          this.f_146801_.m_142044_();
       }
 
+      // Paper start - never allow AABB to become desynced from position
+      // hanging has its own special logic
+      if (!(this instanceof net.minecraft.world.entity.decoration.HangingEntity) && (this.f_19825_.f_82479_ != p_20344_ || this.f_19825_.f_82480_ != p_20345_ || this.f_19825_.f_82481_ != p_20346_)) {
+         this.m_20011_(this.m_142242_());
+      }
+      // Paper end
+
+      if (this.isAddedToWorld() && !this.f_19853_.f_46443_ && !this.m_213877_()) this.f_19853_.m_6325_((int) Math.floor(p_20344_) >> 4, (int) Math.floor(p_20346_) >> 4); // Forge - ensure target chunk is loaded.
+
    }
 
    public void m_6043_() {
@@ -3048,6 +_,13 @@
    }
 
    public final void m_142467_(Entity.RemovalReason p_146876_) {
+      // Paper start - rewrite chunk system
+      io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot remove entity off-main");
+      if (!((ServerLevel)this.f_19853_).getEntityLookup().canRemoveEntity(this)) {
+         f_19849_.warn("Entity " + this + " is currently prevented from being removed from the world since it is processing section status updates", new Throwable());
+         return;
+      }
+      // Paper end - rewrite chunk system
       if (this.f_146795_ == null) {
          this.f_146795_ = p_146876_;
       }
@@ -3056,11 +_,11 @@
          this.m_8127_();
       }
 
-      this.m_20197_().forEach(Entity::m_8127_);
+      if (p_146876_ != RemovalReason.UNLOADED_TO_CHUNK) this.m_20197_().forEach(Entity::m_8127_); // Paper - chunk system - don't adjust passenger state when unloading, it's just not safe (and messes with our logic in entity chunk unload)
       this.f_146801_.m_142472_(p_146876_);
    }
 
-   protected void m_146912_() {
+   public void m_146912_() {
       this.f_146795_ = null;
    }
 
@@ -3074,7 +_,7 @@
       } else if (this.m_20159_()) {
          return false;
       } else {
-         return !this.m_20160_() || !this.m_146898_();
+         return !this.m_20160_() || !this.hasAnyPlayerPassengers(); // Paper - rewrite chunk system - it should check if the entity has ANY player passengers
       }
    }
 
@@ -3085,6 +_,103 @@
    public boolean m_142265_(Level p_146843_, BlockPos p_146844_) {
       return true;
    }
+
+   /* ================================== Forge Start =====================================*/
+
+   private boolean canUpdate = true;
+   @Override
+   public void canUpdate(boolean value) {
+      this.canUpdate = value;
+   }
+   @Override
+   public boolean canUpdate() {
+      return this.canUpdate;
+   }
+   private java.util.Collection<ItemEntity> captureDrops = null;
+   @Override
+   public java.util.Collection<ItemEntity> captureDrops() {
+      return captureDrops;
+   }
+   @Override
+   public java.util.Collection<ItemEntity> captureDrops(java.util.Collection<ItemEntity> value) {
+      java.util.Collection<ItemEntity> ret = captureDrops;
+      this.captureDrops = value;
+      return ret;
+   }
+   private CompoundTag persistentData;
+   @Override
+   public CompoundTag getPersistentData() {
+      if (persistentData == null)
+         persistentData = new CompoundTag();
+      return persistentData;
+   }
+   @Override
+   public boolean canTrample(BlockState state, BlockPos pos, float fallDistance) {
+      return f_19853_.f_46441_.m_188501_() < fallDistance - 0.5F
+          && this instanceof LivingEntity
+          && (this instanceof Player || net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(f_19853_, this))
+          && this.m_20205_() * this.m_20205_() * this.m_20206_() > 0.512F;
+   }
+
+   /**
+    * Internal use for keeping track of entities that are tracked by a world, to
+    * allow guarantees that entity position changes will force a chunk load, avoiding
+    * potential issues with entity desyncing and bad chunk data.
+    */
+   private boolean isAddedToWorld;
+
+   @Override
+   public final boolean isAddedToWorld() { return this.isAddedToWorld; }
+
+   @Override
+   public void onAddedToWorld() { this.isAddedToWorld = true; }
+
+   @Override
+   public void onRemovedFromWorld() { this.isAddedToWorld = false; }
+
+   @Override
+   public void revive() {
+      this.m_146912_();
+      this.reviveCaps();
+   }
+
+   // no AT because of overrides
+   /**
+    * Accessor method for {@link #getEyeHeight(Pose, EntityDimensions)}
+    */
+   public float getEyeHeightAccess(Pose pose, EntityDimensions size) {
+      return this.m_6380_(pose, size);
+   }
+
+   protected Object2DoubleMap<net.minecraftforge.fluids.FluidType> forgeFluidTypeHeight = new Object2DoubleArrayMap<>(net.minecraftforge.fluids.FluidType.SIZE.get());
+   private net.minecraftforge.fluids.FluidType forgeFluidTypeOnEyes = net.minecraftforge.common.ForgeMod.EMPTY_TYPE.get();
+   protected final void setFluidTypeHeight(net.minecraftforge.fluids.FluidType type, double height) {
+      this.forgeFluidTypeHeight.put(type, height);
+   }
+   @Override
+   public final double getFluidTypeHeight(net.minecraftforge.fluids.FluidType type) {
+      return this.forgeFluidTypeHeight.getDouble(type);
+   }
+   @Override
+   public final boolean isInFluidType(java.util.function.BiPredicate<net.minecraftforge.fluids.FluidType, Double> predicate, boolean forAllTypes) {
+      return forAllTypes ? this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().allMatch(e -> predicate.test(e.getKey(), e.getDoubleValue()))
+              : this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().anyMatch(e -> predicate.test(e.getKey(), e.getDoubleValue()));
+   }
+   @Override
+   public final boolean isInFluidType() {
+      return this.forgeFluidTypeHeight.size() > 0;
+   }
+  @Override
+  public final net.minecraftforge.fluids.FluidType getEyeInFluidType() {
+      return forgeFluidTypeOnEyes;
+   }
+   @Override
+   public net.minecraftforge.fluids.FluidType getMaxHeightFluidType() {
+      return this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().max(java.util.Comparator.comparingDouble(Object2DoubleMap.Entry::getDoubleValue)).map(Object2DoubleMap.Entry::getKey).orElseGet(net.minecraftforge.common.ForgeMod.EMPTY_TYPE);
+   }
+
+   /* ================================== Forge End =====================================*/
+
 
    public Level m_9236_() {
       return this.f_19853_;
