--- a/net/minecraft/util/ClassInstanceMultiMap.java
+++ b/net/minecraft/util/ClassInstanceMultiMap.java
@@ -4,16 +_,13 @@
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import java.util.AbstractCollection;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
+import it.unimi.dsi.fastutil.objects.Reference2ReferenceOpenHashMap;
+
+import java.util.*;
 import java.util.stream.Collectors;
 
 public class ClassInstanceMultiMap<T> extends AbstractCollection<T> {
-   private final Map<Class<?>, List<T>> f_13527_ = Maps.newHashMap();
+   private final Map<Class<?>, List<T>> f_13527_ = new Reference2ReferenceOpenHashMap<>(Maps.newHashMap()); // Goldenforge
    private final Class<T> f_13528_;
    private final List<T> f_13529_ = Lists.newArrayList();
 
@@ -51,15 +_,29 @@
       return this.m_13533_(p_13540_.getClass()).contains(p_13540_);
    }
 
+   // Goldenforge
    public <S> Collection<S> m_13533_(Class<S> p_13534_) {
-      if (!this.f_13528_.isAssignableFrom(p_13534_)) {
-         throw new IllegalArgumentException("Don't know how to search for " + p_13534_);
-      } else {
-         List<? extends T> list = this.f_13527_.computeIfAbsent(p_13534_, (p_13538_) -> {
-            return this.f_13529_.stream().filter(p_13538_::isInstance).collect(Collectors.toList());
-         });
-         return (Collection<S>)Collections.unmodifiableCollection(list);
-      }
+      Collection<T> collection = this.f_13527_.get(p_13534_);
+
+      if (collection == null) {
+         collection = this.createAllOfType(p_13534_);
+      }
+
+      return (Collection<S>) Collections.unmodifiableCollection(collection);
+   }
+
+   private <S> Collection<T> createAllOfType(Class<S> type) {
+      List<T> list = new ArrayList<>();
+
+      for (T allElement : this.f_13529_) {
+         if (type.isInstance(allElement)) {
+            list.add(allElement);
+         }
+      }
+
+      this.f_13527_.put(type, list);
+
+      return list;
    }
 
    public Iterator<T> iterator() {
