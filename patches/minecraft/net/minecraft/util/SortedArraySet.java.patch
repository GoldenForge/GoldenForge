--- a/net/minecraft/util/SortedArraySet.java
+++ b/net/minecraft/util/SortedArraySet.java
@@ -23,6 +_,67 @@
       }
    }
 
+   // Paper start - rewrite chunk system
+   public T replace(T object) {
+      int i = this.m_14269_(object);
+      if (i >= 0) {
+         T old = this.f_14241_[i];
+         this.f_14241_[i] = object;
+         return old;
+      } else {
+         this.m_14255_(object, m_14263_(i));
+         return object;
+      }
+   }
+
+   public T removeAndGet(T object) {
+      int i = this.m_14269_(object);
+      if (i >= 0) {
+         final T ret = this.f_14241_[i];
+         this.m_14274_(i);
+         return ret;
+      } else {
+         return null;
+      }
+   }
+   // Paper end - rewrite chunk system
+
+   // Paper start - optimise removeIf
+   @Override
+   public boolean removeIf(java.util.function.Predicate<? super T> filter) {
+      // prev. impl used an iterator, which could be n^2 and creates garbage
+      int i = 0, len = this.f_14242_;
+      T[] backingArray = this.f_14241_;
+
+      for (;;) {
+         if (i >= len) {
+            return false;
+         }
+         if (!filter.test(backingArray[i])) {
+            ++i;
+            continue;
+         }
+         break;
+      }
+
+      // we only want to write back to backingArray if we really need to
+
+      int lastIndex = i; // this is where new elements are shifted to
+
+      for (; i < len; ++i) {
+         T curr = backingArray[i];
+         if (!filter.test(curr)) { // if test throws we're screwed
+            backingArray[lastIndex++] = curr;
+         }
+      }
+
+      // cleanup end
+      Arrays.fill(backingArray, lastIndex, len, null);
+      this.f_14242_ = lastIndex;
+      return true;
+   }
+   // Paper end - optimise removeIf
+
    public static <T extends Comparable<T>> SortedArraySet<T> m_144975_() {
       return m_14246_(10);
    }
