--- a/net/minecraft/server/level/ChunkMap.java
+++ b/net/minecraft/server/level/ChunkMap.java
@@ -3,14 +_,13 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
-import com.google.common.collect.Queues;
-import com.google.common.collect.Sets;
 import com.google.gson.JsonElement;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Either;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.JsonOps;
+import io.papermc.paper.util.MCUtil;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ByteMap;
@@ -18,36 +_,23 @@
 import it.unimi.dsi.fastutil.longs.Long2LongMap;
 import it.unimi.dsi.fastutil.longs.Long2LongOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
-import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
-import it.unimi.dsi.fastutil.longs.LongIterator;
-import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
-import it.unimi.dsi.fastutil.longs.LongSet;
-import it.unimi.dsi.fastutil.objects.ObjectIterator;
+
 import java.io.IOException;
 import java.io.Writer;
 import java.nio.file.Path;
-import java.util.ArrayList;
-import java.util.BitSet;
-import java.util.List;
-import java.util.Locale;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Queue;
-import java.util.Set;
+import java.util.*;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionException;
 import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.BooleanSupplier;
-import java.util.function.Consumer;
 import java.util.function.IntFunction;
 import java.util.function.IntSupplier;
 import java.util.function.Supplier;
-import java.util.stream.Collectors;
 import javax.annotation.Nullable;
-import net.minecraft.CrashReport;
-import net.minecraft.CrashReportCategory;
+
+import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet;
 import net.minecraft.ReportedException;
 import net.minecraft.Util;
 import net.minecraft.core.Registry;
@@ -55,29 +_,23 @@
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket;
-import net.minecraft.network.protocol.game.ClientboundSetChunkCacheCenterPacket;
-import net.minecraft.network.protocol.game.ClientboundSetEntityLinkPacket;
-import net.minecraft.network.protocol.game.ClientboundSetPassengersPacket;
 import net.minecraft.network.protocol.game.DebugPackets;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.server.level.progress.ChunkProgressListener;
 import net.minecraft.server.network.ServerPlayerConnection;
-import net.minecraft.util.CsvOutput;
 import net.minecraft.util.Mth;
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.util.thread.BlockableEventLoop;
-import net.minecraft.util.thread.ProcessorHandle;
-import net.minecraft.util.thread.ProcessorMailbox;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
-import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.chunk.ChunkStatus;
-import net.minecraft.world.level.chunk.ImposterProtoChunk;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.LightChunkGetter;
 import net.minecraft.world.level.chunk.ProtoChunk;
@@ -89,13 +_,14 @@
 import net.minecraft.world.level.levelgen.NoiseGeneratorSettings;
 import net.minecraft.world.level.levelgen.RandomState;
 import net.minecraft.world.level.levelgen.blending.BlendingData;
-import net.minecraft.world.level.levelgen.structure.StructureStart;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
 import net.minecraft.world.level.storage.DimensionDataStorage;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.phys.Vec3;
-import org.apache.commons.lang3.mutable.MutableBoolean;
 import org.apache.commons.lang3.mutable.MutableObject;
+import org.goldenforge.GoldenConfig;
+import org.goldenforge.config.GoldenForgeConfig;
+import me.wesley1808.servercore.DynamicSetting;
 import org.slf4j.Logger;
 
 public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider {
@@ -110,37 +_,124 @@
    public static final int f_143032_ = 33;
    public static final int f_140127_ = 33 + ChunkStatus.m_62421_();
    public static final int f_143033_ = 31;
-   private final Long2ObjectLinkedOpenHashMap<ChunkHolder> f_140129_ = new Long2ObjectLinkedOpenHashMap<>();
-   private volatile Long2ObjectLinkedOpenHashMap<ChunkHolder> f_140130_ = this.f_140129_.clone();
-   private final Long2ObjectLinkedOpenHashMap<ChunkHolder> f_140131_ = new Long2ObjectLinkedOpenHashMap<>();
-   private final LongSet f_140132_ = new LongOpenHashSet();
-   final ServerLevel f_140133_;
+   private final Long2ObjectLinkedOpenHashMap<ChunkHolder> f_140129_ = new Long2ObjectLinkedOpenHashMap<>();// Goldenforge: keep this so modernfix don't crash on server stop
+
+   private volatile Long2ObjectLinkedOpenHashMap<ChunkHolder> f_140130_ = new Long2ObjectLinkedOpenHashMap<ChunkHolder>() {
+
+
+      // minecolonies compatibility
+      @Override
+      public ChunkHolder get(long k) {
+         return ChunkMap.this.m_140327_(k);
+      }
+
+      @Override
+      public int size() {
+         return ChunkMap.this.m_140394_();
+      }
+   };
+
+   private final Long2ObjectLinkedOpenHashMap<ChunkHolder> f_140131_ = new Long2ObjectLinkedOpenHashMap<>(); // Goldenforge: keep this so modernfix don't crash on server stop
+   //private final LongSet entitiesInLevel = new LongOpenHashSet();
+   public final ServerLevel f_140133_;
    private final ThreadedLevelLightEngine f_140134_;
-   private final BlockableEventLoop<Runnable> f_140135_;
-   private ChunkGenerator f_140136_;
+   public final BlockableEventLoop<Runnable> f_140135_;
+   public ChunkGenerator f_140136_;
    private RandomState f_214834_;
-   private final Supplier<DimensionDataStorage> f_140137_;
+   public final Supplier<DimensionDataStorage> f_140137_;
    private final PoiManager f_140138_;
-   final LongSet f_140139_ = new LongOpenHashSet();
+   //final LongSet toDrop = new LongOpenHashSet();
    private boolean f_140140_;
-   private final ChunkTaskPriorityQueueSorter f_140141_;
-   private final ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> f_140142_;
-   private final ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> f_140143_;
+   //private final ChunkTaskPriorityQueueSorter queueSorter;
+   //private final ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> worldgenMailbox;
+   //private final ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> mainThreadMailbox;
    private final ChunkProgressListener f_140144_;
    private final ChunkStatusUpdateListener f_143031_;
-   private final ChunkMap.DistanceManager f_140145_;
+   public final ChunkMap.DistanceManager f_140145_;
    private final AtomicInteger f_140146_ = new AtomicInteger();
-   private final StructureTemplateManager f_214833_;
+   public final StructureTemplateManager f_214833_;
    private final String f_182284_;
    private final PlayerMap f_140149_ = new PlayerMap();
    private final Int2ObjectMap<ChunkMap.TrackedEntity> f_140150_ = new Int2ObjectOpenHashMap<>();
    private final Long2ByteMap f_140151_ = new Long2ByteOpenHashMap();
    private final Long2LongMap f_202981_ = new Long2LongOpenHashMap();
-   private final Queue<Runnable> f_140125_ = Queues.newConcurrentLinkedQueue();
+   private final Queue<Runnable> f_140125_ = new com.destroystokyo.paper.utils.CachedSizeConcurrentLinkedQueue<>(); // Paper - need constant-time size()
    int f_140126_;
+   private final com.destroystokyo.paper.util.misc.PooledLinkedHashSets<ServerPlayer> pooledLinkedPlayerHashSets = new com.destroystokyo.paper.util.misc.PooledLinkedHashSets<>();
+   public final ReferenceOpenHashSet<ChunkHolder> needsChangeBroadcasting = new ReferenceOpenHashSet<>();
+
+   // Paper start - optimise checkDespawn
+   public static final int GENERAL_AREA_MAP_SQUARE_RADIUS = 40;
+   public static final double GENERAL_AREA_MAP_ACCEPTABLE_SEARCH_RANGE = 16.0 * (GENERAL_AREA_MAP_SQUARE_RADIUS - 1);
+   public static final double GENERAL_AREA_MAP_ACCEPTABLE_SEARCH_RANGE_SQUARED = GENERAL_AREA_MAP_ACCEPTABLE_SEARCH_RANGE * GENERAL_AREA_MAP_ACCEPTABLE_SEARCH_RANGE;
+   // Paper end - optimise checkDespawn
+
+   // Paper start
+   public final List<io.papermc.paper.chunk.SingleThreadChunkRegionManager> regionManagers = new java.util.ArrayList<>();
+   public final io.papermc.paper.chunk.SingleThreadChunkRegionManager dataRegionManager;
+
+   public static final class DataRegionData implements io.papermc.paper.chunk.SingleThreadChunkRegionManager.RegionData {
+   }
+
+   public static final class DataRegionSectionData implements io.papermc.paper.chunk.SingleThreadChunkRegionManager.RegionSectionData {
+
+      @Override
+      public void removeFromRegion(final io.papermc.paper.chunk.SingleThreadChunkRegionManager.RegionSection section,
+                                   final io.papermc.paper.chunk.SingleThreadChunkRegionManager.Region from) {
+         final DataRegionSectionData sectionData = (DataRegionSectionData)section.sectionData;
+         final DataRegionData fromData = (DataRegionData)from.regionData;
+      }
+
+      @Override
+      public void addToRegion(final io.papermc.paper.chunk.SingleThreadChunkRegionManager.RegionSection section,
+                              final io.papermc.paper.chunk.SingleThreadChunkRegionManager.Region oldRegion,
+                              final io.papermc.paper.chunk.SingleThreadChunkRegionManager.Region newRegion) {
+         final DataRegionSectionData sectionData = (DataRegionSectionData)section.sectionData;
+         final DataRegionData oldRegionData = oldRegion == null ? null : (DataRegionData)oldRegion.regionData;
+         final DataRegionData newRegionData = (DataRegionData)newRegion.regionData;
+      }
+   }
+
+   // Paper start - optimise ChunkMap#anyPlayerCloseEnoughForSpawning
+   // A note about the naming used here:
+   // Previously, mojang used a "spawn range" of 8 for controlling both ticking and
+   // mob spawn range. However, spigot makes the spawn range configurable by
+   // checking if the chunk is in the tick range (8) and the spawn range
+   // obviously this means a spawn range > 8 cannot be implemented
+
+   // these maps are named after spigot's uses
+   public final com.destroystokyo.paper.util.misc.PlayerAreaMap playerMobSpawnMap = new com.destroystokyo.paper.util.misc.PlayerAreaMap(this.pooledLinkedPlayerHashSets);
+   // Paper end - optimise ChunkMap#anyPlayerCloseEnoughForSpawning
+
+   void addPlayerToDistanceMaps(ServerPlayer player) {
+      int chunkX = io.papermc.paper.util.MCUtil.getChunkCoordinate(player.m_20185_());
+      int chunkZ = io.papermc.paper.util.MCUtil.getChunkCoordinate(player.m_20189_());
+      // Note: players need to be explicitly added to distance maps before they can be updated
+      this.nearbyPlayers.addPlayer(player);
+      this.f_140133_.playerChunkLoader.addPlayer(player); // Paper - replace chunk loader
+   }
+
+   void removePlayerFromDistanceMaps(ServerPlayer player) {
+      int chunkX = io.papermc.paper.util.MCUtil.getChunkCoordinate(player.m_20185_());
+      int chunkZ = io.papermc.paper.util.MCUtil.getChunkCoordinate(player.m_20189_());
+      // Note: players need to be explicitly added to distance maps before they can be updated
+      this.nearbyPlayers.removePlayer(player);
+      this.f_140133_.playerChunkLoader.removePlayer(player); // Paper - replace chunk loader
+      this.playerMobSpawnMap.remove(player); // Paper - optimise chunk tick iteration
+   }
+
+   void updateMaps(ServerPlayer player) {
+      int chunkX = io.papermc.paper.util.MCUtil.getChunkCoordinate(player.m_20185_());
+      int chunkZ = io.papermc.paper.util.MCUtil.getChunkCoordinate(player.m_20189_());
+      // Note: players need to be explicitly added to distance maps before they can be updated
+      this.nearbyPlayers.tickPlayer(player);
+      this.f_140133_.playerChunkLoader.updatePlayer(player); // Paper - replace chunk loader
+   }
+
+   public final io.papermc.paper.util.player.NearbyPlayers nearbyPlayers;
 
    public ChunkMap(ServerLevel p_214836_, LevelStorageSource.LevelStorageAccess p_214837_, DataFixer p_214838_, StructureTemplateManager p_214839_, Executor p_214840_, BlockableEventLoop<Runnable> p_214841_, LightChunkGetter p_214842_, ChunkGenerator p_214843_, ChunkProgressListener p_214844_, ChunkStatusUpdateListener p_214845_, Supplier<DimensionDataStorage> p_214846_, int p_214847_, boolean p_214848_) {
-      super(p_214837_.m_197394_(p_214836_.m_46472_()).resolve("region"), p_214838_, p_214848_);
+      super(GoldenForgeConfig.Server.regionFormat, GoldenForgeConfig.Server.regionFormatLinearCompressionLevel.get(), GoldenForgeConfig.Server.linearCrashOnBrokenSymlink.get(), p_214837_.m_197394_(p_214836_.m_46472_()).resolve("region"), p_214838_, p_214848_);
       this.f_214833_ = p_214839_;
       Path path = p_214837_.m_197394_(p_214836_.m_46472_());
       this.f_182284_ = path.getFileName().toString();
@@ -153,20 +_,33 @@
       }
 
       this.f_140135_ = p_214841_;
-      ProcessorMailbox<Runnable> processormailbox1 = ProcessorMailbox.m_18751_(p_214840_, "worldgen");
-      ProcessorHandle<Runnable> processorhandle = ProcessorHandle.m_18714_("main", p_214841_::m_6937_);
+      //ProcessorMailbox<Runnable> processormailbox1 = ProcessorMailbox.create(p_214840_, "worldgen");
+      //ProcessorHandle<Runnable> processorhandle = ProcessorHandle.of("main", p_214841_::tell);
       this.f_140144_ = p_214844_;
       this.f_143031_ = p_214845_;
-      ProcessorMailbox<Runnable> processormailbox = ProcessorMailbox.m_18751_(p_214840_, "light");
-      this.f_140141_ = new ChunkTaskPriorityQueueSorter(ImmutableList.of(processormailbox1, processorhandle, processormailbox), p_214840_, Integer.MAX_VALUE);
-      this.f_140142_ = this.f_140141_.m_140604_(processormailbox1, false);
-      this.f_140143_ = this.f_140141_.m_140604_(processorhandle, false);
-      this.f_140134_ = new ThreadedLevelLightEngine(p_214842_, this, this.f_140133_.m_6042_().f_223549_(), processormailbox, this.f_140141_.m_140604_(processormailbox, false));
+      //ProcessorMailbox<Runnable> processormailbox = ProcessorMailbox.create(p_214840_, "light");
+      //this.queueSorter = new ChunkTaskPriorityQueueSorter(ImmutableList.of(processormailbox1, processorhandle, processormailbox), p_214840_, Integer.MAX_VALUE);
+      //this.worldgenMailbox = this.queueSorter.getProcessor(processormailbox1, false);
+      //this.mainThreadMailbox = this.queueSorter.getProcessor(processorhandle, false);
+      //this.lightEngine = new ThreadedLevelLightEngine(p_214842_, this, this.level.dimensionType().hasSkyLight(), processormailbox, this.queueSorter.getProcessor(processormailbox, false));
+      this.f_140134_ = new ThreadedLevelLightEngine(p_214842_, this, this.f_140133_.m_6042_().f_223549_(), null); // Paper - rewrite chunk system
       this.f_140145_ = new ChunkMap.DistanceManager(p_214840_, p_214841_);
       this.f_140137_ = p_214846_;
-      this.f_140138_ = new PoiManager(path.resolve("poi"), p_214838_, p_214848_, p_214836_.m_5962_(), p_214836_);
+      this.f_140138_ = new PoiManager(GoldenForgeConfig.Server.regionFormat, GoldenForgeConfig.Server.regionFormatLinearCompressionLevel.get(), GoldenForgeConfig.Server.linearCrashOnBrokenSymlink.get(), path.resolve("poi"), p_214838_, p_214848_, p_214836_.m_5962_(), p_214836_);
       this.m_140167_(p_214847_);
-   }
+      // Paper start
+      this.dataRegionManager = new io.papermc.paper.chunk.SingleThreadChunkRegionManager(this.f_140133_, 2, (1.0 / 3.0), 1, 6, "Data", DataRegionData::new, DataRegionSectionData::new);
+      this.regionManagers.add(this.dataRegionManager);
+      this.nearbyPlayers = new io.papermc.paper.util.player.NearbyPlayers(this.f_140133_);
+      // Paper end
+   }
+
+   // Paper start
+   // always use accessor, so folia can override
+   public final io.papermc.paper.util.player.NearbyPlayers getNearbyPlayers() {
+      return this.nearbyPlayers;
+   }
+   // Paper end
 
    protected ChunkGenerator m_183719_() {
       return this.f_140136_;
@@ -186,7 +_,30 @@
       });
    }
 
-   private static double m_140226_(ChunkPos p_140227_, Entity p_140228_) {
+   // Paper start
+   public void updatePlayerMobTypeMap(Entity entity) {
+      if (!GoldenForgeConfig.Server.perPlayerMobSpawns.get()) {
+         return;
+      }
+      int index = entity.m_6095_().m_20674_().ordinal();
+
+      final com.destroystokyo.paper.util.maplist.ReferenceList<ServerPlayer> inRange =
+              this.getNearbyPlayers().getPlayers(entity.m_146902_(), io.papermc.paper.util.player.NearbyPlayers.NearbyMapType.TICK_VIEW_DISTANCE);
+      if (inRange == null) {
+         return;
+      }
+      final Object[] backingSet = inRange.getRawData();
+      for (int i = 0, len = inRange.size(); i < len; i++) {
+         ++((ServerPlayer)backingSet[i]).mobCounts[index];
+      }
+   }
+
+   public int getMobCountNear(ServerPlayer entityPlayer, net.minecraft.world.entity.MobCategory mobCategory) {
+      return entityPlayer.mobCounts[mobCategory.ordinal()];
+   }
+   // Paper end
+
+   public static double m_140226_(ChunkPos p_140227_, Entity p_140228_) {
       double d0 = (double)SectionPos.m_175554_(p_140227_.f_45578_, 8);
       double d1 = (double)SectionPos.m_175554_(p_140227_.f_45579_, 8);
       double d2 = d0 - p_140228_.m_20185_();
@@ -224,20 +_,23 @@
    }
 
    @Nullable
-   protected ChunkHolder m_140174_(long p_140175_) {
-      return this.f_140129_.get(p_140175_);
+   public ChunkHolder m_140174_(long p_140175_) {
+      // Paper start - rewrite chunk system
+      io.papermc.paper.chunk.system.scheduling.NewChunkHolder holder = this.f_140133_.chunkTaskScheduler.chunkHolderManager.getChunkHolder(p_140175_);
+      return holder == null ? null : holder.vanillaChunkHolder;
+      // Paper end - rewrite chunk system
    }
 
    @Nullable
-   protected ChunkHolder m_140327_(long p_140328_) {
-      return this.f_140130_.get(p_140328_);
+   public ChunkHolder m_140327_(long p_140328_) {
+      // Paper start - rewrite chunk system
+      io.papermc.paper.chunk.system.scheduling.NewChunkHolder holder = this.f_140133_.chunkTaskScheduler.chunkHolderManager.getChunkHolder(p_140328_);
+      return holder == null ? null : holder.vanillaChunkHolder;
+      // Paper end - rewrite chunk system
    }
 
    protected IntSupplier m_140371_(long p_140372_) {
-      return () -> {
-         ChunkHolder chunkholder = this.m_140327_(p_140372_);
-         return chunkholder == null ? ChunkTaskPriorityQueue.f_140508_ - 1 : Math.min(chunkholder.m_140094_(), ChunkTaskPriorityQueue.f_140508_ - 1);
-      };
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
    }
 
    public String m_140204_(ChunkPos p_140205_) {
@@ -263,172 +_,33 @@
    }
 
    private CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> m_140210_(ChunkPos p_140211_, int p_140212_, IntFunction<ChunkStatus> p_140213_) {
-      List<CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> list = new ArrayList<>();
-      List<ChunkHolder> list1 = new ArrayList<>();
-      int i = p_140211_.f_45578_;
-      int j = p_140211_.f_45579_;
-
-      for(int k = -p_140212_; k <= p_140212_; ++k) {
-         for(int l = -p_140212_; l <= p_140212_; ++l) {
-            int i1 = Math.max(Math.abs(l), Math.abs(k));
-            final ChunkPos chunkpos = new ChunkPos(i + l, j + k);
-            long j1 = chunkpos.m_45588_();
-            ChunkHolder chunkholder = this.m_140174_(j1);
-            if (chunkholder == null) {
-               return CompletableFuture.completedFuture(Either.right(new ChunkHolder.ChunkLoadingFailure() {
-                  public String toString() {
-                     return "Unloaded " + chunkpos;
-                  }
-               }));
-            }
-
-            ChunkStatus chunkstatus = p_140213_.apply(i1);
-            CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = chunkholder.m_140049_(chunkstatus, this);
-            list1.add(chunkholder);
-            list.add(completablefuture);
-         }
-      }
-
-      CompletableFuture<List<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> completablefuture1 = Util.m_137567_(list);
-      CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> completablefuture2 = completablefuture1.thenApply((p_183730_) -> {
-         List<ChunkAccess> list2 = Lists.newArrayList();
-         int k1 = 0;
-
-         for(final Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either : p_183730_) {
-            if (either == null) {
-               throw this.m_203751_(new IllegalStateException("At least one of the chunk futures were null"), "n/a");
-            }
-
-            Optional<ChunkAccess> optional = either.left();
-            if (!optional.isPresent()) {
-               final int l1 = k1;
-               return Either.right(new ChunkHolder.ChunkLoadingFailure() {
-                  public String toString() {
-                     return "Unloaded " + new ChunkPos(i + l1 % (p_140212_ * 2 + 1), j + l1 / (p_140212_ * 2 + 1)) + " " + either.right().get();
-                  }
-               });
-            }
-
-            list2.add(optional.get());
-            ++k1;
-         }
-
-         return Either.left(list2);
-      });
-
-      for(ChunkHolder chunkholder1 : list1) {
-         chunkholder1.m_200416_("getChunkRangeFuture " + p_140211_ + " " + p_140212_, completablefuture2);
-      }
-
-      return completablefuture2;
-   }
-
-   public ReportedException m_203751_(IllegalStateException p_203752_, String p_203753_) {
-      StringBuilder stringbuilder = new StringBuilder();
-      Consumer<ChunkHolder> consumer = (p_203756_) -> {
-         p_203756_.m_202980_().forEach((p_203760_) -> {
-            ChunkStatus chunkstatus = p_203760_.getFirst();
-            CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = p_203760_.getSecond();
-            if (completablefuture != null && completablefuture.isDone() && completablefuture.join() == null) {
-               stringbuilder.append((Object)p_203756_.m_140092_()).append(" - status: ").append((Object)chunkstatus).append(" future: ").append((Object)completablefuture).append(System.lineSeparator());
-            }
-
-         });
-      };
-      stringbuilder.append("Updating:").append(System.lineSeparator());
-      this.f_140129_.values().forEach(consumer);
-      stringbuilder.append("Visible:").append(System.lineSeparator());
-      this.f_140130_.values().forEach(consumer);
-      CrashReport crashreport = CrashReport.m_127521_(p_203752_, "Chunk loading");
-      CrashReportCategory crashreportcategory = crashreport.m_127514_("Chunk loading");
-      crashreportcategory.m_128159_("Details", p_203753_);
-      crashreportcategory.m_128159_("Futures", stringbuilder);
-      return new ReportedException(crashreport);
-   }
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
+   }
+
 
    public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> m_143117_(ChunkPos p_143118_) {
-      return this.m_140210_(p_143118_, 2, (p_203078_) -> {
-         return ChunkStatus.f_62326_;
-      }).thenApplyAsync((p_203086_) -> {
-         return p_203086_.mapLeft((p_203092_) -> {
-            return (LevelChunk)p_203092_.get(p_203092_.size() / 2);
-         });
-      }, this.f_140135_);
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
    }
 
    @Nullable
    ChunkHolder m_140176_(long p_140177_, int p_140178_, @Nullable ChunkHolder p_140179_, int p_140180_) {
-      if (p_140180_ > f_140127_ && p_140178_ > f_140127_) {
-         return p_140179_;
-      } else {
-         if (p_140179_ != null) {
-            p_140179_.m_140027_(p_140178_);
-         }
-
-         if (p_140179_ != null) {
-            if (p_140178_ > f_140127_) {
-               this.f_140139_.add(p_140177_);
-            } else {
-               this.f_140139_.remove(p_140177_);
-            }
-         }
-
-         if (p_140178_ <= f_140127_ && p_140179_ == null) {
-            p_140179_ = this.f_140131_.remove(p_140177_);
-            if (p_140179_ != null) {
-               p_140179_.m_140027_(p_140178_);
-            } else {
-               p_140179_ = new ChunkHolder(new ChunkPos(p_140177_), p_140178_, this.f_140133_, this.f_140134_, this.f_140141_, this);
-            }
-
-            this.f_140129_.put(p_140177_, p_140179_);
-            this.f_140140_ = true;
-         }
-
-         return p_140179_;
-      }
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
    }
 
    public void close() throws IOException {
-      try {
-         this.f_140141_.close();
-         this.f_140138_.close();
-      } finally {
-         super.close();
-      }
-
-   }
+      throw new UnsupportedOperationException("Use ServerChunkCache#close"); // Paper - rewrite chunk system
+   }
+
+
+
+   // Paper start - rewrite chunk system
+   protected void saveIncrementally() {
+      this.f_140133_.chunkTaskScheduler.chunkHolderManager.autoSave(); // Paper - rewrite chunk system
+   }
+   // Paper end - - rewrite chunk system
 
    protected void m_140318_(boolean p_140319_) {
-      if (p_140319_) {
-         List<ChunkHolder> list = this.f_140130_.values().stream().filter(ChunkHolder::m_140095_).peek(ChunkHolder::m_140096_).collect(Collectors.toList());
-         MutableBoolean mutableboolean = new MutableBoolean();
-
-         do {
-            mutableboolean.setFalse();
-            list.stream().map((p_203102_) -> {
-               CompletableFuture<ChunkAccess> completablefuture;
-               do {
-                  completablefuture = p_203102_.m_140090_();
-                  this.f_140135_.m_18701_(completablefuture::isDone);
-               } while(completablefuture != p_203102_.m_140090_());
-
-               return completablefuture.join();
-            }).filter((p_203088_) -> {
-               return p_203088_ instanceof ImposterProtoChunk || p_203088_ instanceof LevelChunk;
-            }).filter(this::m_140258_).forEach((p_203051_) -> {
-               mutableboolean.setTrue();
-            });
-         } while(mutableboolean.isTrue());
-
-         this.m_140353_(() -> {
-            return true;
-         });
-         this.m_63514_();
-      } else {
-         this.f_140130_.values().forEach(this::m_198874_);
-      }
-
+      this.f_140133_.chunkTaskScheduler.chunkHolderManager.saveAllChunks(p_140319_, false, false); // Paper - rewrite chunk system
    }
 
    protected void m_140280_(BooleanSupplier p_140281_) {
@@ -444,129 +_,30 @@
    }
 
    public boolean m_201907_() {
-      return this.f_140134_.m_75643_() || !this.f_140131_.isEmpty() || !this.f_140129_.isEmpty() || this.f_140138_.m_202164_() || !this.f_140139_.isEmpty() || !this.f_140125_.isEmpty() || this.f_140141_.m_201909_() || this.f_140145_.m_201911_();
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
    }
 
    private void m_140353_(BooleanSupplier p_140354_) {
-      LongIterator longiterator = this.f_140139_.iterator();
-
-      for(int i = 0; longiterator.hasNext() && (p_140354_.getAsBoolean() || i < 200 || this.f_140139_.size() > 2000); longiterator.remove()) {
-         long j = longiterator.nextLong();
-         ChunkHolder chunkholder = this.f_140129_.remove(j);
-         if (chunkholder != null) {
-            this.f_140131_.put(j, chunkholder);
-            this.f_140140_ = true;
-            ++i;
-            this.m_140181_(j, chunkholder);
-         }
-      }
-
-      int k = Math.max(0, this.f_140125_.size() - 2000);
-
-      Runnable runnable;
-      while((p_140354_.getAsBoolean() || k > 0) && (runnable = this.f_140125_.poll()) != null) {
-         --k;
-         runnable.run();
-      }
-
-      int l = 0;
-      ObjectIterator<ChunkHolder> objectiterator = this.f_140130_.values().iterator();
-
-      while(l < 20 && p_140354_.getAsBoolean() && objectiterator.hasNext()) {
-         if (this.m_198874_(objectiterator.next())) {
-            ++l;
-         }
-      }
-
+      this.f_140133_.chunkTaskScheduler.chunkHolderManager.processUnloads(); // Paper - rewrite chunk system
+
+      //Goldenforge: mixin hack for phosphophyllite
+      if (this.m_198874_(null)) {}
    }
 
    private void m_140181_(long p_140182_, ChunkHolder p_140183_) {
-      CompletableFuture<ChunkAccess> completablefuture = p_140183_.m_140090_();
-      completablefuture.thenAcceptAsync((p_203002_) -> {
-         CompletableFuture<ChunkAccess> completablefuture1 = p_140183_.m_140090_();
-         if (completablefuture1 != completablefuture) {
-            this.m_140181_(p_140182_, p_140183_);
-         } else {
-            if (this.f_140131_.remove(p_140182_, p_140183_) && p_203002_ != null) {
-               if (p_203002_ instanceof LevelChunk) {
-                  ((LevelChunk)p_203002_).m_62913_(false);
-               }
-
-               this.m_140258_(p_203002_);
-               if (this.f_140132_.remove(p_140182_) && p_203002_ instanceof LevelChunk) {
-                  LevelChunk levelchunk = (LevelChunk)p_203002_;
-                  this.f_140133_.m_8712_(levelchunk);
-               }
-
-               this.f_140134_.m_9330_(p_203002_.m_7697_());
-               this.f_140134_.m_9409_();
-               this.f_140144_.m_5511_(p_203002_.m_7697_(), (ChunkStatus)null);
-               this.f_202981_.remove(p_203002_.m_7697_().m_45588_());
-            }
-
-         }
-      }, this.f_140125_::add).whenComplete((p_202996_, p_202997_) -> {
-         if (p_202997_ != null) {
-            f_140128_.error("Failed to save chunk {}", p_140183_.m_140092_(), p_202997_);
-         }
-
-      });
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
    }
 
    protected boolean m_140324_() {
-      if (!this.f_140140_) {
-         return false;
-      } else {
-         this.f_140130_ = this.f_140129_.clone();
-         this.f_140140_ = false;
-         return true;
-      }
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
    }
 
    public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> m_140292_(ChunkHolder p_140293_, ChunkStatus p_140294_) {
-      ChunkPos chunkpos = p_140293_.m_140092_();
-      if (p_140294_ == ChunkStatus.f_62314_) {
-         return this.m_140417_(chunkpos);
-      } else {
-         if (p_140294_ == ChunkStatus.f_62323_) {
-            this.f_140145_.m_140792_(TicketType.f_9446_, chunkpos, 33 + ChunkStatus.m_62370_(ChunkStatus.f_62323_), chunkpos);
-         }
-
-         Optional<ChunkAccess> optional = p_140293_.m_140049_(p_140294_.m_62482_(), this).getNow(ChunkHolder.f_139995_).left();
-         if (optional.isPresent() && optional.get().m_6415_().m_62427_(p_140294_)) {
-            CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = p_140294_.m_223244_(this.f_140133_, this.f_214833_, this.f_140134_, (p_203081_) -> {
-               return this.m_140383_(p_140293_);
-            }, optional.get());
-            this.f_140144_.m_5511_(chunkpos, p_140294_);
-            return completablefuture;
-         } else {
-            return this.m_140360_(p_140293_, p_140294_);
-         }
-      }
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
    }
 
    private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> m_140417_(ChunkPos p_140418_) {
-      return this.m_214963_(p_140418_).thenApply((p_214925_) -> {
-         return p_214925_.filter((p_214928_) -> {
-            boolean flag = m_214940_(p_214928_);
-            if (!flag) {
-               f_140128_.error("Chunk file at {} is missing level data, skipping", (Object)p_140418_);
-            }
-
-            return flag;
-         });
-      }).<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>thenApplyAsync((p_214891_) -> {
-         this.f_140133_.m_46473_().m_6174_("chunkLoad");
-         if (p_214891_.isPresent()) {
-            ChunkAccess chunkaccess = ChunkSerializer.m_188230_(this.f_140133_, this.f_140138_, p_140418_, p_214891_.get());
-            this.m_140229_(p_140418_, chunkaccess.m_6415_().m_62494_());
-            return Either.left(chunkaccess);
-         } else {
-            return Either.left(this.m_214961_(p_140418_));
-         }
-      }, this.f_140135_).exceptionallyAsync((p_214888_) -> {
-         return this.m_214901_(p_214888_, p_140418_);
-      }, this.f_140135_);
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
    }
 
    private static boolean m_214940_(CompoundTag p_214941_) {
@@ -603,41 +_,7 @@
    }
 
    private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> m_140360_(ChunkHolder p_140361_, ChunkStatus p_140362_) {
-      ChunkPos chunkpos = p_140361_.m_140092_();
-      CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.m_140210_(chunkpos, p_140362_.m_62488_(), (p_214935_) -> {
-         return this.m_140262_(p_140362_, p_214935_);
-      });
-      this.f_140133_.m_46473_().m_6525_(() -> {
-         return "chunkGenerate " + p_140362_.m_62467_();
-      });
-      Executor executor = (p_214958_) -> {
-         this.f_140142_.m_6937_(ChunkTaskPriorityQueueSorter.m_140642_(p_140361_, p_214958_));
-      };
-      return completablefuture.thenComposeAsync((p_214873_) -> {
-         return p_214873_.map((p_214879_) -> {
-            try {
-               CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture1 = p_140362_.m_223279_(executor, this.f_140133_, this.f_140136_, this.f_214833_, this.f_140134_, (p_214919_) -> {
-                  return this.m_140383_(p_140361_);
-               }, p_214879_, false);
-               this.f_140144_.m_5511_(chunkpos, p_140362_);
-               return completablefuture1;
-            } catch (Exception exception) {
-               exception.getStackTrace();
-               CrashReport crashreport = CrashReport.m_127521_(exception, "Exception generating new chunk");
-               CrashReportCategory crashreportcategory = crashreport.m_127514_("Chunk to be generated");
-               crashreportcategory.m_128159_("Location", String.format(Locale.ROOT, "%d,%d", chunkpos.f_45578_, chunkpos.f_45579_));
-               crashreportcategory.m_128159_("Position hash", ChunkPos.m_45589_(chunkpos.f_45578_, chunkpos.f_45579_));
-               crashreportcategory.m_128159_("Generator", this.f_140136_);
-               this.f_140135_.execute(() -> {
-                  throw new ReportedException(crashreport);
-               });
-               throw new ReportedException(crashreport);
-            }
-         }, (p_214867_) -> {
-            this.m_140375_(chunkpos);
-            return CompletableFuture.completedFuture(Either.right(p_214867_));
-         });
-      }, executor);
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
    }
 
    protected void m_140375_(ChunkPos p_140376_) {
@@ -648,7 +_,7 @@
       }));
    }
 
-   private ChunkStatus m_140262_(ChunkStatus p_140263_, int p_140264_) {
+   public static ChunkStatus m_140262_(ChunkStatus p_140263_, int p_140264_) {
       ChunkStatus chunkstatus;
       if (p_140264_ == 0) {
          chunkstatus = p_140263_.m_62482_();
@@ -659,86 +_,80 @@
       return chunkstatus;
    }
 
-   private static void m_143064_(ServerLevel p_143065_, List<CompoundTag> p_143066_) {
+   public static void postLoadProtoChunk(ServerLevel p_143065_, List<CompoundTag> p_143066_, ChunkPos position) { // Paper - public and add chunk position parameter
       if (!p_143066_.isEmpty()) {
-         p_143065_.m_143327_(EntityType.m_147045_(p_143066_, p_143065_));
+         p_143065_.addWorldGenChunkEntities(EntityType.m_147045_(p_143066_, p_143065_).filter((entity) -> {
+            boolean needsRemoval = false;
+            net.minecraft.server.dedicated.DedicatedServer server = (DedicatedServer) MinecraftServer.getServer();
+            if (!server.m_6997_() && entity instanceof net.minecraft.world.entity.npc.Npc) {
+               entity.m_146870_();
+               needsRemoval = true;
+            }
+            if (!server.m_6998_() && (entity instanceof net.minecraft.world.entity.animal.Animal || entity instanceof net.minecraft.world.entity.animal.WaterAnimal)) {
+               entity.m_146870_();
+               needsRemoval = true;
+            }
+            checkDupeUUID(p_143065_, entity); // Paper
+            return !needsRemoval;
+         }), position); // Paper - rewrite chunk system
       }
 
    }
 
    private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> m_140383_(ChunkHolder p_140384_) {
-      CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = p_140384_.m_140047_(ChunkStatus.f_62326_.m_62482_());
-      return completablefuture.thenApplyAsync((p_214853_) -> {
-         ChunkStatus chunkstatus = ChunkHolder.m_140074_(p_140384_.m_140093_());
-         return !chunkstatus.m_62427_(ChunkStatus.f_62326_) ? ChunkHolder.f_139995_ : p_214853_.mapLeft((p_214856_) -> {
-            ChunkPos chunkpos = p_140384_.m_140092_();
-            ProtoChunk protochunk = (ProtoChunk)p_214856_;
-            LevelChunk levelchunk;
-            if (protochunk instanceof ImposterProtoChunk) {
-               levelchunk = ((ImposterProtoChunk)protochunk).m_62768_();
-            } else {
-               levelchunk = new LevelChunk(this.f_140133_, protochunk, (p_214900_) -> {
-                  m_143064_(this.f_140133_, protochunk.m_63293_());
-               });
-               p_140384_.m_140052_(new ImposterProtoChunk(levelchunk, false));
-            }
-
-            levelchunk.m_62879_(() -> {
-               return ChunkHolder.m_140083_(p_140384_.m_140093_());
-            });
-            levelchunk.m_62952_();
-            if (this.f_140132_.add(chunkpos.m_45588_())) {
-               levelchunk.m_62913_(true);
-               levelchunk.m_156369_();
-               levelchunk.m_187958_(this.f_140133_);
-            }
-
-            return levelchunk;
-         });
-      }, (p_214951_) -> {
-         this.f_140143_.m_6937_(ChunkTaskPriorityQueueSorter.m_140624_(p_214951_, p_140384_.m_140092_().m_45588_(), p_140384_::m_140093_));
-      });
-   }
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
+   }
+
+   // Paper start
+   // rets true if to prevent the entity from being added
+   public static boolean checkDupeUUID(ServerLevel level, Entity entity) {
+//      io.papermc.paper.configuration.WorldConfiguration.Entities.Spawning.DuplicateUUID.DuplicateUUIDMode mode = level.paperConfig().entities.spawning.duplicateUuid.mode;
+//      if (mode != io.papermc.paper.configuration.WorldConfiguration.Entities.Spawning.DuplicateUUID.DuplicateUUIDMode.WARN
+//              && mode != io.papermc.paper.configuration.WorldConfiguration.Entities.Spawning.DuplicateUUID.DuplicateUUIDMode.DELETE
+//              && mode != io.papermc.paper.configuration.WorldConfiguration.Entities.Spawning.DuplicateUUID.DuplicateUUIDMode.SAFE_REGEN) {
+//         return false;
+//      }
+      Entity other = level.m_8791_(entity.m_20148_());
+
+      if (other == null || other == entity) {
+         return false;
+      }
+
+      if (other != null && !other.m_213877_()
+              && Objects.equals(other.m_20078_(), entity.m_20078_())
+              && entity.f_19826_.m_123331_(other.f_19826_) < /*level.paperConfig().entities.spawning.duplicateUuid.safeRegenDeleteRange*/ 32
+      ) {
+         if (ServerLevel.DEBUG_ENTITIES) f_140128_.warn("[DUPE-UUID] Duplicate UUID found used by " + other + ", deleted entity " + entity + " because it was near the duplicate and likely an actual duplicate. See https://github.com/PaperMC/Paper/issues/1223 for discussion on what this is about.");
+         entity.m_146870_();
+         return true;
+      }
+      if (other != null && !other.m_213877_()) {
+//         switch (mode) {
+//            case SAFE_REGEN: {
+               entity.m_20084_(java.util.UUID.randomUUID());
+               if (ServerLevel.DEBUG_ENTITIES) f_140128_.warn("[DUPE-UUID] Duplicate UUID found used by " + other + ", regenerated UUID for " + entity + ". See https://github.com/PaperMC/Paper/issues/1223 for discussion on what this is about.");
+//               break;
+//            }
+//            case DELETE: {
+//               if (ServerLevel.DEBUG_ENTITIES) LOGGER.warn("[DUPE-UUID] Duplicate UUID found used by " + other + ", deleted entity " + entity + ". See https://github.com/PaperMC/Paper/issues/1223 for discussion on what this is about.");
+//               entity.discard();
+//               return true;
+//            }
+//            default:
+//               if (ServerLevel.DEBUG_ENTITIES) LOGGER.warn("[DUPE-UUID] Duplicate UUID found used by " + other + ", doing nothing to " + entity + ". See https://github.com/PaperMC/Paper/issues/1223 for discussion on what this is about.");
+//               break;
+//         }
+      }
+      return false;
+   }
+   // Paper end
 
    public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> m_143053_(ChunkHolder p_143054_) {
-      ChunkPos chunkpos = p_143054_.m_140092_();
-      CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.m_140210_(chunkpos, 1, (p_214916_) -> {
-         return ChunkStatus.f_62326_;
-      });
-      CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> completablefuture1 = completablefuture.thenApplyAsync((p_212878_) -> {
-         return p_212878_.mapLeft((p_214939_) -> {
-            return (LevelChunk)p_214939_.get(p_214939_.size() / 2);
-         });
-      }, (p_214944_) -> {
-         this.f_140143_.m_6937_(ChunkTaskPriorityQueueSorter.m_140642_(p_143054_, p_214944_));
-      }).thenApplyAsync((p_214930_) -> {
-         return p_214930_.ifLeft((p_214960_) -> {
-            p_214960_.m_62812_();
-            this.f_140133_.m_184102_(p_214960_);
-         });
-      }, this.f_140135_);
-      completablefuture1.thenAcceptAsync((p_214882_) -> {
-         p_214882_.ifLeft((p_214885_) -> {
-            this.f_140146_.getAndIncrement();
-            MutableObject<ClientboundLevelChunkWithLightPacket> mutableobject = new MutableObject<>();
-            this.m_183262_(chunkpos, false).forEach((p_214911_) -> {
-               this.m_183760_(p_214911_, mutableobject, p_214885_);
-            });
-         });
-      }, (p_214922_) -> {
-         this.f_140143_.m_6937_(ChunkTaskPriorityQueueSorter.m_140642_(p_143054_, p_214922_));
-      });
-      return completablefuture1;
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
    }
 
    public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> m_143109_(ChunkHolder p_143110_) {
-      return this.m_140210_(p_143110_.m_140092_(), 1, ChunkStatus::m_156185_).thenApplyAsync((p_214893_) -> {
-         return p_214893_.mapLeft((p_214905_) -> {
-            return (LevelChunk)p_214905_.get(p_214905_.size() / 2);
-         });
-      }, (p_214859_) -> {
-         this.f_140143_.m_6937_(ChunkTaskPriorityQueueSorter.m_140642_(p_143110_, p_214859_));
-      });
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
    }
 
    public int m_140368_() {
@@ -746,114 +_,44 @@
    }
 
    private boolean m_198874_(ChunkHolder p_198875_) {
-      if (!p_198875_.m_140095_()) {
-         return false;
-      } else {
-         ChunkAccess chunkaccess = p_198875_.m_140090_().getNow((ChunkAccess)null);
-         if (!(chunkaccess instanceof ImposterProtoChunk) && !(chunkaccess instanceof LevelChunk)) {
-            return false;
-         } else {
-            long i = chunkaccess.m_7697_().m_45588_();
-            long j = this.f_202981_.getOrDefault(i, -1L);
-            long k = System.currentTimeMillis();
-            if (k < j) {
-               return false;
-            } else {
-               boolean flag = this.m_140258_(chunkaccess);
-               p_198875_.m_140096_();
-               if (flag) {
-                  this.f_202981_.put(i, k + 10000L);
-               }
-
-               return flag;
-            }
-         }
-      }
+      //throw new UnsupportedOperationException(); // Paper - rewrite chunk system
+      return false;
    }
 
    private boolean m_140258_(ChunkAccess p_140259_) {
-      this.f_140138_.m_63796_(p_140259_.m_7697_());
-      if (!p_140259_.m_6344_()) {
-         return false;
-      } else {
-         p_140259_.m_8092_(false);
-         ChunkPos chunkpos = p_140259_.m_7697_();
-
-         try {
-            ChunkStatus chunkstatus = p_140259_.m_6415_();
-            if (chunkstatus.m_62494_() != ChunkStatus.ChunkType.LEVELCHUNK) {
-               if (this.m_140425_(chunkpos)) {
-                  return false;
-               }
-
-               if (chunkstatus == ChunkStatus.f_62314_ && p_140259_.m_6633_().values().stream().noneMatch(StructureStart::m_73603_)) {
-                  return false;
-               }
-            }
-
-            this.f_140133_.m_46473_().m_6174_("chunkSave");
-            CompoundTag compoundtag = ChunkSerializer.m_63454_(this.f_140133_, p_140259_);
-            this.m_63502_(chunkpos, compoundtag);
-            this.m_140229_(chunkpos, chunkstatus.m_62494_());
-            return true;
-         } catch (Exception exception) {
-            f_140128_.error("Failed to save chunk {},{}", chunkpos.f_45578_, chunkpos.f_45579_, exception);
-            return false;
-         }
-      }
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
    }
 
    private boolean m_140425_(ChunkPos p_140426_) {
-      byte b0 = this.f_140151_.get(p_140426_.m_45588_());
-      if (b0 != 0) {
-         return b0 == 1;
-      } else {
-         CompoundTag compoundtag;
-         try {
-            compoundtag = this.m_214963_(p_140426_).join().orElse((CompoundTag)null);
-            if (compoundtag == null) {
-               this.m_140422_(p_140426_);
-               return false;
-            }
-         } catch (Exception exception) {
-            f_140128_.error("Failed to read chunk {}", p_140426_, exception);
-            this.m_140422_(p_140426_);
-            return false;
-         }
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
+   }
 
-         ChunkStatus.ChunkType chunkstatus$chunktype = ChunkSerializer.m_63485_(compoundtag);
-         return this.m_140229_(p_140426_, chunkstatus$chunktype) == 1;
-      }
+   // Paper start - replace player loader system
+   public void setTickViewDistance(int distance) {
+      this.f_140133_.playerChunkLoader.setTickDistance(distance);
    }
+   // Paper end - replace player loader system
 
    protected void m_140167_(int p_140168_) {
-      int i = Mth.m_14045_(p_140168_ + 1, 3, 33);
-      if (i != this.f_140126_) {
-         int j = this.f_140126_;
-         this.f_140126_ = i;
-         this.f_140145_.m_140777_(this.f_140126_ + 1);
-
-         for(ChunkHolder chunkholder : this.f_140129_.values()) {
-            ChunkPos chunkpos = chunkholder.m_140092_();
-            MutableObject<ClientboundLevelChunkWithLightPacket> mutableobject = new MutableObject<>();
-            this.m_183262_(chunkpos, false).forEach((p_214864_) -> {
-               SectionPos sectionpos = p_214864_.m_8965_();
-               boolean flag = m_200878_(chunkpos.f_45578_, chunkpos.f_45579_, sectionpos.m_123170_(), sectionpos.m_123222_(), j);
-               boolean flag1 = m_200878_(chunkpos.f_45578_, chunkpos.f_45579_, sectionpos.m_123170_(), sectionpos.m_123222_(), this.f_140126_);
-               this.m_183754_(p_214864_, chunkpos, mutableobject, flag, flag1);
-            });
-         }
+      int j = Mth.m_14045_(p_140168_, 2, 32);
+
+      if (j != this.f_140126_) {
+         int k = this.f_140126_;
+
+         this.f_140126_ = j;
+         this.f_140133_.playerChunkLoader.setLoadDistance(this.f_140126_ + 1); // Paper - replace player loader system
       }
 
    }
 
-   protected void m_183754_(ServerPlayer p_183755_, ChunkPos p_183756_, MutableObject<ClientboundLevelChunkWithLightPacket> p_183757_, boolean p_183758_, boolean p_183759_) {
+   public void m_183754_(ServerPlayer p_183755_, ChunkPos p_183756_, MutableObject<ClientboundLevelChunkWithLightPacket> p_183757_, boolean p_183758_, boolean p_183759_) {
       if (p_183755_.f_19853_ == this.f_140133_) {
+         ChunkHolder chunkholder = this.m_140327_(p_183756_.m_45588_());
          if (p_183759_ && !p_183758_) {
-            ChunkHolder chunkholder = this.m_140327_(p_183756_.m_45588_());
             if (chunkholder != null) {
-               LevelChunk levelchunk = chunkholder.m_140085_();
+               LevelChunk levelchunk = chunkholder.getSendingChunk(); // Paper - replace chunk loader system;
                if (levelchunk != null) {
+                  chunkholder.addPlayer(p_183755_); // Paper - replace chunk loader system
                   this.m_183760_(p_183755_, p_183757_, levelchunk);
                }
 
@@ -862,14 +_,22 @@
          }
 
          if (!p_183759_ && p_183758_) {
+            // Paper start - replace chunk loader system
+            if (chunkholder != null) {
+               chunkholder.removePlayer(p_183755_);
+            } else {
+               f_140128_.warn("ChunkHolder at " + p_183756_ + " in world '" + this.f_140133_.getWorld().getName() + "' does not exist to untrack chunk for " + p_183755_, new Throwable());
+            }
+            // Paper end - replace chunk loader system
             p_183755_.m_9088_(p_183756_);
+            net.minecraftforge.event.ForgeEventFactory.fireChunkUnWatch(p_183755_, p_183756_, this.f_140133_);
          }
 
-      }
+      } else { f_140128_.warn("Mismatch in world for chunk " + p_183756_ + " in world '" + this.f_140133_.getWorld().getName() + "' for player " + p_183755_, new Throwable()); } // Paper - replace chunk loader system
    }
 
    public int m_140394_() {
-      return this.f_140130_.size();
+      return io.papermc.paper.chunk.system.ChunkSystem.getVisibleChunkHolderCount(this.f_140133_); // Paper
    }
 
    public net.minecraft.server.level.DistanceManager m_143145_() {
@@ -877,29 +_,11 @@
    }
 
    protected Iterable<ChunkHolder> m_140416_() {
-      return Iterables.unmodifiableIterable(this.f_140130_.values());
+      return Iterables.unmodifiableIterable(io.papermc.paper.chunk.system.ChunkSystem.getVisibleChunkHolders(this.f_140133_)); // Paper
    }
 
    void m_140274_(Writer p_140275_) throws IOException {
-      CsvOutput csvoutput = CsvOutput.m_13619_().m_13630_("x").m_13630_("z").m_13630_("level").m_13630_("in_memory").m_13630_("status").m_13630_("full_status").m_13630_("accessible_ready").m_13630_("ticking_ready").m_13630_("entity_ticking_ready").m_13630_("ticket").m_13630_("spawning").m_13630_("block_entity_count").m_13630_("ticking_ticket").m_13630_("ticking_level").m_13630_("block_ticks").m_13630_("fluid_ticks").m_13628_(p_140275_);
-      TickingTracker tickingtracker = this.f_140145_.m_183915_();
-
-      for(Long2ObjectMap.Entry<ChunkHolder> entry : this.f_140130_.long2ObjectEntrySet()) {
-         long i = entry.getLongKey();
-         ChunkPos chunkpos = new ChunkPos(i);
-         ChunkHolder chunkholder = entry.getValue();
-         Optional<ChunkAccess> optional = Optional.ofNullable(chunkholder.m_140089_());
-         Optional<LevelChunk> optional1 = optional.flatMap((p_214932_) -> {
-            return p_214932_ instanceof LevelChunk ? Optional.of((LevelChunk)p_214932_) : Optional.empty();
-         });
-         csvoutput.m_13624_(chunkpos.f_45578_, chunkpos.f_45579_, chunkholder.m_140093_(), optional.isPresent(), optional.map(ChunkAccess::m_6415_).orElse((ChunkStatus)null), optional1.map(LevelChunk::m_6708_).orElse((ChunkHolder.FullChunkStatus)null), m_140278_(chunkholder.m_140082_()), m_140278_(chunkholder.m_140026_()), m_140278_(chunkholder.m_140073_()), this.f_140145_.m_140838_(i), this.m_183879_(chunkpos), optional1.map((p_214953_) -> {
-            return p_214953_.m_62954_().size();
-         }).orElse(0), tickingtracker.m_184175_(i), tickingtracker.m_6172_(i), optional1.map((p_214946_) -> {
-            return p_214946_.m_183531_().m_183574_();
-         }).orElse(0), optional1.map((p_214937_) -> {
-            return p_214937_.m_183526_().m_183574_();
-         }).orElse(0));
-      }
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
 
    }
 
@@ -917,30 +_,138 @@
          return "cancelled";
       }
    }
-
-   private CompletableFuture<Optional<CompoundTag>> m_214963_(ChunkPos p_214964_) {
-      return this.m_223454_(p_214964_).thenApplyAsync((p_214907_) -> {
-         return p_214907_.map(this::m_214947_);
-      }, Util.m_183991_());
-   }
-
+   // Paper start - Asynchronous chunk io
+   @Nullable
+   @Override
+   public CompoundTag readSync(ChunkPos chunkcoordintpair) throws IOException {
+      // Paper start - rewrite chunk system
+      if (!io.papermc.paper.chunk.system.io.RegionFileIOThread.isRegionFileThread()) {
+         return io.papermc.paper.chunk.system.io.RegionFileIOThread.loadData(
+                 this.f_140133_, chunkcoordintpair.f_45578_, chunkcoordintpair.f_45579_, io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.CHUNK_DATA,
+                 io.papermc.paper.chunk.system.io.RegionFileIOThread.getIOBlockingPriorityForCurrentThread()
+         );
+      }
+      // Paper end - rewrite chunk system
+      return super.readSync(chunkcoordintpair);
+   }
+
+   @Override
+   public void m_63502_(ChunkPos chunkcoordintpair, CompoundTag nbttagcompound) throws IOException {
+      // Paper start - rewrite chunk system
+      if (!io.papermc.paper.chunk.system.io.RegionFileIOThread.isRegionFileThread()) {
+         io.papermc.paper.chunk.system.io.RegionFileIOThread.scheduleSave(
+                 this.f_140133_, chunkcoordintpair.f_45578_, chunkcoordintpair.f_45579_, nbttagcompound,
+                 io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.CHUNK_DATA);
+         return;
+      }
+      // Paper end - rewrite chunk system
+      super.m_63502_(chunkcoordintpair, nbttagcompound);
+   }
+   // Paper end
    private CompoundTag m_214947_(CompoundTag p_214948_) {
       return this.m_188288_(this.f_140133_.m_46472_(), this.f_140137_, p_214948_, this.f_140136_.m_187743_());
    }
 
+   public ChunkStatus getChunkStatusOnDisk(ChunkPos chunkPos) throws IOException {
+      dev.kaiijumc.kaiiju.region.AbstractRegionFile regionFile = regionFileCache.getRegionFile(chunkPos, true); // Kaiiju
+
+      if (regionFile == null || !regionFileCache.chunkExists(chunkPos)) {
+         return null;
+      }
+
+      ChunkStatus status = regionFile.getStatusIfCached(chunkPos.f_45578_, chunkPos.f_45579_);
+
+      if (status != null) {
+         return status;
+      }
+
+      this.m_214963_(chunkPos);
+
+      return regionFile.getStatusIfCached(chunkPos.f_45578_, chunkPos.f_45579_);
+   }
+
+   private CompletableFuture<Optional<CompoundTag>> m_214963_(ChunkPos p_214964_) {
+      // Paper start - Cache chunk status on disk
+      try {
+         return CompletableFuture.completedFuture(Optional.ofNullable(this.readConvertChunkSync(p_214964_)));
+      } catch (Throwable thr) {
+         return CompletableFuture.failedFuture(thr);
+      }
+      // Paper end - Cache chunk status on disk
+   }
+
+   @Nullable
+   public CompoundTag readConvertChunkSync(ChunkPos pos) throws IOException {
+      CompoundTag nbttagcompound = this.readSync(pos);
+      // Paper start - Cache chunk status on disk
+      if (nbttagcompound == null) {
+         return null;
+      }
+
+      nbttagcompound = this.m_214947_(nbttagcompound); // CraftBukkit
+      if (nbttagcompound == null) {
+         return null;
+      }
+
+      this.updateChunkStatusOnDisk(pos, nbttagcompound);
+
+      return nbttagcompound;
+      // Paper end
+   }
+
+   public void updateChunkStatusOnDisk(ChunkPos chunkPos, @Nullable CompoundTag compound) throws IOException {
+      dev.kaiijumc.kaiiju.region.AbstractRegionFile regionFile = regionFileCache.getRegionFile(chunkPos, false); // Kaiiju
+
+      regionFile.setStatus(chunkPos.f_45578_, chunkPos.f_45579_, ChunkSerializer.getStatus(compound));
+   }
+
    boolean m_183879_(ChunkPos p_183880_) {
-      long i = p_183880_.m_45588_();
-      if (!this.f_140145_.m_140847_(i)) {
+      // Spigot start
+      return this.anyPlayerCloseEnoughForSpawning(p_183880_, false);
+   }
+
+   // Paper start - optimise anyPlayerCloseEnoughForSpawning
+   final boolean anyPlayerCloseEnoughForSpawning(ChunkPos chunkcoordintpair, boolean reducedRange) {
+      return this.anyPlayerCloseEnoughForSpawning(this.m_140174_(chunkcoordintpair.m_45588_()), chunkcoordintpair, reducedRange);
+   }
+
+   final boolean anyPlayerCloseEnoughForSpawning(ChunkHolder playerchunk, ChunkPos chunkcoordintpair, boolean reducedRange) {
+      // this function is so hot that removing the map lookup call can have an order of magnitude impact on its performance
+      // tested and confirmed via System.nanoTime()
+      com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> playersInRange = reducedRange ? playerchunk.playersInMobSpawnRange : playerchunk.playersInChunkTickRange;
+      if (playersInRange == null) {
          return false;
+      }
+      Object[] backingSet = playersInRange.getBackingSet();
+
+      if (reducedRange) {
+         for (int i = 0, len = backingSet.length; i < len; ++i) {
+            Object raw = backingSet[i];
+            if (!(raw instanceof ServerPlayer player)) {
+               continue;
+            }
+            // don't check spectator and whatnot, already handled by mob spawn map update
+            if (m_140226_(chunkcoordintpair, player) < player.lastEntitySpawnRadiusSquared) {
+               return true; // in range
+            }
+         }
       } else {
-         for(ServerPlayer serverplayer : this.f_140149_.m_183926_(i)) {
-            if (this.m_183751_(serverplayer, p_183880_)) {
-               return true;
+         final double range = (net.minecraft.server.level.DistanceManager.MOB_SPAWN_RANGE * 16) * (net.minecraft.server.level.DistanceManager.MOB_SPAWN_RANGE * 16);
+         // before spigot, mob spawn range was actually mob spawn range + tick range, but it was split
+         for (int i = 0, len = backingSet.length; i < len; ++i) {
+            Object raw = backingSet[i];
+            if (!(raw instanceof ServerPlayer player)) {
+               continue;
+            }
+            // don't check spectator and whatnot, already handled by mob spawn map update
+            if (m_140226_(chunkcoordintpair, player) < range) {
+               return true; // in range
             }
          }
-
-         return false;
       }
+      // no players in range
+      return false;
+      // Paper end - optimise anyPlayerCloseEnoughForSpawning
    }
 
    public List<ServerPlayer> m_183888_(ChunkPos p_183889_) {
@@ -960,12 +_,21 @@
       }
    }
 
+   // Paper start
+   public final int getEffectiveViewDistance() {
+      // TODO this needs to be checked on update
+      // Mojang currently sets it to +1 of the configured view distance. So subtract one to get the one we really want.
+      //TODO check if +0 is correct now
+      return this.f_140126_;
+   }
+   // Paper end
+
    private boolean m_183751_(ServerPlayer p_183752_, ChunkPos p_183753_) {
       if (p_183752_.m_5833_()) {
          return false;
       } else {
          double d0 = m_140226_(p_183753_, p_183752_);
-         return d0 < 16384.0D;
+         return (d0 < 16384.0D) && p_183752_.m_146902_().m_45594_(p_183753_) <= DynamicSetting.CHUNK_TICK_DISTANCE.get(); // Goldenforge
       }
    }
 
@@ -984,41 +_,36 @@
          if (!flag) {
             this.f_140145_.m_140802_(SectionPos.m_235861_(p_140193_), p_140193_);
          }
+         this.addPlayerToDistanceMaps(p_140193_); // Paper - distance maps
       } else {
          SectionPos sectionpos = p_140193_.m_8965_();
          this.f_140149_.m_8249_(sectionpos.m_123251_().m_45588_(), p_140193_);
          if (!flag1) {
             this.f_140145_.m_140828_(sectionpos, p_140193_);
          }
+         this.removePlayerFromDistanceMaps(p_140193_); // Paper - distance maps
       }
 
-      for(int l = i - this.f_140126_ - 1; l <= i + this.f_140126_ + 1; ++l) {
-         for(int k = j - this.f_140126_ - 1; k <= j + this.f_140126_ + 1; ++k) {
-            if (m_200878_(l, k, i, j, this.f_140126_)) {
-               ChunkPos chunkpos = new ChunkPos(l, k);
-               this.m_183754_(p_140193_, chunkpos, new MutableObject<>(), !p_140194_, p_140194_);
-            }
-         }
-      }
+//      for(int l = i - this.viewDistance - 1; l <= i + this.viewDistance + 1; ++l) {
+//         for(int k = j - this.viewDistance - 1; k <= j + this.viewDistance + 1; ++k) {
+//            if (isChunkInRange(l, k, i, j, this.viewDistance)) {
+//               ChunkPos chunkpos = new ChunkPos(l, k);
+//               this.updateChunkTracking(p_140193_, chunkpos, new MutableObject<>(), !p_140194_, p_140194_);
+//            }
+//         }
+//      }
 
    }
 
    private SectionPos m_140373_(ServerPlayer p_140374_) {
       SectionPos sectionpos = SectionPos.m_235861_(p_140374_);
       p_140374_.m_9119_(sectionpos);
-      p_140374_.f_8906_.m_9829_(new ClientboundSetChunkCacheCenterPacket(sectionpos.m_123170_(), sectionpos.m_123222_()));
+      //p_140374_.connection.send(new ClientboundSetChunkCacheCenterPacket(sectionpos.x(), sectionpos.z()));
       return sectionpos;
    }
 
    public void m_140184_(ServerPlayer p_140185_) {
-      for(ChunkMap.TrackedEntity chunkmap$trackedentity : this.f_140150_.values()) {
-         if (chunkmap$trackedentity.f_140472_ == p_140185_) {
-            chunkmap$trackedentity.m_140487_(this.f_140133_.m_6907_());
-         } else {
-            chunkmap$trackedentity.m_140497_(p_140185_);
-         }
-      }
-
+      // Paper - delay this logic for the entity tracker tick, no need to duplicate it
       int i2 = SectionPos.m_123171_(p_140185_.m_146903_());
       int j2 = SectionPos.m_123171_(p_140185_.m_146907_());
       SectionPos sectionpos = p_140185_.m_8965_();
@@ -1051,63 +_,76 @@
          }
       }
 
-      int k = sectionpos.m_123170_();
-      int l = sectionpos.m_123222_();
-      if (Math.abs(k - i2) <= this.f_140126_ * 2 && Math.abs(l - j2) <= this.f_140126_ * 2) {
-         int l2 = Math.min(i2, k) - this.f_140126_ - 1;
-         int j3 = Math.min(j2, l) - this.f_140126_ - 1;
-         int k3 = Math.max(i2, k) + this.f_140126_ + 1;
-         int l3 = Math.max(j2, l) + this.f_140126_ + 1;
-
-         for(int k1 = l2; k1 <= k3; ++k1) {
-            for(int l1 = j3; l1 <= l3; ++l1) {
-               boolean flag5 = m_200878_(k1, l1, k, l, this.f_140126_);
-               boolean flag6 = m_200878_(k1, l1, i2, j2, this.f_140126_);
-               this.m_183754_(p_140185_, new ChunkPos(k1, l1), new MutableObject<>(), flag5, flag6);
-            }
-         }
-      } else {
-         for(int i1 = k - this.f_140126_ - 1; i1 <= k + this.f_140126_ + 1; ++i1) {
-            for(int j1 = l - this.f_140126_ - 1; j1 <= l + this.f_140126_ + 1; ++j1) {
-               if (m_200878_(i1, j1, k, l, this.f_140126_)) {
-                  boolean flag3 = true;
-                  boolean flag4 = false;
-                  this.m_183754_(p_140185_, new ChunkPos(i1, j1), new MutableObject<>(), true, false);
-               }
-            }
-         }
-
-         for(int k2 = i2 - this.f_140126_ - 1; k2 <= i2 + this.f_140126_ + 1; ++k2) {
-            for(int i3 = j2 - this.f_140126_ - 1; i3 <= j2 + this.f_140126_ + 1; ++i3) {
-               if (m_200878_(k2, i3, i2, j2, this.f_140126_)) {
-                  boolean flag7 = false;
-                  boolean flag8 = true;
-                  this.m_183754_(p_140185_, new ChunkPos(k2, i3), new MutableObject<>(), false, true);
-               }
-            }
-         }
-      }
+
+      this.updateMaps(p_140185_); // Paper - distance maps
+
+//      int k = sectionpos.x();
+//      int l = sectionpos.z();
+//      if (Math.abs(k - i2) <= this.viewDistance * 2 && Math.abs(l - j2) <= this.viewDistance * 2) {
+//         int l2 = Math.min(i2, k) - this.viewDistance - 1;
+//         int j3 = Math.min(j2, l) - this.viewDistance - 1;
+//         int k3 = Math.max(i2, k) + this.viewDistance + 1;
+//         int l3 = Math.max(j2, l) + this.viewDistance + 1;
+//
+//         for(int k1 = l2; k1 <= k3; ++k1) {
+//            for(int l1 = j3; l1 <= l3; ++l1) {
+//               boolean flag5 = isChunkInRange(k1, l1, k, l, this.viewDistance);
+//               boolean flag6 = isChunkInRange(k1, l1, i2, j2, this.viewDistance);
+//               this.updateChunkTracking(p_140185_, new ChunkPos(k1, l1), new MutableObject<>(), flag5, flag6);
+//            }
+//         }
+//      } else {
+//         for(int i1 = k - this.viewDistance - 1; i1 <= k + this.viewDistance + 1; ++i1) {
+//            for(int j1 = l - this.viewDistance - 1; j1 <= l + this.viewDistance + 1; ++j1) {
+//               if (isChunkInRange(i1, j1, k, l, this.viewDistance)) {
+//                  boolean flag3 = true;
+//                  boolean flag4 = false;
+//                  this.updateChunkTracking(p_140185_, new ChunkPos(i1, j1), new MutableObject<>(), true, false);
+//               }
+//            }
+//         }
+//
+//         for(int k2 = i2 - this.viewDistance - 1; k2 <= i2 + this.viewDistance + 1; ++k2) {
+//            for(int i3 = j2 - this.viewDistance - 1; i3 <= j2 + this.viewDistance + 1; ++i3) {
+//               if (isChunkInRange(k2, i3, i2, j2, this.viewDistance)) {
+//                  boolean flag7 = false;
+//                  boolean flag8 = true;
+//                  this.updateChunkTracking(p_140185_, new ChunkPos(k2, i3), new MutableObject<>(), false, true);
+//               }
+//            }
+//         }
+//      }
 
    }
 
    public List<ServerPlayer> m_183262_(ChunkPos p_183801_, boolean p_183802_) {
-      Set<ServerPlayer> set = this.f_140149_.m_183926_(p_183801_.m_45588_());
-      ImmutableList.Builder<ServerPlayer> builder = ImmutableList.builder();
-
-      for(ServerPlayer serverplayer : set) {
-         SectionPos sectionpos = serverplayer.m_8965_();
-         if (p_183802_ && m_183828_(p_183801_.f_45578_, p_183801_.f_45579_, sectionpos.m_123170_(), sectionpos.m_123222_(), this.f_140126_) || !p_183802_ && m_200878_(p_183801_.f_45578_, p_183801_.f_45579_, sectionpos.m_123170_(), sectionpos.m_123222_(), this.f_140126_)) {
-            builder.add(serverplayer);
+      // Paper start - per player view distance
+      ChunkHolder holder = this.m_140327_(p_183801_.m_45588_());
+      if (holder == null) {
+         return new java.util.ArrayList<>();
+      } else {
+         List<ServerPlayer> players =  holder.getPlayers(p_183802_);
+         for (ServerPlayer player : players) {
+            player.m_8965_(); // Goldenforge: mixin hack for railways mod
          }
+         return players;
       }
-
-      return builder.build();
+      // Paper end - per player view distance
    }
 
    protected void m_140199_(Entity p_140200_) {
-      if (!(p_140200_ instanceof EnderDragonPart)) {
+      org.spigotmc.AsyncCatcher.catchOp("entity track"); // Spigot
+      // Paper start - ignore and warn about illegal addEntity calls instead of crashing server
+      if (!p_140200_.isValid || p_140200_.f_19853_ != this.f_140133_ || this.f_140150_.containsKey(p_140200_.m_19879_())) {
+         f_140128_.error("Illegal ChunkMap::addEntity for world " + this.f_140133_.getWorld().getName()
+                 + ": " + p_140200_  + (this.f_140150_.containsKey(p_140200_.m_19879_()) ? " ALREADY CONTAINED (This would have crashed your server)" : ""), new Throwable());
+         return;
+      }
+      // Paper end
+      if (!(p_140200_ instanceof net.minecraftforge.entity.PartEntity)) {
          EntityType<?> entitytype = p_140200_.m_6095_();
          int i = entitytype.m_20681_() * 16;
+         i = org.spigotmc.TrackingRange.getEntityTrackingRange(p_140200_, i); // Spigot
          if (i != 0) {
             int j = entitytype.m_20682_();
             if (this.f_140150_.containsKey(p_140200_.m_19879_())) {
@@ -1115,7 +_,7 @@
             } else {
                ChunkMap.TrackedEntity chunkmap$trackedentity = new ChunkMap.TrackedEntity(p_140200_, i, j, entitytype.m_20683_());
                this.f_140150_.put(p_140200_.m_19879_(), chunkmap$trackedentity);
-               chunkmap$trackedentity.m_140487_(this.f_140133_.m_6907_());
+               chunkmap$trackedentity.m_140487_(this.f_140133_.m_6907_()); // Paper - don't search all players
                if (p_140200_ instanceof ServerPlayer) {
                   ServerPlayer serverplayer = (ServerPlayer)p_140200_;
                   this.m_140192_(serverplayer, true);
@@ -1133,6 +_,7 @@
    }
 
    protected void m_140331_(Entity p_140332_) {
+      org.spigotmc.AsyncCatcher.catchOp("entity untrack"); // Spigot
       if (p_140332_ instanceof ServerPlayer serverplayer) {
          this.m_140192_(serverplayer, false);
 
@@ -1202,38 +_,11 @@
 
       p_183761_.m_184135_(p_183763_.m_7697_(), p_183762_.getValue());
       DebugPackets.m_133676_(this.f_140133_, p_183763_.m_7697_());
-      List<Entity> list = Lists.newArrayList();
-      List<Entity> list1 = Lists.newArrayList();
-
-      for(ChunkMap.TrackedEntity chunkmap$trackedentity : this.f_140150_.values()) {
-         Entity entity = chunkmap$trackedentity.f_140472_;
-         if (entity != p_183761_ && entity.m_146902_().equals(p_183763_.m_7697_())) {
-            chunkmap$trackedentity.m_140497_(p_183761_);
-            if (entity instanceof Mob && ((Mob)entity).m_21524_() != null) {
-               list.add(entity);
-            }
-
-            if (!entity.m_20197_().isEmpty()) {
-               list1.add(entity);
-            }
-         }
-      }
-
-      if (!list.isEmpty()) {
-         for(Entity entity1 : list) {
-            p_183761_.f_8906_.m_9829_(new ClientboundSetEntityLinkPacket(entity1, ((Mob)entity1).m_21524_()));
-         }
-      }
-
-      if (!list1.isEmpty()) {
-         for(Entity entity2 : list1) {
-            p_183761_.f_8906_.m_9829_(new ClientboundSetPassengersPacket(entity2));
-         }
-      }
-
+      // Paper - no longer needed - this was used to account for clients bugging out since they needed a chunk to store entities, but they no longer need a chunk
+      net.minecraftforge.event.ForgeEventFactory.fireChunkWatch(p_183761_, p_183763_, this.f_140133_);
    }
 
-   protected PoiManager m_140424_() {
+   public PoiManager m_140424_() {
       return this.f_140138_;
    }
 
@@ -1247,11 +_,11 @@
 
    class DistanceManager extends net.minecraft.server.level.DistanceManager {
       protected DistanceManager(Executor p_140459_, Executor p_140460_) {
-         super(p_140459_, p_140460_);
+         super(p_140459_, p_140460_, ChunkMap.this);
       }
 
       protected boolean m_7009_(long p_140462_) {
-         return ChunkMap.this.f_140139_.contains(p_140462_);
+         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
       }
 
       @Nullable
@@ -1270,15 +_,52 @@
       final Entity f_140472_;
       private final int f_140473_;
       SectionPos f_140474_;
-      private final Set<ServerPlayerConnection> f_140475_ = Sets.newIdentityHashSet();
+      private final Set<ServerPlayerConnection> f_140475_ = new ReferenceOpenHashSet<>(); // Paper - optimise map impl
 
       public TrackedEntity(Entity p_140478_, int p_140479_, int p_140480_, boolean p_140481_) {
-         this.f_140471_ = new ServerEntity(ChunkMap.this.f_140133_, p_140478_, p_140480_, p_140481_, this::m_140489_);
+         this.f_140471_ = new ServerEntity(ChunkMap.this.f_140133_, p_140478_, p_140480_, p_140481_, this::m_140489_, f_140475_); // CraftBukkit
          this.f_140472_ = p_140478_;
          this.f_140473_ = p_140479_;
          this.f_140474_ = SectionPos.m_235861_(p_140478_);
       }
 
+      // Paper start - use distance map to optimise tracker
+      com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> lastTrackerCandidates;
+
+      final void updatePlayers(com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> newTrackerCandidates) {
+         com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> oldTrackerCandidates = this.lastTrackerCandidates;
+         this.lastTrackerCandidates = newTrackerCandidates;
+
+         if (newTrackerCandidates != null) {
+            Object[] rawData = newTrackerCandidates.getBackingSet();
+            for (int i = 0, len = rawData.length; i < len; ++i) {
+               Object raw = rawData[i];
+               if (!(raw instanceof ServerPlayer)) {
+                  continue;
+               }
+               ServerPlayer player = (ServerPlayer)raw;
+               this.m_140497_(player);
+            }
+         }
+
+         if (oldTrackerCandidates == newTrackerCandidates) {
+            // this is likely the case.
+            // means there has been no range changes, so we can just use the above for tracking.
+            return;
+         }
+
+         // stuff could have been removed, so we need to check the trackedPlayers set
+         // for players that were removed
+
+         for (ServerPlayerConnection conn : this.f_140475_.toArray(new ServerPlayerConnection[0])) { // avoid CME
+            if (newTrackerCandidates == null || !newTrackerCandidates.contains(conn.m_142253_())) {
+               this.m_140497_(conn.m_142253_());
+            }
+         }
+      }
+      // Paper end - use distance map to optimise tracker
+
+
       public boolean equals(Object p_140506_) {
          if (p_140506_ instanceof ChunkMap.TrackedEntity) {
             return ((ChunkMap.TrackedEntity)p_140506_).f_140472_.m_19879_() == this.f_140472_.m_19879_();
@@ -1323,7 +_,7 @@
       public void m_140497_(ServerPlayer p_140498_) {
          if (p_140498_ != this.f_140472_) {
             Vec3 vec3 = p_140498_.m_20182_().m_82546_(this.f_140472_.m_20182_());
-            double d0 = (double)Math.min(this.m_140496_(), (ChunkMap.this.f_140126_ - 1) * 16);
+            double d0 = (double)Math.min(this.m_140496_(),io.papermc.paper.chunk.system.ChunkSystem.getSendViewDistance(p_140498_) * 16); // Paper - per player view distance
             double d1 = vec3.f_82479_ * vec3.f_82479_ + vec3.f_82481_ * vec3.f_82481_;
             double d2 = d0 * d0;
             boolean flag = d1 <= d2 && this.f_140472_.m_6459_(p_140498_);
@@ -1342,15 +_,34 @@
          return ChunkMap.this.f_140133_.m_7654_().m_7186_(p_140484_);
       }
 
+      private static int getHighestRange(Entity parent, int highest) {
+         List<Entity> passengers = parent.m_20197_();
+
+         for (int i = 0, size = passengers.size(); i < size; i++) {
+            Entity entity = passengers.get(i);
+            int range = entity.m_6095_().m_20681_() * 16;
+            range = org.spigotmc.TrackingRange.getEntityTrackingRange(entity, range); // Paper
+
+            if (range > highest) { // Paper - we need the lowest range thanks to the fact that our tracker doesn't account for passenger logic // Tuinity - not anymore!
+               highest = range;
+            }
+
+            highest = getHighestRange(entity, highest);
+         }
+
+         return highest;
+      }
+
       private int m_140496_() {
          int i = this.f_140473_;
 
-         for(Entity entity : this.f_140472_.m_146897_()) {
-            int j = entity.m_6095_().m_20681_() * 16;
-            if (j > i) {
-               i = j;
-            }
-         }
+//         for(Entity entity : this.entity.getIndirectPassengers()) {
+//            int j = entity.getType().clientTrackingRange() * 16;
+//            if (j > i) {
+//               i = j;
+//            }
+//         }
+         i = getHighestRange(this.f_140472_, i);
 
          return this.m_140483_(i);
       }
