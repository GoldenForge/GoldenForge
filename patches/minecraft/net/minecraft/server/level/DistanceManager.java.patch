--- a/net/minecraft/server/level/DistanceManager.java
+++ b/net/minecraft/server/level/DistanceManager.java
@@ -1,21 +_,13 @@
 package net.minecraft.server.level;
 
+import com.destroystokyo.paper.util.MCUtil;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
 import com.mojang.datafixers.util.Either;
 import com.mojang.logging.LogUtils;
-import it.unimi.dsi.fastutil.longs.Long2ByteMap;
-import it.unimi.dsi.fastutil.longs.Long2ByteOpenHashMap;
-import it.unimi.dsi.fastutil.longs.Long2IntMap;
-import it.unimi.dsi.fastutil.longs.Long2IntMaps;
-import it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap;
-import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
-import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
-import it.unimi.dsi.fastutil.longs.LongIterator;
-import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
-import it.unimi.dsi.fastutil.longs.LongSet;
+import it.unimi.dsi.fastutil.longs.*;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ObjectSet;
@@ -37,6 +_,12 @@
 import org.slf4j.Logger;
 
 public abstract class DistanceManager {
+
+   // Paper start - rewrite chunk system
+   public io.papermc.paper.chunk.system.scheduling.ChunkHolderManager getChunkHolderManager() {
+      return this.chunkMap.f_140133_.chunkTaskScheduler.chunkHolderManager;
+   }
+   // Paper end - rewrite chunk system
    static final Logger f_140758_ = LogUtils.getLogger();
    private static final int f_143205_ = 2;
    static final int f_140759_ = 33 + ChunkStatus.m_62370_(ChunkStatus.f_62326_) - 2;
@@ -44,56 +_,32 @@
    private static final int f_183899_ = 32;
    private static final int f_183900_ = 33;
    final Long2ObjectMap<ObjectSet<ServerPlayer>> f_140760_ = new Long2ObjectOpenHashMap<>();
-   final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> f_140761_ = new Long2ObjectOpenHashMap<>();
-   private final DistanceManager.ChunkTicketTracker f_140762_ = new DistanceManager.ChunkTicketTracker();
+   //final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> tickets = new Long2ObjectOpenHashMap<>();
+   //private final DistanceManager.ChunkTicketTracker ticketTracker = new DistanceManager.ChunkTicketTracker();
+   public static final int MOB_SPAWN_RANGE = 8;
    private final DistanceManager.FixedPlayerDistanceChunkTracker f_140763_ = new DistanceManager.FixedPlayerDistanceChunkTracker(8);
-   private final TickingTracker f_183901_ = new TickingTracker();
-   private final DistanceManager.PlayerTicketTracker f_140764_ = new DistanceManager.PlayerTicketTracker(33);
-   final Set<ChunkHolder> f_140765_ = Sets.newHashSet();
-   final ChunkTaskPriorityQueueSorter f_140766_;
-   final ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> f_140767_;
-   final ProcessorHandle<ChunkTaskPriorityQueueSorter.Release> f_140768_;
-   final LongSet f_140769_ = new LongOpenHashSet();
-   final Executor f_140770_;
-   private long f_140771_;
-   private int f_183902_ = 10;
-
-   protected DistanceManager(Executor p_140774_, Executor p_140775_) {
+   //private final TickingTracker tickingTicketsTracker = new TickingTracker();
+   //private final DistanceManager.PlayerTicketTracker playerTicketManager = new DistanceManager.PlayerTicketTracker(33);
+   //final Set<ChunkHolder> chunksToUpdateFutures = Sets.newHashSet();
+   //final ChunkTaskPriorityQueueSorter ticketThrottler;
+//   final ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> ticketThrottlerInput;
+//   final ProcessorHandle<ChunkTaskPriorityQueueSorter.Release> ticketThrottlerReleaser;
+//   final LongSet ticketsToRelease = new LongOpenHashSet();
+//   final Executor mainThreadExecutor;
+//   private long ticketTickCounter;
+//   private int simulationDistance = 10;
+
+
+   private final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> forcedTickets = new Long2ObjectOpenHashMap<>();
+   private final ChunkMap chunkMap; // Paper
+   protected DistanceManager(Executor p_140774_, Executor p_140775_, ChunkMap chunkMap) {
       ProcessorHandle<Runnable> processorhandle = ProcessorHandle.m_18714_("player ticket throttler", p_140775_::execute);
-      ChunkTaskPriorityQueueSorter chunktaskpriorityqueuesorter = new ChunkTaskPriorityQueueSorter(ImmutableList.of(processorhandle), p_140774_, 4);
-      this.f_140766_ = chunktaskpriorityqueuesorter;
-      this.f_140767_ = chunktaskpriorityqueuesorter.m_140604_(processorhandle, true);
-      this.f_140768_ = chunktaskpriorityqueuesorter.m_140567_(processorhandle);
-      this.f_140770_ = p_140775_;
+      //ChunkTaskPriorityQueueSorter chunktaskpriorityqueuesorter = new ChunkTaskPriorityQueueSorter(ImmutableList.of(processorhandle), p_140774_, 4);
+      this.chunkMap = chunkMap; // Paper
    }
 
    protected void m_140776_() {
-      ++this.f_140771_;
-      ObjectIterator<Long2ObjectMap.Entry<SortedArraySet<Ticket<?>>>> objectiterator = this.f_140761_.long2ObjectEntrySet().fastIterator();
-
-      while(objectiterator.hasNext()) {
-         Long2ObjectMap.Entry<SortedArraySet<Ticket<?>>> entry = objectiterator.next();
-         Iterator<Ticket<?>> iterator = entry.getValue().iterator();
-         boolean flag = false;
-
-         while(iterator.hasNext()) {
-            Ticket<?> ticket = iterator.next();
-            if (ticket.m_9434_(this.f_140771_)) {
-               iterator.remove();
-               flag = true;
-               this.f_183901_.m_184165_(entry.getLongKey(), ticket);
-            }
-         }
-
-         if (flag) {
-            this.f_140762_.m_140715_(entry.getLongKey(), m_140797_(entry.getValue()), false);
-         }
-
-         if (entry.getValue().isEmpty()) {
-            objectiterator.remove();
-         }
-      }
-
+      this.getChunkHolderManager().tick(); // Paper - rewrite chunk system
    }
 
    private static int m_140797_(SortedArraySet<Ticket<?>> p_140798_) {
@@ -108,113 +_,59 @@
    @Nullable
    protected abstract ChunkHolder m_7288_(long p_140780_, int p_140781_, @Nullable ChunkHolder p_140782_, int p_140783_);
 
+   boolean pollingPendingChunkUpdates = false; // Paper - Chunk priority
+   protected long ticketLevelUpdateCount; // Paper - replace ticket level propagator
    public boolean m_140805_(ChunkMap p_140806_) {
-      this.f_140763_.m_6410_();
-      this.f_183901_.m_184145_();
-      this.f_140764_.m_6410_();
-      int i = Integer.MAX_VALUE - this.f_140762_.m_140877_(Integer.MAX_VALUE);
-      boolean flag = i != 0;
-      if (flag) {
-      }
-
-      if (!this.f_140765_.isEmpty()) {
-         this.f_140765_.forEach((p_183908_) -> {
-            p_183908_.m_143003_(p_140806_, this.f_140770_);
-         });
-         this.f_140765_.clear();
-         return true;
-      } else {
-         if (!this.f_140769_.isEmpty()) {
-            LongIterator longiterator = this.f_140769_.iterator();
-
-            while(longiterator.hasNext()) {
-               long j = longiterator.nextLong();
-               if (this.m_140857_(j).stream().anyMatch((p_183910_) -> {
-                  return p_183910_.m_9428_() == TicketType.f_9444_;
-               })) {
-                  ChunkHolder chunkholder = p_140806_.m_140174_(j);
-                  if (chunkholder == null) {
-                     throw new IllegalStateException();
-                  }
-
-                  CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> completablefuture = chunkholder.m_140073_();
-                  completablefuture.thenAccept((p_183905_) -> {
-                     this.f_140770_.execute(() -> {
-                        this.f_140768_.m_6937_(ChunkTaskPriorityQueueSorter.m_140628_(() -> {
-                        }, j, false));
-                     });
-                  });
-               }
-            }
-
-            this.f_140769_.clear();
-         }
-
-         return flag;
-      }
-   }
-
-   void m_140784_(long p_140785_, Ticket<?> p_140786_) {
-      SortedArraySet<Ticket<?>> sortedarrayset = this.m_140857_(p_140785_);
-      int i = m_140797_(sortedarrayset);
-      Ticket<?> ticket = sortedarrayset.m_14253_(p_140786_);
-      ticket.m_9429_(this.f_140771_);
-      if (p_140786_.m_9433_() < i) {
-         this.f_140762_.m_140715_(p_140785_, p_140786_.m_9433_(), true);
-      }
-
-   }
-
-   void m_140818_(long p_140819_, Ticket<?> p_140820_) {
-      SortedArraySet<Ticket<?>> sortedarrayset = this.m_140857_(p_140819_);
-      if (sortedarrayset.remove(p_140820_)) {
-      }
-
-      if (sortedarrayset.isEmpty()) {
-         this.f_140761_.remove(p_140819_);
-      }
-
-      this.f_140762_.m_140715_(p_140819_, m_140797_(sortedarrayset), false);
+      return this.getChunkHolderManager().processTicketUpdates(); // Paper - rewrite chunk system
+   }
+
+   boolean addTicket(long i, Ticket<?> ticket) {
+      org.spigotmc.AsyncCatcher.catchOp("ChunkMapDistance::addTicket"); // Paper
+      return this.getChunkHolderManager().addTicketAtLevel((TicketType)ticket.m_9428_(), i, ticket.m_9433_(), ticket.f_9422_); // Paper - rewrite chunk system
+   }
+
+   boolean removeTicket(long i, Ticket<?> ticket) {
+      org.spigotmc.AsyncCatcher.catchOp("ChunkMapDistance::removeTicket"); // Paper
+      return this.getChunkHolderManager().removeTicketAtLevel((TicketType)ticket.m_9428_(), i, ticket.m_9433_(), ticket.f_9422_); // Paper - rewrite chunk system
    }
 
    public <T> void m_140792_(TicketType<T> p_140793_, ChunkPos p_140794_, int p_140795_, T p_140796_) {
-      this.m_140784_(p_140794_.m_45588_(), new Ticket<>(p_140793_, p_140795_, p_140796_));
+      this.getChunkHolderManager().addTicketAtLevel(p_140793_, p_140794_, p_140795_, p_140796_); // Paper - rewrite chunk system
    }
 
    public <T> void m_140823_(TicketType<T> p_140824_, ChunkPos p_140825_, int p_140826_, T p_140827_) {
-      Ticket<T> ticket = new Ticket<>(p_140824_, p_140826_, p_140827_);
-      this.m_140818_(p_140825_.m_45588_(), ticket);
+      this.getChunkHolderManager().removeTicketAtLevel(p_140824_, p_140825_, p_140826_, p_140827_); // Paper - rewrite chunk system
    }
 
    public <T> void m_140840_(TicketType<T> p_140841_, ChunkPos p_140842_, int p_140843_, T p_140844_) {
-      Ticket<T> ticket = new Ticket<>(p_140841_, 33 - p_140843_, p_140844_);
-      long i = p_140842_.m_45588_();
-      this.m_140784_(i, ticket);
-      this.f_183901_.m_184151_(i, ticket);
+      // CraftBukkit start
+      this.addRegionTicketAtDistance(p_140841_, p_140842_, p_140843_, p_140844_);
+   }
+
+   public <T> boolean addRegionTicketAtDistance(TicketType<T> tickettype, ChunkPos chunkcoordintpair, int i, T t0) {
+      return this.getChunkHolderManager().addTicketAtLevel(tickettype, chunkcoordintpair, 33 - i, t0); // Paper - rewrite chunk system
    }
 
    public <T> void m_140849_(TicketType<T> p_140850_, ChunkPos p_140851_, int p_140852_, T p_140853_) {
-      Ticket<T> ticket = new Ticket<>(p_140850_, 33 - p_140852_, p_140853_);
-      long i = p_140851_.m_45588_();
-      this.m_140818_(i, ticket);
-      this.f_183901_.m_184165_(i, ticket);
-   }
-
-   private SortedArraySet<Ticket<?>> m_140857_(long p_140858_) {
-      return this.f_140761_.computeIfAbsent(p_140858_, (p_183923_) -> {
-         return SortedArraySet.m_14246_(4);
-      });
-   }
+      // CraftBukkit start
+      this.removeRegionTicketAtDistance(p_140850_, p_140851_, p_140852_, p_140853_);
+   }
+
+   public <T> boolean removeRegionTicketAtDistance(TicketType<T> tickettype, ChunkPos chunkcoordintpair, int i, T t0) {
+      return this.getChunkHolderManager().removeTicketAtLevel(tickettype, chunkcoordintpair, 33 - i, t0); // Paper - rewrite chunk system
+   }
+
+   // Paper - rewrite chunk system
 
    protected void m_140799_(ChunkPos p_140800_, boolean p_140801_) {
-      Ticket<ChunkPos> ticket = new Ticket<>(TicketType.f_9445_, 31, p_140800_);
+      Ticket<ChunkPos> ticket = new Ticket<>(TicketType.f_9445_, 31, p_140800_, 0L); // Paper - rewrite chunk system
       long i = p_140800_.m_45588_();
       if (p_140801_) {
-         this.m_140784_(i, ticket);
-         this.f_183901_.m_184151_(i, ticket);
+         this.addTicket(i, ticket);
+         //this.tickingTicketsTracker.addTicket(i, ticket);
       } else {
-         this.m_140818_(i, ticket);
-         this.f_183901_.m_184165_(i, ticket);
+         this.removeTicket(i, ticket);
+         //this.tickingTicketsTracker.removeTicket(i, ticket);
       }
 
    }
@@ -225,51 +_,54 @@
       this.f_140760_.computeIfAbsent(i, (p_183921_) -> {
          return new ObjectOpenHashSet();
       }).add(p_140804_);
-      this.f_140763_.m_140715_(i, 0, true);
-      this.f_140764_.m_140715_(i, 0, true);
-      this.f_183901_.m_184154_(TicketType.f_9444_, chunkpos, this.m_183918_(), chunkpos);
+      //this.naturalSpawnChunkCounter.update(i, 0, true);
+      //this.playerTicketManager.update(i, 0, true);
+      //this.tickingTicketsTracker.addTicket(TicketType.PLAYER, chunkpos, this.getPlayerTicketLevel(), chunkpos);
    }
 
    public void m_140828_(SectionPos p_140829_, ServerPlayer p_140830_) {
       ChunkPos chunkpos = p_140829_.m_123251_();
       long i = chunkpos.m_45588_();
       ObjectSet<ServerPlayer> objectset = this.f_140760_.get(i);
-      objectset.remove(p_140830_);
-      if (objectset.isEmpty()) {
+
+      if (objectset == null) return; // CraftBukkit - SPIGOT-6208
+
+      if (objectset != null) objectset.remove(p_140830_); // Paper - some state corruption happens here, don't crash, clean up gracefully.
+      if (objectset == null || objectset.isEmpty()) { // Paper
          this.f_140760_.remove(i);
-         this.f_140763_.m_140715_(i, Integer.MAX_VALUE, false);
-         this.f_140764_.m_140715_(i, Integer.MAX_VALUE, false);
-         this.f_183901_.m_184168_(TicketType.f_9444_, chunkpos, this.m_183918_(), chunkpos);
+         //this.naturalSpawnChunkCounter.update(i, Integer.MAX_VALUE, false);
+         //this.playerTicketManager.update(i, Integer.MAX_VALUE, false);
+         //this.tickingTicketsTracker.removeTicket(TicketType.PLAYER, chunkpos, this.getPlayerTicketLevel(), chunkpos);
       }
 
-   }
-
-   private int m_183918_() {
-      return Math.max(0, 31 - this.f_183902_);
    }
 
    public boolean m_183913_(long p_183914_) {
-      return this.f_183901_.m_6172_(p_183914_) < 32;
+      // Paper start - replace player chunk loader system
+      ChunkHolder holder = this.chunkMap.m_140327_(p_183914_);
+      return holder != null && holder.isEntityTickingReady();
+      // Paper end - replace player chunk loader system
    }
 
    public boolean m_183916_(long p_183917_) {
-      return this.f_183901_.m_6172_(p_183917_) < 33;
+      // Paper start - replace player chunk loader system
+      ChunkHolder holder = this.chunkMap.m_140327_(p_183917_);
+      return holder != null && holder.isTickingReady();
+      // Paper end - replace player chunk loader system
    }
 
    protected String m_140838_(long p_140839_) {
-      SortedArraySet<Ticket<?>> sortedarrayset = this.f_140761_.get(p_140839_);
-      return sortedarrayset != null && !sortedarrayset.isEmpty() ? sortedarrayset.m_14262_().toString() : "no_ticket";
+      return this.getChunkHolderManager().getTicketDebugString(p_140839_); // Paper - rewrite chunk system
+
    }
 
    protected void m_140777_(int p_140778_) {
-      this.f_140764_.m_140912_(p_140778_);
+      this.chunkMap.m_140167_(p_140778_);// Paper - route to player chunk manager
+
    }
 
    public void m_183911_(int p_183912_) {
-      if (p_183912_ != this.f_183902_) {
-         this.f_183902_ = p_183912_;
-         this.f_183901_.m_184146_(this.m_183918_());
-      }
+      (this.chunkMap.f_140133_).moonrise$getPlayerChunkLoader().setTickDistance(p_183912_); // Paper - rewrite chunk system
 
    }
 
@@ -284,117 +_,72 @@
    }
 
    public String m_140837_() {
-      return this.f_140766_.m_140558_();
-   }
-
-   private void m_143207_(String p_143208_) {
-      try {
-         FileOutputStream fileoutputstream = new FileOutputStream(new File(p_143208_));
-
-         try {
-            for(Long2ObjectMap.Entry<SortedArraySet<Ticket<?>>> entry : this.f_140761_.long2ObjectEntrySet()) {
-               ChunkPos chunkpos = new ChunkPos(entry.getLongKey());
-
-               for(Ticket<?> ticket : entry.getValue()) {
-                  fileoutputstream.write((chunkpos.f_45578_ + "\t" + chunkpos.f_45579_ + "\t" + ticket.m_9428_() + "\t" + ticket.m_9433_() + "\t\n").getBytes(StandardCharsets.UTF_8));
-               }
-            }
-         } catch (Throwable throwable1) {
-            try {
-               fileoutputstream.close();
-            } catch (Throwable throwable) {
-               throwable1.addSuppressed(throwable);
-            }
-
-            throw throwable1;
-         }
-
-         fileoutputstream.close();
-      } catch (IOException ioexception) {
-         f_140758_.error("Failed to dump tickets to {}", p_143208_, ioexception);
-      }
-
-   }
-
-   @VisibleForTesting
-   TickingTracker m_183915_() {
-      return this.f_183901_;
-   }
+      return "No DistanceManager stats available"; // Paper - rewrite chunk system
+   }
+
+   public boolean shouldForceTicks(long chunkPos) {
+       SortedArraySet<Ticket<?>> tickets = forcedTickets.get(chunkPos);
+       return tickets != null && !tickets.isEmpty();
+   }
+
+//   @VisibleForTesting
+//   TickingTracker tickingTracker() {
+//      return this.tickingTicketsTracker;
+//   }
 
    public void m_201910_() {
-      ImmutableSet<TicketType<?>> immutableset = ImmutableSet.of(TicketType.f_9449_, TicketType.f_9448_, TicketType.f_9446_);
-      ObjectIterator<Long2ObjectMap.Entry<SortedArraySet<Ticket<?>>>> objectiterator = this.f_140761_.long2ObjectEntrySet().fastIterator();
-
-      while(objectiterator.hasNext()) {
-         Long2ObjectMap.Entry<SortedArraySet<Ticket<?>>> entry = objectiterator.next();
-         Iterator<Ticket<?>> iterator = entry.getValue().iterator();
-         boolean flag = false;
-
-         while(iterator.hasNext()) {
-            Ticket<?> ticket = iterator.next();
-            if (!immutableset.contains(ticket.m_9428_())) {
-               iterator.remove();
-               flag = true;
-               this.f_183901_.m_184165_(entry.getLongKey(), ticket);
-            }
-         }
-
-         if (flag) {
-            this.f_140762_.m_140715_(entry.getLongKey(), m_140797_(entry.getValue()), false);
-         }
-
-         if (entry.getValue().isEmpty()) {
-            objectiterator.remove();
-         }
-      }
-
+   }
+
+   private SortedArraySet<Ticket<?>> m_140857_(long p_140858_) {
+      return this.getChunkHolderManager().getTicketsSyncronised(p_140858_);
    }
 
    public boolean m_201911_() {
-      return !this.f_140761_.isEmpty();
-   }
-
-   class ChunkTicketTracker extends ChunkTracker {
-      public ChunkTicketTracker() {
-         super(ChunkMap.f_140127_ + 2, 16, 256);
-      }
-
-      protected int m_7031_(long p_140883_) {
-         SortedArraySet<Ticket<?>> sortedarrayset = DistanceManager.this.f_140761_.get(p_140883_);
-         if (sortedarrayset == null) {
-            return Integer.MAX_VALUE;
-         } else {
-            return sortedarrayset.isEmpty() ? Integer.MAX_VALUE : sortedarrayset.m_14262_().m_9433_();
-         }
-      }
-
-      protected int m_6172_(long p_140885_) {
-         if (!DistanceManager.this.m_7009_(p_140885_)) {
-            ChunkHolder chunkholder = DistanceManager.this.m_7316_(p_140885_);
-            if (chunkholder != null) {
-               return chunkholder.m_140093_();
-            }
-         }
-
-         return ChunkMap.f_140127_ + 1;
-      }
-
-      protected void m_7351_(long p_140880_, int p_140881_) {
-         ChunkHolder chunkholder = DistanceManager.this.m_7316_(p_140880_);
-         int i = chunkholder == null ? ChunkMap.f_140127_ + 1 : chunkholder.m_140093_();
-         if (i != p_140881_) {
-            chunkholder = DistanceManager.this.m_7288_(p_140880_, p_140881_, chunkholder, i);
-            if (chunkholder != null) {
-               DistanceManager.this.f_140765_.add(chunkholder);
-            }
-
-         }
-      }
-
-      public int m_140877_(int p_140878_) {
-         return this.m_75588_(p_140878_);
-      }
-   }
+      return this.getChunkHolderManager().hasTickets(); // Paper - rewrite chunk system
+   }
+
+//   class ChunkTicketTracker extends ChunkTracker {
+//      public ChunkTicketTracker() {
+//         super(ChunkMap.MAX_CHUNK_DISTANCE + 2, 16, 256);
+//      }
+//
+//      protected int getLevelFromSource(long p_140883_) {
+//         SortedArraySet<Ticket<?>> sortedarrayset = DistanceManager.this.tickets.get(p_140883_);
+//         if (sortedarrayset == null) {
+//            return Integer.MAX_VALUE;
+//         } else {
+//            return sortedarrayset.isEmpty() ? Integer.MAX_VALUE : sortedarrayset.first().getTicketLevel();
+//         }
+//      }
+//
+//      protected int getLevel(long p_140885_) {
+//         if (!DistanceManager.this.isChunkToRemove(p_140885_)) {
+//            ChunkHolder chunkholder = DistanceManager.this.getChunk(p_140885_);
+//            if (chunkholder != null) {
+//               return chunkholder.getTicketLevel();
+//            }
+//         }
+//
+//         return ChunkMap.MAX_CHUNK_DISTANCE + 1;
+//      }
+//
+//      protected void setLevel(long p_140880_, int p_140881_) {
+//         ChunkHolder chunkholder = DistanceManager.this.getChunk(p_140880_);
+//         int i = chunkholder == null ? ChunkMap.MAX_CHUNK_DISTANCE + 1 : chunkholder.getTicketLevel();
+//         if (i != p_140881_) {
+//            chunkholder = DistanceManager.this.updateChunkScheduling(p_140880_, p_140881_, chunkholder, i);
+//            if (chunkholder != null) {
+//              // DistanceManager.this.chunksToUpdateFutures.add(chunkholder);
+//               DistanceManager.this.pendingChunkUpdates.add(chunkholder);
+//            }
+//
+//         }
+//      }
+//
+//      public int runDistanceUpdates(int p_140878_) {
+//         return this.runUpdates(p_140878_);
+//      }
+//   }
 
    class FixedPlayerDistanceChunkTracker extends ChunkTracker {
       protected final Long2ByteMap f_140886_ = new Long2ByteOpenHashMap();
@@ -464,92 +_,92 @@
 
       }
    }
-
-   class PlayerTicketTracker extends DistanceManager.FixedPlayerDistanceChunkTracker {
-      private int f_140905_;
-      private final Long2IntMap f_140906_ = Long2IntMaps.synchronize(new Long2IntOpenHashMap());
-      private final LongSet f_140907_ = new LongOpenHashSet();
-
-      protected PlayerTicketTracker(int p_140910_) {
-         super(p_140910_);
-         this.f_140905_ = 0;
-         this.f_140906_.defaultReturnValue(p_140910_ + 2);
-      }
-
-      protected void m_8002_(long p_140915_, int p_140916_, int p_140917_) {
-         this.f_140907_.add(p_140915_);
-      }
-
-      public void m_140912_(int p_140913_) {
-         for(Long2ByteMap.Entry entry : this.f_140886_.long2ByteEntrySet()) {
-            byte b0 = entry.getByteValue();
-            long i = entry.getLongKey();
-            this.m_140918_(i, b0, this.m_140932_(b0), b0 <= p_140913_ - 2);
-         }
-
-         this.f_140905_ = p_140913_;
-      }
-
-      private void m_140918_(long p_140919_, int p_140920_, boolean p_140921_, boolean p_140922_) {
-         if (p_140921_ != p_140922_) {
-            Ticket<?> ticket = new Ticket<>(TicketType.f_9444_, DistanceManager.f_140759_, new ChunkPos(p_140919_));
-            if (p_140922_) {
-               DistanceManager.this.f_140767_.m_6937_(ChunkTaskPriorityQueueSorter.m_140624_(() -> {
-                  DistanceManager.this.f_140770_.execute(() -> {
-                     if (this.m_140932_(this.m_6172_(p_140919_))) {
-                        DistanceManager.this.m_140784_(p_140919_, ticket);
-                        DistanceManager.this.f_140769_.add(p_140919_);
-                     } else {
-                        DistanceManager.this.f_140768_.m_6937_(ChunkTaskPriorityQueueSorter.m_140628_(() -> {
-                        }, p_140919_, false));
-                     }
-
-                  });
-               }, p_140919_, () -> {
-                  return p_140920_;
-               }));
-            } else {
-               DistanceManager.this.f_140768_.m_6937_(ChunkTaskPriorityQueueSorter.m_140628_(() -> {
-                  DistanceManager.this.f_140770_.execute(() -> {
-                     DistanceManager.this.m_140818_(p_140919_, ticket);
-                  });
-               }, p_140919_, true));
-            }
-         }
-
-      }
-
-      public void m_6410_() {
-         super.m_6410_();
-         if (!this.f_140907_.isEmpty()) {
-            LongIterator longiterator = this.f_140907_.iterator();
-
-            while(longiterator.hasNext()) {
-               long i = longiterator.nextLong();
-               int j = this.f_140906_.get(i);
-               int k = this.m_6172_(i);
-               if (j != k) {
-                  DistanceManager.this.f_140766_.m_6250_(new ChunkPos(i), () -> {
-                     return this.f_140906_.get(i);
-                  }, k, (p_140928_) -> {
-                     if (p_140928_ >= this.f_140906_.defaultReturnValue()) {
-                        this.f_140906_.remove(i);
-                     } else {
-                        this.f_140906_.put(i, p_140928_);
-                     }
-
-                  });
-                  this.m_140918_(i, k, this.m_140932_(j), this.m_140932_(k));
-               }
-            }
-
-            this.f_140907_.clear();
-         }
-
-      }
-
-      private boolean m_140932_(int p_140933_) {
-         return p_140933_ <= this.f_140905_ - 2;
-      }
-   }
+//
+//   class PlayerTicketTracker extends DistanceManager.FixedPlayerDistanceChunkTracker {
+//      private int viewDistance;
+//      private final Long2IntMap queueLevels = Long2IntMaps.synchronize(new Long2IntOpenHashMap());
+//      private final LongSet toUpdate = new LongOpenHashSet();
+//
+//      protected PlayerTicketTracker(int p_140910_) {
+//         super(p_140910_);
+//         this.viewDistance = 0;
+//         this.queueLevels.defaultReturnValue(p_140910_ + 2);
+//      }
+//
+//      protected void onLevelChange(long p_140915_, int p_140916_, int p_140917_) {
+//         this.toUpdate.add(p_140915_);
+//      }
+//
+//      public void updateViewDistance(int p_140913_) {
+//         for(Long2ByteMap.Entry entry : this.chunks.long2ByteEntrySet()) {
+//            byte b0 = entry.getByteValue();
+//            long i = entry.getLongKey();
+//            this.onLevelChange(i, b0, this.haveTicketFor(b0), b0 <= p_140913_ - 2);
+//         }
+//
+//         this.viewDistance = p_140913_;
+//      }
+//
+//      private void onLevelChange(long p_140919_, int p_140920_, boolean p_140921_, boolean p_140922_) {
+//         if (p_140921_ != p_140922_) {
+//            Ticket<?> ticket = new Ticket<>(TicketType.PLAYER, DistanceManager.PLAYER_TICKET_LEVEL, new ChunkPos(p_140919_));
+//            if (p_140922_) {
+//               DistanceManager.this.ticketThrottlerInput.tell(ChunkTaskPriorityQueueSorter.message(() -> {
+//                  DistanceManager.this.mainThreadExecutor.execute(() -> {
+//                     if (this.haveTicketFor(this.getLevel(p_140919_))) {
+//                        DistanceManager.this.addTicket(p_140919_, ticket);
+//                        DistanceManager.this.ticketsToRelease.add(p_140919_);
+//                     } else {
+//                        DistanceManager.this.ticketThrottlerReleaser.tell(ChunkTaskPriorityQueueSorter.release(() -> {
+//                        }, p_140919_, false));
+//                     }
+//
+//                  });
+//               }, p_140919_, () -> {
+//                  return p_140920_;
+//               }));
+//            } else {
+//               DistanceManager.this.ticketThrottlerReleaser.tell(ChunkTaskPriorityQueueSorter.release(() -> {
+//                  DistanceManager.this.mainThreadExecutor.execute(() -> {
+//                     DistanceManager.this.removeTicket(p_140919_, ticket);
+//                  });
+//               }, p_140919_, true));
+//            }
+//         }
+//
+//      }
+//
+//      public void runAllUpdates() {
+//         super.runAllUpdates();
+//         if (!this.toUpdate.isEmpty()) {
+//            LongIterator longiterator = this.toUpdate.iterator();
+//
+//            while(longiterator.hasNext()) {
+//               long i = longiterator.nextLong();
+//               int j = this.queueLevels.get(i);
+//               int k = this.getLevel(i);
+//               if (j != k) {
+//                  DistanceManager.this.ticketThrottler.onLevelChange(new ChunkPos(i), () -> {
+//                     return this.queueLevels.get(i);
+//                  }, k, (p_140928_) -> {
+//                     if (p_140928_ >= this.queueLevels.defaultReturnValue()) {
+//                        this.queueLevels.remove(i);
+//                     } else {
+//                        this.queueLevels.put(i, p_140928_);
+//                     }
+//
+//                  });
+//                  this.onLevelChange(i, k, this.haveTicketFor(j), this.haveTicketFor(k));
+//               }
+//            }
+//
+//            this.toUpdate.clear();
+//         }
+//
+//      }
+//
+//      private boolean haveTicketFor(int p_140933_) {
+//         return p_140933_ <= this.viewDistance - 2;
+//      }
+
 }
