--- a/net/minecraft/server/level/ChunkHolder.java
+++ b/net/minecraft/server/level/ChunkHolder.java
@@ -2,6 +_,7 @@
 
 import com.mojang.datafixers.util.Either;
 import com.mojang.datafixers.util.Pair;
+import io.papermc.paper.ConfigTemp;
 import it.unimi.dsi.fastutil.shorts.ShortOpenHashSet;
 import it.unimi.dsi.fastutil.shorts.ShortSet;
 import java.util.ArrayList;
@@ -17,10 +_,12 @@
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
+import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket;
 import net.minecraft.network.protocol.game.ClientboundLightUpdatePacket;
 import net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.DebugBuffer;
 import net.minecraft.util.Mth;
 import net.minecraft.world.level.ChunkPos;
@@ -36,6 +_,7 @@
 import net.minecraft.world.level.chunk.LevelChunkSection;
 import net.minecraft.world.level.chunk.ProtoChunk;
 import net.minecraft.world.level.lighting.LevelLightEngine;
+import org.goldenforge.GoldenForge;
 
 public class ChunkHolder {
    public static final Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> f_139995_ = Either.right(ChunkHolder.ChunkLoadingFailure.f_140101_);
@@ -46,18 +_,19 @@
    private static final List<ChunkStatus> f_139999_ = ChunkStatus.m_62349_();
    private static final ChunkHolder.FullChunkStatus[] f_140000_ = ChunkHolder.FullChunkStatus.values();
    private static final int f_142982_ = 64;
-   private final AtomicReferenceArray<CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> f_140001_ = new AtomicReferenceArray<>(f_139999_.size());
+   //private final AtomicReferenceArray<CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> futures = new AtomicReferenceArray<>(CHUNK_STATUSES.size());
    private final LevelHeightAccessor f_142983_;
-   private volatile CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> f_140002_ = f_139998_;
-   private volatile CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> f_140003_ = f_139998_;
-   private volatile CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> f_140004_ = f_139998_;
-   private CompletableFuture<ChunkAccess> f_140005_ = CompletableFuture.completedFuture((ChunkAccess)null);
+   //private volatile CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> fullChunkFuture = UNLOADED_LEVEL_CHUNK_FUTURE; private int fullChunkCreateCount; private volatile boolean isFullChunkReady; // Paper - cache chunk ticking stage
+   //private volatile CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> tickingChunkFuture = UNLOADED_LEVEL_CHUNK_FUTURE;  private volatile boolean isTickingReady; // Paper - cache chunk ticking stage
+   //private volatile CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> entityTickingChunkFuture = UNLOADED_LEVEL_CHUNK_FUTURE; private volatile boolean isEntityTickingReady; // Paper - cache chunk ticking stage
+   //private CompletableFuture<ChunkAccess> chunkToSave = CompletableFuture.completedFuture((ChunkAccess)null);
    @Nullable
    private final DebugBuffer<ChunkHolder.ChunkSaveDebug> f_142984_ = null;
-   private int f_140006_;
-   private int f_140007_;
-   private int f_140008_;
-   final ChunkPos f_140009_;
+   //public int oldTicketLevel;
+   //private int ticketLevel;
+   //public  int queueLevel;
+   boolean isUpdateQueued = false; // Paper
+   public final ChunkPos f_140009_;
    private boolean f_140010_;
    private final ShortSet[] f_140011_;
    private final BitSet f_140012_ = new BitSet();
@@ -65,97 +_,201 @@
    private final LevelLightEngine f_140014_;
    private final ChunkHolder.LevelChangeListener f_140015_;
    private final ChunkHolder.PlayerProvider f_140016_;
-   private boolean f_140017_;
+   //private boolean wasAccessibleSinceLastSave;
    private boolean f_140018_;
-   private CompletableFuture<Void> f_142981_ = CompletableFuture.completedFuture((Void)null);
-
-   public ChunkHolder(ChunkPos p_142986_, int p_142987_, LevelHeightAccessor p_142988_, LevelLightEngine p_142989_, ChunkHolder.LevelChangeListener p_142990_, ChunkHolder.PlayerProvider p_142991_) {
+   LevelChunk currentlyLoading; // Forge: Used to bypass future chain when loading chunks.
+   //private CompletableFuture<Void> pendingFullStateConfirmation = CompletableFuture.completedFuture((Void)null);
+
+   private final ChunkMap chunkMap; // Paper
+   long lastAutoSaveTime; // Paper - incremental autosave
+   long inactiveTimeStart; // Paper - incremental autosave
+
+   // Paper start - optimize chunk status progression without jumping through thread pool
+   public final LevelChunk getSendingChunk() {
+      // it's important that we use getChunkAtIfLoadedImmediately to mirror the chunk sending logic used
+      // in Chunk's neighbour callback
+      LevelChunk ret = this.chunkMap.f_140133_.m_7726_().getChunkAtIfLoadedImmediately(this.f_140009_.f_45578_, this.f_140009_.f_45579_);
+      if (ret != null && ret.areNeighboursLoaded(1)) {
+         return ret;
+      }
+      return null;
+   }
+
+
+   public @Nullable ChunkAccess getAvailableChunkNow() {
+      return this.newChunkHolder.getCurrentChunk(); // Paper - rewrite chunk system
+   }
+   public static ChunkStatus getNextStatus(ChunkStatus status) {
+      if (status == ChunkStatus.f_62326_) {
+         return status;
+      }
+      return f_139999_.get(status.m_62445_() + 1);
+   }
+   // Paper end
+   // Paper start
+
+   private boolean loadCallbackScheduled = false;
+   private boolean unloadCallbackScheduled = false;
+   // Paper end
+
+
+   // Paper start - optimise chunk tick iteration
+   public final boolean needsBroadcastChanges() {
+      return this.f_140010_ || !this.f_140013_.isEmpty() || !this.f_140012_.isEmpty();
+   }
+
+   private void addToBroadcastMap() {
+      this.chunkMap.needsChangeBroadcasting.add(this);
+   }
+   // Paper end - optimise chunk tick iteration
+
+   // cached here to avoid a map lookup
+   com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> playersInMobSpawnRange;
+   com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> playersInChunkTickRange;
+   // Paper end - optimise anyPlayerCloseEnoughForSpawning
+
+   public void onChunkAdd() {
+      // Paper start - optimise chunk tick iteration
+      if (this.needsBroadcastChanges()) {
+         this.chunkMap.needsChangeBroadcasting.add(this);
+      }
+      // Paper end - optimise chunk tick iteration
+   }
+
+   public void onChunkRemove() {
+      // Paper start - optimise chunk tick iteration
+      if (this.needsBroadcastChanges()) {
+         this.chunkMap.needsChangeBroadcasting.remove(this);
+      }
+      // Paper end - optimise chunk tick iteration
+   }
+
+   private final com.destroystokyo.paper.util.maplist.ReferenceList<ServerPlayer> playersSentChunkTo = new com.destroystokyo.paper.util.maplist.ReferenceList<>();
+
+   public void addPlayer(ServerPlayer player) {
+      if (!this.playersSentChunkTo.add(player)) {
+         // Kaiiju start - Kick player instead of crashing
+         String errorMsg = "Already sent chunk " + this.f_140009_ + " in world " + this.chunkMap.f_140133_.getWorld().getName();
+         player.f_8906_.m_9942_(Component.m_237113_(errorMsg));
+         GoldenForge.LOGGER.error(errorMsg);
+         //throw new IllegalStateException("Already sent chunk " + this.pos + " in world '" + this.chunkMap.level.getWorld().getName() + "' to player " + player);
+         // Kaiiju end
+      }
+   }
+
+   public void removePlayer(ServerPlayer player) {
+      if (!this.playersSentChunkTo.remove(player)) {
+         throw new IllegalStateException("Have not sent chunk " + this.f_140009_ + " in world '" + this.chunkMap.f_140133_.getWorld().getName() + "' to player " + player);
+      }
+   }
+   public final io.papermc.paper.chunk.system.scheduling.NewChunkHolder newChunkHolder; // Paper - rewrite chunk system
+   public ChunkHolder(ChunkPos p_142986_, LevelHeightAccessor p_142988_, LevelLightEngine p_142989_, ChunkHolder.PlayerProvider p_142991_, io.papermc.paper.chunk.system.scheduling.NewChunkHolder newChunkHolder) { // Paper - rewrite chunk system) {
+      this.newChunkHolder = newChunkHolder; // Paper - rewrite chunk system
+
       this.f_140009_ = p_142986_;
       this.f_142983_ = p_142988_;
       this.f_140014_ = p_142989_;
-      this.f_140015_ = p_142990_;
+      this.f_140015_ = null; // Paper - rewrite chunk system;
       this.f_140016_ = p_142991_;
-      this.f_140006_ = ChunkMap.f_140127_ + 1;
-      this.f_140007_ = this.f_140006_;
-      this.f_140008_ = this.f_140006_;
-      this.m_140027_(p_142987_);
+//      this.oldTicketLevel = ChunkMap.MAX_CHUNK_DISTANCE + 1;
+//      this.ticketLevel = this.oldTicketLevel;
+//      this.queueLevel = this.oldTicketLevel;
+//      this.setTicketLevel(p_142987_);
       this.f_140011_ = new ShortSet[p_142988_.m_151559_()];
-   }
+      this.chunkMap = (ChunkMap)p_142991_; // Paper
+   }
+
+   // Paper start
+   // CraftBukkit start
+   public LevelChunk getFullChunkNow() {
+      // Paper start - rewrite chunk system
+      ChunkAccess chunk = this.getAvailableChunkNow();
+      if (!this.isFullChunkReady() || !(chunk instanceof LevelChunk)) return null; // instanceof to avoid a race condition on off-main threads
+      return (LevelChunk)chunk;
+      // Paper end - rewrite chunk system
+   }
+   // CraftBukkit end
 
    public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> m_140047_(ChunkStatus p_140048_) {
-      CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.f_140001_.get(p_140048_.m_62445_());
-      return completablefuture == null ? f_139996_ : completablefuture;
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
    }
 
    public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> m_140080_(ChunkStatus p_140081_) {
-      return m_140074_(this.f_140007_).m_62427_(p_140081_) ? this.m_140047_(p_140081_) : f_139996_;
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
    }
 
    public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> m_140026_() {
-      return this.f_140003_;
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
    }
 
    public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> m_140073_() {
-      return this.f_140004_;
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
    }
 
    public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> m_140082_() {
-      return this.f_140002_;
-   }
-
-   @Nullable
-   public LevelChunk m_140085_() {
-      CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.m_140026_();
-      Either<LevelChunk, ChunkHolder.ChunkLoadingFailure> either = completablefuture.getNow((Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>)null);
-      return either == null ? null : either.left().orElse((LevelChunk)null);
-   }
-
-   @Nullable
-   public LevelChunk m_212234_() {
-      CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.m_140082_();
-      Either<LevelChunk, ChunkHolder.ChunkLoadingFailure> either = completablefuture.getNow((Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>)null);
-      return either == null ? null : either.left().orElse((LevelChunk)null);
+      // Goldenforge: minecolonies compat
+      CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> future = new CompletableFuture<>();
+      LevelChunk chunk = this.getFullChunkNow();
+      if (chunk != null)
+         future.complete(Either.left(chunk));
+      else
+         future.complete(f_139997_);
+
+      return future;
+      //throw new UnsupportedOperationException(); // Paper - rewrite chunk system
+   }
+
+
+   @Nullable
+   public final LevelChunk m_140085_() { // Paper - final for inline
+      // Paper start - rewrite chunk system
+      if (!this.isTickingReady()) {
+         return null;
+      }
+      return (LevelChunk)this.getAvailableChunkNow();
+      // Paper end - rewrite chunk system
+   }
+
+   @Nullable
+   public final LevelChunk m_212234_() { // Paper - final for inline
+      // Paper start - rewrite chunk system
+      if (!this.isFullChunkReady()) {
+         return null;
+      }
+      return (LevelChunk)this.getAvailableChunkNow();
+      // Paper end - rewrite chunk system
    }
 
    @Nullable
    public ChunkStatus m_140088_() {
-      for(int i = f_139999_.size() - 1; i >= 0; --i) {
-         ChunkStatus chunkstatus = f_139999_.get(i);
-         CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.m_140047_(chunkstatus);
-         if (completablefuture.getNow(f_139995_).left().isPresent()) {
-            return chunkstatus;
-         }
-      }
+      return this.newChunkHolder.getCurrentGenStatus(); // Paper - rewrite chunk system
+   }
 
-      return null;
+   // Paper start
+   public ChunkStatus getChunkHolderStatus() {
+      return this.newChunkHolder.getCurrentGenStatus(); // Paper - rewrite chunk system
    }
+   // Paper end
 
    @Nullable
    public ChunkAccess m_140089_() {
-      for(int i = f_139999_.size() - 1; i >= 0; --i) {
-         ChunkStatus chunkstatus = f_139999_.get(i);
-         CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.m_140047_(chunkstatus);
-         if (!completablefuture.isCompletedExceptionally()) {
-            Optional<ChunkAccess> optional = completablefuture.getNow(f_139995_).left();
-            if (optional.isPresent()) {
-               return optional.get();
-            }
-         }
-      }
-
-      return null;
-   }
-
-   public CompletableFuture<ChunkAccess> m_140090_() {
-      return this.f_140005_;
-   }
+      return this.newChunkHolder.getCurrentChunk(); // Paper - rewrite chunk system
+   }
+
+   // Paper - rewrite chunk system
 
    public void m_140056_(BlockPos p_140057_) {
-      LevelChunk levelchunk = this.m_140085_();
+      // Paper start - replace player chunk loader
+      if (this.playersSentChunkTo.size() == 0) {
+         return;
+      }
+      // Paper end - replace player chunk loader
+      LevelChunk levelchunk = this.getSendingChunk(); // Paper - no-tick view distance
       if (levelchunk != null) {
          int i = this.f_142983_.m_151564_(p_140057_.m_123342_());
          if (this.f_140011_[i] == null) {
             this.f_140010_ = true;
+            this.addToBroadcastMap(); // Paper - optimise chunk tick iteration
             this.f_140011_[i] = new ShortOpenHashSet();
          }
 
@@ -164,21 +_,28 @@
    }
 
    public void m_140036_(LightLayer p_140037_, int p_140038_) {
-      Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either = this.m_140080_(ChunkStatus.f_62322_).getNow((Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>)null);
-      if (either != null) {
-         ChunkAccess chunkaccess = either.left().orElse((ChunkAccess)null);
-         if (chunkaccess != null) {
-            chunkaccess.m_8092_(true);
-            LevelChunk levelchunk = this.m_140085_();
-            if (levelchunk != null) {
-               int i = this.f_140014_.m_164447_();
-               int j = this.f_140014_.m_164448_();
-               if (p_140038_ >= i && p_140038_ <= j) {
-                  int k = p_140038_ - i;
+      // Paper start - no-tick view distance
+
+      if (true) {
+         ChunkAccess ichunkaccess = this.getAvailableChunkNow();
+
+         if (ichunkaccess != null) {
+            ichunkaccess.m_8092_(true);
+            LevelChunk chunk = this.getSendingChunk();
+            // Paper end - no-tick view distance
+
+            if (this.playersSentChunkTo.size() != 0 && chunk != null) { // Paper - replace player chunk loader
+               int j = this.f_140014_.m_164447_();
+               int k = this.f_140014_.m_164448_();
+
+               if (p_140038_ >= j && p_140038_ <= k) {
+                  this.addToBroadcastMap(); // Paper - optimise chunk tick iteration
+                  int l = p_140038_ - j;
+
                   if (p_140037_ == LightLayer.SKY) {
-                     this.f_140013_.set(k);
+                     this.f_140013_.set(l);
                   } else {
-                     this.f_140012_.set(k);
+                     this.f_140012_.set(l);
                   }
 
                }
@@ -188,45 +_,47 @@
    }
 
    public void m_140054_(LevelChunk p_140055_) {
-      if (this.f_140010_ || !this.f_140013_.isEmpty() || !this.f_140012_.isEmpty()) {
-         Level level = p_140055_.m_62953_();
-         int i = 0;
-
-         for(int j = 0; j < this.f_140011_.length; ++j) {
-            i += this.f_140011_[j] != null ? this.f_140011_[j].size() : 0;
-         }
-
-         this.f_140018_ |= i >= 64;
-         if (!this.f_140013_.isEmpty() || !this.f_140012_.isEmpty()) {
-            this.m_140063_(new ClientboundLightUpdatePacket(p_140055_.m_7697_(), this.f_140014_, this.f_140013_, this.f_140012_, true), !this.f_140018_);
-            this.f_140013_.clear();
-            this.f_140012_.clear();
-         }
-
-         for(int l = 0; l < this.f_140011_.length; ++l) {
-            ShortSet shortset = this.f_140011_[l];
-            if (shortset != null) {
-               int k = this.f_142983_.m_151568_(l);
-               SectionPos sectionpos = SectionPos.m_123196_(p_140055_.m_7697_(), k);
-               if (shortset.size() == 1) {
-                  BlockPos blockpos = sectionpos.m_123245_(shortset.iterator().nextShort());
-                  BlockState blockstate = level.m_8055_(blockpos);
-                  this.m_140063_(new ClientboundBlockUpdatePacket(blockpos, blockstate), false);
-                  this.m_140032_(level, blockpos, blockstate);
-               } else {
-                  LevelChunkSection levelchunksection = p_140055_.m_183278_(l);
-                  ClientboundSectionBlocksUpdatePacket clientboundsectionblocksupdatepacket = new ClientboundSectionBlocksUpdatePacket(sectionpos, shortset, levelchunksection, this.f_140018_);
-                  this.m_140063_(clientboundsectionblocksupdatepacket, false);
-                  clientboundsectionblocksupdatepacket.m_132992_((p_140078_, p_140079_) -> {
-                     this.m_140032_(level, p_140078_, p_140079_);
-                  });
+      if (this.needsBroadcastChanges()) { // Paper - moved into above, other logic needs to call
+         if (this.f_140010_ || !this.f_140013_.isEmpty() || !this.f_140012_.isEmpty()) {
+            Level level = p_140055_.m_62953_();
+            int i = 0;
+
+            for (int j = 0; j < this.f_140011_.length; ++j) {
+               i += this.f_140011_[j] != null ? this.f_140011_[j].size() : 0;
+            }
+
+            this.f_140018_ |= i >= 64;
+            if (!this.f_140013_.isEmpty() || !this.f_140012_.isEmpty()) {
+               this.m_140063_(new ClientboundLightUpdatePacket(p_140055_.m_7697_(), this.f_140014_, this.f_140013_, this.f_140012_, true), !this.f_140018_);
+               this.f_140013_.clear();
+               this.f_140012_.clear();
+            }
+
+            for (int l = 0; l < this.f_140011_.length; ++l) {
+               ShortSet shortset = this.f_140011_[l];
+               if (shortset != null) {
+                  int k = this.f_142983_.m_151568_(l);
+                  SectionPos sectionpos = SectionPos.m_123196_(p_140055_.m_7697_(), k);
+                  if (shortset.size() == 1) {
+                     BlockPos blockpos = sectionpos.m_123245_(shortset.iterator().nextShort());
+                     BlockState blockstate = level.m_8055_(blockpos);
+                     this.m_140063_(new ClientboundBlockUpdatePacket(blockpos, blockstate), false);
+                     this.m_140032_(level, blockpos, blockstate);
+                  } else {
+                     LevelChunkSection levelchunksection = p_140055_.m_183278_(l);
+                     ClientboundSectionBlocksUpdatePacket clientboundsectionblocksupdatepacket = new ClientboundSectionBlocksUpdatePacket(sectionpos, shortset, levelchunksection, this.f_140018_);
+                     this.m_140063_(clientboundsectionblocksupdatepacket, false);
+                     clientboundsectionblocksupdatepacket.m_132992_((p_140078_, p_140079_) -> {
+                        this.m_140032_(level, p_140078_, p_140079_);
+                     });
+                  }
+
+                  this.f_140011_[l] = null;
                }
-
-               this.f_140011_[l] = null;
             }
+
+            this.f_140010_ = false;
          }
-
-         this.f_140010_ = false;
       }
    }
 
@@ -248,63 +_,35 @@
 
    }
 
-   private void m_140063_(Packet<?> p_140064_, boolean p_140065_) {
-      this.f_140016_.m_183262_(this.f_140009_, p_140065_).forEach((p_140062_) -> {
-         p_140062_.f_8906_.m_9829_(p_140064_);
-      });
-   }
-
-   public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> m_140049_(ChunkStatus p_140050_, ChunkMap p_140051_) {
-      int i = p_140050_.m_62445_();
-      CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.f_140001_.get(i);
-      if (completablefuture != null) {
-         Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either = completablefuture.getNow(f_203750_);
-         if (either == null) {
-            String s = "value in future for status: " + p_140050_ + " was incorrectly set to null at chunk: " + this.f_140009_;
-            throw p_140051_.m_203751_(new IllegalStateException("null value previously set for chunk status"), s);
-         }
-
-         if (either == f_203750_ || either.right().isEmpty()) {
-            return completablefuture;
-         }
-      }
-
-      if (m_140074_(this.f_140007_).m_62427_(p_140050_)) {
-         CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture1 = p_140051_.m_140292_(this, p_140050_);
-         this.m_143017_(completablefuture1, "schedule " + p_140050_);
-         this.f_140001_.set(i, completablefuture1);
-         return completablefuture1;
-      } else {
-         return completablefuture == null ? f_139996_ : completablefuture;
-      }
-   }
-
-   protected void m_200416_(String p_200417_, CompletableFuture<?> p_200418_) {
-      if (this.f_142984_ != null) {
-         this.f_142984_.m_144625_(new ChunkHolder.ChunkSaveDebug(Thread.currentThread(), p_200418_, p_200417_));
-      }
-
-      this.f_140005_ = this.f_140005_.thenCombine(p_200418_, (p_200414_, p_200415_) -> {
-         return p_200414_;
-      });
-   }
-
-   private void m_143017_(CompletableFuture<? extends Either<? extends ChunkAccess, ChunkHolder.ChunkLoadingFailure>> p_143018_, String p_143019_) {
-      if (this.f_142984_ != null) {
-         this.f_142984_.m_144625_(new ChunkHolder.ChunkSaveDebug(Thread.currentThread(), p_143018_, p_143019_));
-      }
-
-      this.f_140005_ = this.f_140005_.thenCombine(p_143018_, (p_200411_, p_200412_) -> {
-         return p_200412_.map((p_200406_) -> {
-            return p_200406_;
-         }, (p_200409_) -> {
-            return p_200411_;
-         });
-      });
-   }
+   // Paper start - rewrite chunk system
+   public List<ServerPlayer> getPlayers(boolean onlyOnWatchDistanceEdge){
+      List<ServerPlayer> ret = new java.util.ArrayList<>();
+      for (int i = 0, len = this.playersSentChunkTo.size(); i < len; ++i) {
+         ServerPlayer player = this.playersSentChunkTo.getUnchecked(i);
+         if (onlyOnWatchDistanceEdge && !this.chunkMap.f_140133_.playerChunkLoader.isChunkSent(player, this.f_140009_.f_45578_, this.f_140009_.f_45579_, onlyOnWatchDistanceEdge)) {
+            continue;
+         }
+         ret.add(player);
+      }
+
+      return ret;
+   }
+
+   public void m_140063_(Packet<?> p_140064_, boolean p_140065_) {
+      this.broadcast(this.getPlayers(p_140065_), p_140064_);
+   }
+   // Paper end - rewrite chunk system
+
+   private void broadcast(List<ServerPlayer> players, Packet<?> packet) {
+      players.forEach((entityplayer) -> {
+         entityplayer.f_8906_.m_9829_(packet);
+      });
+   }
+
+   // Paper - rewrite chunk system
 
    public ChunkHolder.FullChunkStatus m_140091_() {
-      return m_140083_(this.f_140007_);
+      return this.newChunkHolder.getChunkStatus(); // Paper - rewrite chunk system
    }
 
    public ChunkPos m_140092_() {
@@ -312,112 +_,14 @@
    }
 
    public int m_140093_() {
-      return this.f_140007_;
-   }
-
-   public int m_140094_() {
-      return this.f_140008_;
-   }
-
-   private void m_140086_(int p_140087_) {
-      this.f_140008_ = p_140087_;
-   }
-
-   public void m_140027_(int p_140028_) {
-      this.f_140007_ = p_140028_;
-   }
-
-   private void m_142998_(ChunkMap p_142999_, CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> p_143000_, Executor p_143001_, ChunkHolder.FullChunkStatus p_143002_) {
-      this.f_142981_.cancel(false);
-      CompletableFuture<Void> completablefuture = new CompletableFuture<>();
-      completablefuture.thenRunAsync(() -> {
-         p_142999_.m_143075_(this.f_140009_, p_143002_);
-      }, p_143001_);
-      this.f_142981_ = completablefuture;
-      p_143000_.thenAccept((p_200421_) -> {
-         p_200421_.ifLeft((p_200424_) -> {
-            completablefuture.complete((Void)null);
-         });
-      });
-   }
-
-   private void m_142992_(ChunkMap p_142993_, ChunkHolder.FullChunkStatus p_142994_) {
-      this.f_142981_.cancel(false);
-      p_142993_.m_143075_(this.f_140009_, p_142994_);
-   }
-
-   protected void m_143003_(ChunkMap p_143004_, Executor p_143005_) {
-      ChunkStatus chunkstatus = m_140074_(this.f_140006_);
-      ChunkStatus chunkstatus1 = m_140074_(this.f_140007_);
-      boolean flag = this.f_140006_ <= ChunkMap.f_140127_;
-      boolean flag1 = this.f_140007_ <= ChunkMap.f_140127_;
-      ChunkHolder.FullChunkStatus chunkholder$fullchunkstatus = m_140083_(this.f_140006_);
-      ChunkHolder.FullChunkStatus chunkholder$fullchunkstatus1 = m_140083_(this.f_140007_);
-      if (flag) {
-         Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either = Either.right(new ChunkHolder.ChunkLoadingFailure() {
-            public String toString() {
-               return "Unloaded ticket level " + ChunkHolder.this.f_140009_;
-            }
-         });
-
-         for(int i = flag1 ? chunkstatus1.m_62445_() + 1 : 0; i <= chunkstatus.m_62445_(); ++i) {
-            CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.f_140001_.get(i);
-            if (completablefuture == null) {
-               this.f_140001_.set(i, CompletableFuture.completedFuture(either));
-            }
-         }
-      }
-
-      boolean flag5 = chunkholder$fullchunkstatus.m_140114_(ChunkHolder.FullChunkStatus.BORDER);
-      boolean flag6 = chunkholder$fullchunkstatus1.m_140114_(ChunkHolder.FullChunkStatus.BORDER);
-      this.f_140017_ |= flag6;
-      if (!flag5 && flag6) {
-         this.f_140002_ = p_143004_.m_143109_(this);
-         this.m_142998_(p_143004_, this.f_140002_, p_143005_, ChunkHolder.FullChunkStatus.BORDER);
-         this.m_143017_(this.f_140002_, "full");
-      }
-
-      if (flag5 && !flag6) {
-         this.f_140002_.complete(f_139997_);
-         this.f_140002_ = f_139998_;
-      }
-
-      boolean flag7 = chunkholder$fullchunkstatus.m_140114_(ChunkHolder.FullChunkStatus.TICKING);
-      boolean flag2 = chunkholder$fullchunkstatus1.m_140114_(ChunkHolder.FullChunkStatus.TICKING);
-      if (!flag7 && flag2) {
-         this.f_140003_ = p_143004_.m_143053_(this);
-         this.m_142998_(p_143004_, this.f_140003_, p_143005_, ChunkHolder.FullChunkStatus.TICKING);
-         this.m_143017_(this.f_140003_, "ticking");
-      }
-
-      if (flag7 && !flag2) {
-         this.f_140003_.complete(f_139997_);
-         this.f_140003_ = f_139998_;
-      }
-
-      boolean flag3 = chunkholder$fullchunkstatus.m_140114_(ChunkHolder.FullChunkStatus.ENTITY_TICKING);
-      boolean flag4 = chunkholder$fullchunkstatus1.m_140114_(ChunkHolder.FullChunkStatus.ENTITY_TICKING);
-      if (!flag3 && flag4) {
-         if (this.f_140004_ != f_139998_) {
-            throw (IllegalStateException)Util.m_137570_(new IllegalStateException());
-         }
-
-         this.f_140004_ = p_143004_.m_143117_(this.f_140009_);
-         this.m_142998_(p_143004_, this.f_140004_, p_143005_, ChunkHolder.FullChunkStatus.ENTITY_TICKING);
-         this.m_143017_(this.f_140004_, "entity ticking");
-      }
-
-      if (flag3 && !flag4) {
-         this.f_140004_.complete(f_139997_);
-         this.f_140004_ = f_139998_;
-      }
-
-      if (!chunkholder$fullchunkstatus1.m_140114_(chunkholder$fullchunkstatus)) {
-         this.m_142992_(p_143004_, chunkholder$fullchunkstatus1);
-      }
-
-      this.f_140015_.m_6250_(this.f_140009_, this::m_140094_, this.f_140007_, this::m_140086_);
-      this.f_140006_ = this.f_140007_;
+      return this.newChunkHolder.getTicketLevel(); // Paper - rewrite chunk system
+   }
+
+   public LevelChunk getFullChunkNowUnchecked() {
+      // Paper start - rewrite chunk system
+      ChunkAccess chunk = this.getAvailableChunkNow();
+      return chunk instanceof LevelChunk ? (LevelChunk)chunk : null;
+      // Paper end - rewrite chunk system
    }
 
    public static ChunkStatus m_140074_(int p_140075_) {
@@ -428,38 +_,6 @@
       return f_140000_[Mth.m_14045_(33 - p_140084_ + 1, 0, f_140000_.length - 1)];
    }
 
-   public boolean m_140095_() {
-      return this.f_140017_;
-   }
-
-   public void m_140096_() {
-      this.f_140017_ = m_140083_(this.f_140007_).m_140114_(ChunkHolder.FullChunkStatus.BORDER);
-   }
-
-   public void m_140052_(ImposterProtoChunk p_140053_) {
-      for(int i = 0; i < this.f_140001_.length(); ++i) {
-         CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.f_140001_.get(i);
-         if (completablefuture != null) {
-            Optional<ChunkAccess> optional = completablefuture.getNow(f_139995_).left();
-            if (!optional.isEmpty() && optional.get() instanceof ProtoChunk) {
-               this.f_140001_.set(i, CompletableFuture.completedFuture(Either.left(p_140053_)));
-            }
-         }
-      }
-
-      this.m_143017_(CompletableFuture.completedFuture(Either.left(p_140053_.m_62768_())), "replaceProto");
-   }
-
-   public List<Pair<ChunkStatus, CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>>> m_202980_() {
-      List<Pair<ChunkStatus, CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>>> list = new ArrayList<>();
-
-      for(int i = 0; i < f_139999_.size(); ++i) {
-         list.add(Pair.of(f_139999_.get(i), this.f_140001_.get(i)));
-      }
-
-      return list;
-   }
-
    public interface ChunkLoadingFailure {
       ChunkHolder.ChunkLoadingFailure f_140101_ = new ChunkHolder.ChunkLoadingFailure() {
          public String toString() {
@@ -499,4 +_,18 @@
    public interface PlayerProvider {
       List<ServerPlayer> m_183262_(ChunkPos p_183717_, boolean p_183718_);
    }
+
+   // Paper start
+   public final boolean isEntityTickingReady() {
+      return this.newChunkHolder.isEntityTickingReady(); // Paper - rewrite chunk system
+   }
+
+   public final boolean isTickingReady() {
+      return this.newChunkHolder.isTickingReady(); // Paper - rewrite chunk system
+   }
+
+   public final boolean isFullChunkReady() {
+      return this.newChunkHolder.isFullChunkReady(); // Paper - rewrite chunk system
+   }
+   // Paper end
 }
