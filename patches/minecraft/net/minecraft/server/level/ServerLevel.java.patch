--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -18,15 +_,7 @@
 import java.io.Writer;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
 import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
 import java.util.function.Function;
@@ -119,12 +_,7 @@
 import net.minecraft.world.level.dimension.BuiltinDimensionTypes;
 import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.dimension.end.EndDragonFight;
-import net.minecraft.world.level.entity.EntityPersistentStorage;
-import net.minecraft.world.level.entity.EntityTickList;
-import net.minecraft.world.level.entity.EntityTypeTest;
-import net.minecraft.world.level.entity.LevelCallback;
-import net.minecraft.world.level.entity.LevelEntityGetter;
-import net.minecraft.world.level.entity.PersistentEntitySectionManager;
+import net.minecraft.world.level.entity.*;
 import net.minecraft.world.level.gameevent.DynamicGameEventListener;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.gameevent.GameEventListener;
@@ -147,6 +_,7 @@
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import net.minecraft.world.ticks.LevelTicks;
+import org.goldenforge.config.GoldenForgeConfig;
 import org.slf4j.Logger;
 
 public class ServerLevel extends Level implements WorldGenLevel {
@@ -163,11 +_,12 @@
    private static final int f_143242_ = 300;
    private static final int f_184046_ = 65536;
    final List<ServerPlayer> f_8546_ = Lists.newArrayList();
-   private final ServerChunkCache f_8547_;
+   public final ServerChunkCache f_8547_;
    private final MinecraftServer f_8548_;
-   private final ServerLevelData f_8549_;
+   public final ServerLevelData f_8549_;
    final EntityTickList f_143243_ = new EntityTickList();
-   private final PersistentEntitySectionManager<Entity> f_143244_;
+   // Goldenforge: Compat
+   public final PersistentEntitySectionManager<Entity> f_143244_;
    public boolean f_8564_;
    private final SleepStatus f_143245_;
    private int f_8551_;
@@ -184,10 +_,356 @@
    private final List<CustomSpawner> f_8558_;
    @Nullable
    private final EndDragonFight f_8559_;
-   final Int2ObjectMap<EnderDragonPart> f_143247_ = new Int2ObjectOpenHashMap<>();
+   final Int2ObjectMap<net.minecraftforge.entity.PartEntity<?>> f_143247_ = new Int2ObjectOpenHashMap<>();
    private final StructureManager f_214997_;
    private final StructureCheck f_196556_;
    private final boolean f_8561_;
+   public long lastMidTickExecuteFailure; // Paper - execute chunk tasks mid tick
+   private net.minecraftforge.common.util.LevelCapabilityData capabilityData;
+
+   // Paper start - rewrite chunk system
+
+   public final io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler chunkTaskScheduler;
+   public final io.papermc.paper.chunk.system.io.RegionFileIOThread.ChunkDataController chunkDataControllerNew
+           = new io.papermc.paper.chunk.system.io.RegionFileIOThread.ChunkDataController(io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.CHUNK_DATA) {
+
+      @Override
+      public net.minecraft.world.level.chunk.storage.RegionFileStorage getCache() {
+         return ServerLevel.this.m_7726_().f_8325_.regionFileCache;
+      }
+
+      @Override
+      public void writeData(int chunkX, int chunkZ, net.minecraft.nbt.CompoundTag compound) throws IOException {
+         ServerLevel.this.m_7726_().f_8325_.m_63502_(new ChunkPos(chunkX, chunkZ), compound);
+      }
+
+      @Override
+      public net.minecraft.nbt.CompoundTag readData(int chunkX, int chunkZ) throws IOException {
+         return ServerLevel.this.m_7726_().f_8325_.readSync(new ChunkPos(chunkX, chunkZ));
+      }
+   };
+   public final io.papermc.paper.chunk.system.io.RegionFileIOThread.ChunkDataController poiDataControllerNew
+           = new io.papermc.paper.chunk.system.io.RegionFileIOThread.ChunkDataController(io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.POI_DATA) {
+
+      @Override
+      public net.minecraft.world.level.chunk.storage.RegionFileStorage getCache() {
+         return ServerLevel.this.m_7726_().f_8325_.m_140424_();
+      }
+
+      @Override
+      public void writeData(int chunkX, int chunkZ, net.minecraft.nbt.CompoundTag compound) throws IOException {
+         ServerLevel.this.m_7726_().f_8325_.m_140424_().m_63708_(new ChunkPos(chunkX, chunkZ), compound);
+      }
+
+      @Override
+      public net.minecraft.nbt.CompoundTag readData(int chunkX, int chunkZ) throws IOException {
+         return ServerLevel.this.m_7726_().f_8325_.m_140424_().m_63706_(new ChunkPos(chunkX, chunkZ));
+      }
+   };
+   public final io.papermc.paper.chunk.system.io.RegionFileIOThread.ChunkDataController entityDataControllerNew
+           = new io.papermc.paper.chunk.system.io.RegionFileIOThread.ChunkDataController(io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.ENTITY_DATA) {
+
+      @Override
+      public net.minecraft.world.level.chunk.storage.RegionFileStorage getCache() {
+         return ServerLevel.this.entityStorage;
+      }
+
+      @Override
+      public void writeData(int chunkX, int chunkZ, net.minecraft.nbt.CompoundTag compound) throws IOException {
+         ServerLevel.this.writeEntityChunk(chunkX, chunkZ, compound);
+      }
+
+      @Override
+      public net.minecraft.nbt.CompoundTag readData(int chunkX, int chunkZ) throws IOException {
+         return ServerLevel.this.readEntityChunk(chunkX, chunkZ);
+      }
+   };
+   private final EntityRegionFileStorage entityStorage;
+
+   private static final class EntityRegionFileStorage extends net.minecraft.world.level.chunk.storage.RegionFileStorage {
+
+      public EntityRegionFileStorage(dev.kaiijumc.kaiiju.region.RegionFileFormat format, int linearCompression, boolean linearCrashOnBrokenSymlink, Path directory, boolean dsync) { // Kaiiju
+         super(format, linearCompression, linearCrashOnBrokenSymlink, directory, dsync); // Kaiiju
+      }
+
+      protected void m_63708_(ChunkPos pos, net.minecraft.nbt.CompoundTag nbt) throws IOException {
+         ChunkPos nbtPos = nbt == null ? null : EntityStorage.m_156570_(nbt);
+         if (nbtPos != null && !pos.equals(nbtPos)) {
+            throw new IllegalArgumentException(
+                    "Entity chunk coordinate and serialized data do not have matching coordinates, trying to serialize coordinate " + pos.toString()
+                            + " but compound says coordinate is " + nbtPos + " for world: " + this
+            );
+         }
+         super.m_63708_(pos, nbt);
+      }
+   }
+
+   private void writeEntityChunk(int chunkX, int chunkZ, net.minecraft.nbt.CompoundTag compound) throws IOException {
+      if (!io.papermc.paper.chunk.system.io.RegionFileIOThread.isRegionFileThread()) {
+         io.papermc.paper.chunk.system.io.RegionFileIOThread.scheduleSave(
+                 this, chunkX, chunkZ, compound,
+                 io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.ENTITY_DATA);
+         return;
+      }
+      this.entityStorage.m_63708_(new ChunkPos(chunkX, chunkZ), compound);
+   }
+
+   private net.minecraft.nbt.CompoundTag readEntityChunk(int chunkX, int chunkZ) throws IOException {
+      if (!io.papermc.paper.chunk.system.io.RegionFileIOThread.isRegionFileThread()) {
+         return io.papermc.paper.chunk.system.io.RegionFileIOThread.loadData(
+                 this, chunkX, chunkZ, io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.ENTITY_DATA,
+                 io.papermc.paper.chunk.system.io.RegionFileIOThread.getIOBlockingPriorityForCurrentThread()
+         );
+      }
+      return this.entityStorage.m_63706_(new ChunkPos(chunkX, chunkZ));
+   }
+
+   private final io.papermc.paper.chunk.system.entity.EntityLookup entityLookup;
+   public final io.papermc.paper.chunk.system.entity.EntityLookup getEntityLookup() {
+      return this.entityLookup;
+   }
+   // Paper end - rewrite chunk system
+   private final java.util.concurrent.atomic.AtomicLong nonFullSyncLoadIdGenerator = new java.util.concurrent.atomic.AtomicLong();
+
+   private ChunkAccess getIfAboveStatus(int chunkX, int chunkZ, net.minecraft.world.level.chunk.ChunkStatus status) {
+      io.papermc.paper.chunk.system.scheduling.NewChunkHolder loaded =
+              this.chunkTaskScheduler.chunkHolderManager.getChunkHolder(chunkX, chunkZ);
+      io.papermc.paper.chunk.system.scheduling.NewChunkHolder.ChunkCompletion loadedCompletion;
+      if (loaded != null && (loadedCompletion = loaded.getLastChunkCompletion()) != null && loadedCompletion.genStatus().m_62427_(status)) {
+         return loadedCompletion.chunk();
+      }
+
+      return null;
+   }
+
+   @Override
+   public ChunkAccess syncLoadNonFull(int chunkX, int chunkZ, net.minecraft.world.level.chunk.ChunkStatus status) {
+      if (status == null || status.m_62427_(net.minecraft.world.level.chunk.ChunkStatus.f_62326_)) {
+         throw new IllegalArgumentException("Status: " + status.toString());
+      }
+      ChunkAccess loaded = this.getIfAboveStatus(chunkX, chunkZ, status);
+      if (loaded != null) {
+         return loaded;
+      }
+
+      Long ticketId = Long.valueOf(this.nonFullSyncLoadIdGenerator.getAndIncrement());
+      int ticketLevel = 33 + net.minecraft.world.level.chunk.ChunkStatus.m_62370_(status);
+      this.chunkTaskScheduler.chunkHolderManager.addTicketAtLevel(
+              TicketType.NON_FULL_SYNC_LOAD, chunkX, chunkZ, ticketLevel, ticketId
+      );
+      this.chunkTaskScheduler.chunkHolderManager.processTicketUpdates();
+
+      this.chunkTaskScheduler.beginChunkLoadForNonFullSync(chunkX, chunkZ, status, ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.BLOCKING);
+
+      // we could do a simple spinwait here, since we do not need to process tasks while performing this load
+      // but we process tasks only because it's a better use of the time spent
+      this.f_8547_.f_8332_.m_18701_(() -> {
+         return ServerLevel.this.getIfAboveStatus(chunkX, chunkZ, status) != null;
+      });
+
+      loaded = ServerLevel.this.getIfAboveStatus(chunkX, chunkZ, status);
+      if (loaded == null) {
+         throw new IllegalStateException("Expected chunk to be loaded for status " + status);
+      }
+
+      this.chunkTaskScheduler.chunkHolderManager.removeTicketAtLevel(
+              TicketType.NON_FULL_SYNC_LOAD, chunkX, chunkZ, ticketLevel, ticketId
+      );
+
+      return loaded;
+   }
+   // Paper end - rewrite chunk system
+
+   public final io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader playerChunkLoader = new io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader(this);
+   private final java.util.concurrent.atomic.AtomicReference<io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances> viewDistances = new java.util.concurrent.atomic.AtomicReference<>(new io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances(-1, -1, -1));
+
+   public io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances getViewDistances() {
+      return this.viewDistances.get();
+   }
+
+   private void updateViewDistance(final java.util.function.Function<io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances, io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances> update) {
+      for (io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances curr = this.viewDistances.get();;) {
+         if (this.viewDistances.compareAndSet(curr, update.apply(curr))) {
+            return;
+         }
+      }
+   }
+
+   public void setTickViewDistance(final int distance) {
+      if ((distance < io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MIN_VIEW_DISTANCE || distance > io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MAX_VIEW_DISTANCE)) {
+         throw new IllegalArgumentException("Tick view distance must be a number between " + io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MIN_VIEW_DISTANCE + " and " + (io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MAX_VIEW_DISTANCE) + ", got: " + distance);
+      }
+      this.updateViewDistance((input) -> {
+         return input.setTickViewDistance(distance);
+      });
+   }
+
+   public void setLoadViewDistance(final int distance) {
+      if (distance != -1 && (distance < io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MIN_VIEW_DISTANCE || distance > io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MAX_VIEW_DISTANCE + 1)) {
+         throw new IllegalArgumentException("Load view distance must be a number between " + io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MIN_VIEW_DISTANCE + " and " + (io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MAX_VIEW_DISTANCE + 1) + " or -1, got: " + distance);
+      }
+      this.updateViewDistance((input) -> {
+         return input.setLoadViewDistance(distance);
+      });
+   }
+
+   public void setSendViewDistance(final int distance) {
+      if (distance != -1 && (distance < io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MIN_VIEW_DISTANCE || distance > io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MAX_VIEW_DISTANCE + 1)) {
+         throw new IllegalArgumentException("Send view distance must be a number between " + io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MIN_VIEW_DISTANCE + " and " + (io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MAX_VIEW_DISTANCE + 1) + " or -1, got: " + distance);
+      }
+      this.updateViewDistance((input) -> {
+         return input.setSendViewDistance(distance);
+      });
+   }
+
+   // Paper start - optimise checkDespawn
+   public final List<ServerPlayer> playersAffectingSpawning = new java.util.ArrayList<>();
+   // Paper end - optimise checkDespawn
+   // Paper start - optimise nearby player retrieval
+   @Override
+   public java.util.List<net.minecraft.world.entity.player.Player> m_45955_(net.minecraft.world.entity.ai.targeting.TargetingConditions targetPredicate,
+                                                                                    net.minecraft.world.entity.LivingEntity entity,
+                                                                                    net.minecraft.world.phys.AABB box) {
+      return this.m_45971_(Player.class, targetPredicate, entity, box);
+   }
+
+   @Override
+   public Player m_5788_(double x, double y, double z, double maxDistance, @Nullable Predicate<Entity> targetPredicate) {
+      if (maxDistance > 0.0D) {
+         io.papermc.paper.util.player.NearbyPlayers players = this.f_8547_.f_8325_.getNearbyPlayers();
+
+         com.destroystokyo.paper.util.maplist.ReferenceList<ServerPlayer> nearby = players.getPlayersByBlock(
+                 io.papermc.paper.util.CoordinateUtils.getBlockCoordinate(x),
+                 io.papermc.paper.util.CoordinateUtils.getBlockCoordinate(z),
+                 io.papermc.paper.util.player.NearbyPlayers.NearbyMapType.GENERAL
+         );
+
+         if (nearby == null) {
+            return null;
+         }
+
+         ServerPlayer nearest = null;
+         double nearestDist = maxDistance * maxDistance;
+         Object[] rawData = nearby.getRawData();
+         for (int i = 0, len = nearby.size(); i < len; ++i) {
+            ServerPlayer player = (ServerPlayer)rawData[i];
+            double dist = player.m_20275_(x, y, z);
+            if (dist >= nearestDist) {
+               continue;
+            }
+
+            if (targetPredicate == null || targetPredicate.test(player)) {
+               nearest = player;
+               nearestDist = dist;
+            }
+         }
+
+         return nearest;
+      } else {
+         ServerPlayer nearest = null;
+         double nearestDist = Double.MAX_VALUE;
+
+         for (ServerPlayer player : this.m_6907_()) {
+            double dist = player.m_20275_(x, y, z);
+            if (dist >= nearestDist) {
+               continue;
+            }
+
+            if (targetPredicate == null || targetPredicate.test(player)) {
+               nearest = player;
+               nearestDist = dist;
+            }
+         }
+
+         return nearest;
+      }
+   }
+
+   @Override
+   public Player m_45946_(net.minecraft.world.entity.ai.targeting.TargetingConditions targetPredicate, LivingEntity entity) {
+      return this.m_45949_(targetPredicate, entity, entity.m_20185_(), entity.m_20186_(), entity.m_20189_());
+   }
+
+   @Override
+   public Player m_45949_(net.minecraft.world.entity.ai.targeting.TargetingConditions targetPredicate, LivingEntity entity,
+                                  double x, double y, double z) {
+      double range = targetPredicate.f_26873_;
+      if (range > 0.0D) {
+         io.papermc.paper.util.player.NearbyPlayers players = this.f_8547_.f_8325_.getNearbyPlayers();
+
+         com.destroystokyo.paper.util.maplist.ReferenceList<ServerPlayer> nearby = players.getPlayersByBlock(
+                 io.papermc.paper.util.CoordinateUtils.getBlockCoordinate(x),
+                 io.papermc.paper.util.CoordinateUtils.getBlockCoordinate(z),
+                 io.papermc.paper.util.player.NearbyPlayers.NearbyMapType.GENERAL
+         );
+
+         if (nearby == null) {
+            return null;
+         }
+
+         ServerPlayer nearest = null;
+         double nearestDist = Double.MAX_VALUE;
+         Object[] rawData = nearby.getRawData();
+         for (int i = 0, len = nearby.size(); i < len; ++i) {
+            ServerPlayer player = (ServerPlayer)rawData[i];
+            double dist = player.m_20275_(x, y, z);
+            if (dist >= nearestDist) {
+               continue;
+            }
+
+            if (targetPredicate.m_26885_(entity, player)) {
+               nearest = player;
+               nearestDist = dist;
+            }
+         }
+
+         return nearest;
+      } else {
+         return this.m_45982_(this.m_6907_(), targetPredicate, entity, x, y, z);
+      }
+   }
+
+   @Nullable
+   public Player m_45941_(net.minecraft.world.entity.ai.targeting.TargetingConditions targetPredicate, double x, double y, double z) {
+      return this.m_45949_(targetPredicate, null, x, y, z);
+   }
+   // Paper end - optimise nearby player retrieval
+
+   public final boolean areChunksLoadedForMove(AABB axisalignedbb) {
+      // copied code from collision methods, so that we can guarantee that they wont load chunks (we don't override
+      // ICollisionAccess methods for VoxelShapes)
+      // be more strict too, add a block (dumb plugins in move events?)
+      int minBlockX = Mth.m_14107_(axisalignedbb.f_82288_ - 1.0E-7D) - 3;
+      int maxBlockX = Mth.m_14107_(axisalignedbb.f_82291_ + 1.0E-7D) + 3;
+
+      int minBlockZ = Mth.m_14107_(axisalignedbb.f_82290_ - 1.0E-7D) - 3;
+      int maxBlockZ = Mth.m_14107_(axisalignedbb.f_82293_ + 1.0E-7D) + 3;
+
+      int minChunkX = minBlockX >> 4;
+      int maxChunkX = maxBlockX >> 4;
+
+      int minChunkZ = minBlockZ >> 4;
+      int maxChunkZ = maxBlockZ >> 4;
+
+      ServerChunkCache chunkProvider = this.m_7726_();
+
+      for (int cx = minChunkX; cx <= maxChunkX; ++cx) {
+         for (int cz = minChunkZ; cz <= maxChunkZ; ++cz) {
+            if (chunkProvider.getChunkAtIfLoadedImmediately(cx, cz) == null) {
+               return false;
+            }
+         }
+      }
+
+      return true;
+   }
+
+   // Paper start
+   @Override
+   public boolean m_7232_(int chunkX, int chunkZ) {
+      return this.m_7726_().getChunkAtIfLoadedImmediately(chunkX, chunkZ) != null;
+   }
+   // Paper end
 
    public ServerLevel(MinecraftServer p_214999_, Executor p_215000_, LevelStorageSource.LevelStorageAccess p_215001_, ServerLevelData p_215002_, ResourceKey<Level> p_215003_, LevelStem p_215004_, ChunkProgressListener p_215005_, boolean p_215006_, long p_215007_, List<CustomSpawner> p_215008_, boolean p_215009_) {
       super(p_215002_, p_215003_, p_215004_.m_204521_(), p_214999_::m_129905_, false, p_215006_, p_215007_, p_214999_.m_213994_());
@@ -198,9 +_,12 @@
       ChunkGenerator chunkgenerator = p_215004_.m_63990_();
       boolean flag = p_214999_.m_6365_();
       DataFixer datafixer = p_214999_.m_129933_();
-      EntityPersistentStorage<Entity> entitypersistentstorage = new EntityStorage(this, p_215001_.m_197394_(p_215003_).resolve("entities"), datafixer, flag, p_214999_);
-      this.f_143244_ = new PersistentEntitySectionManager<>(Entity.class, new ServerLevel.EntityCallbacks(), entitypersistentstorage);
-      this.f_8547_ = new ServerChunkCache(this, p_215001_, datafixer, p_214999_.m_236738_(), p_215000_, chunkgenerator, p_214999_.m_6846_().m_11312_(), p_214999_.m_6846_().m_184213_(), flag, p_215005_, this.f_143244_::m_157524_, () -> {
+      boolean flag2 = p_214999_.m_6365_();
+      this.entityStorage = new EntityRegionFileStorage(GoldenForgeConfig.Server.regionFormat, GoldenForgeConfig.Server.regionFormatLinearCompressionLevel.get(), GoldenForgeConfig.Server.linearCrashOnBrokenSymlink.get(), p_215001_.m_197394_(p_215003_).resolve("entities"), flag2); // Paper - rewrite chunk system  //EntityPersistentStorage<Entity> entitypersistentstorage = new EntityStorage(this, convertable_conversionsession.getDimensionPath(resourcekey).resolve("entities"), datafixer, flag2, minecraftserver);
+      f_143244_ = new PersistentEntitySectionManager<>(this);
+      //EntityPersistentStorage<Entity> entitypersistentstorage = new EntityStorage(this, p_215001_.getDimensionPath(p_215003_).resolve("entities"), datafixer, flag, p_214999_);
+      //this.entityManager = new PersistentEntitySectionManager<>(Entity.class, new ServerLevel.EntityCallbacks(), entitypersistentstorage, this.entitySliceManager);
+      this.f_8547_ = new ServerChunkCache(this, p_215001_, datafixer, p_214999_.m_236738_(), p_215000_, chunkgenerator, p_214999_.m_6846_().m_11312_(), p_214999_.m_6846_().m_184213_(), flag, p_215005_, null, () -> {
          return p_214999_.m_129783_().m_8895_();
       });
       chunkgenerator.m_223100_(this.f_8547_.m_214994_());
@@ -227,6 +_,9 @@
       }
 
       this.f_143245_ = new SleepStatus();
+      this.initCapabilities();
+      this.chunkTaskScheduler = new io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler(this, io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.workerThreads); // Paper - rewrite chunk system
+      this.entityLookup = new io.papermc.paper.chunk.system.entity.EntityLookup(this, new EntityCallbacks()); // Paper - rewrite chunk system
    }
 
    public void m_8606_(int p_8607_, int p_8608_, boolean p_8609_, boolean p_8610_) {
@@ -246,6 +_,14 @@
    }
 
    public void m_8793_(BooleanSupplier p_8794_) {
+      // Paper start - optimise checkDespawn
+      this.playersAffectingSpawning.clear();
+      for (ServerPlayer player : this.f_8546_) {
+         if (net.minecraft.world.entity.EntitySelector.PLAYER_AFFECTS_SPAWNING.test(player)) {
+            this.playersAffectingSpawning.add(player);
+         }
+      }
+      // Paper end - optimise checkDespawn
       ProfilerFiller profilerfiller = this.m_46473_();
       this.f_8557_ = true;
       profilerfiller.m_6180_("world border");
@@ -255,8 +_,8 @@
       int i = this.m_46469_().m_46215_(GameRules.f_151486_);
       if (this.f_143245_.m_144002_(i) && this.f_143245_.m_144004_(i, this.f_8546_)) {
          if (this.m_46469_().m_46207_(GameRules.f_46140_)) {
-            long j = this.f_46442_.m_6792_() + 24000L;
-            this.m_8615_(j - j % 24000L);
+            long j = this.m_46468_() + 24000L;
+            this.m_8615_(net.minecraftforge.event.ForgeEventFactory.onSleepFinished(this, j - j % 24000L, this.m_46468_()));
          }
 
          this.m_8804_();
@@ -285,7 +_,7 @@
       this.m_8807_();
       this.f_8557_ = false;
       profilerfiller.m_7238_();
-      boolean flag = !this.f_8546_.isEmpty() || !this.m_8902_().isEmpty();
+      boolean flag = !this.f_8546_.isEmpty() || !this.f_8546_.isEmpty() || net.minecraftforge.common.world.ForgeChunkManager.hasForcedChunks(this); //Forge: Replace vanilla's has forced chunk check with forge's that checks both the vanilla and forge added ones  // CraftBukkit - this prevents entity cleanup, other issues on servers with no players
       if (flag) {
          this.m_8886_();
       }
@@ -298,6 +_,7 @@
             profilerfiller.m_7238_();
          }
 
+         org.spigotmc.ActivationRange.activateEntities(this); // Spigot
          this.f_143243_.m_156910_((p_184065_) -> {
             if (!p_184065_.m_213877_()) {
                if (this.m_143342_(p_184065_)) {
@@ -306,7 +_,7 @@
                   profilerfiller.m_6180_("checkDespawn");
                   p_184065_.m_6043_();
                   profilerfiller.m_7238_();
-                  if (this.f_8547_.f_8325_.m_143145_().m_183913_(p_184065_.m_146902_().m_45588_())) {
+                  if (true && this.f_8547_.f_8325_.m_143145_().m_183913_(p_184065_.m_146902_().m_45588_())) { // Paper - now always true if in the ticking list
                      Entity entity = p_184065_.m_20202_();
                      if (entity != null) {
                         if (!entity.m_213877_() && entity.m_20363_(p_184065_)) {
@@ -317,7 +_,9 @@
                      }
 
                      profilerfiller.m_6180_("tick");
-                     this.m_46653_(this::m_8647_, p_184065_);
+                     if (!p_184065_.m_213877_() && !(p_184065_ instanceof net.minecraftforge.entity.PartEntity)) {
+                        this.m_46653_(this::m_8647_, p_184065_);
+                     }
                      profilerfiller.m_7238_();
                   }
                }
@@ -328,14 +_,17 @@
       }
 
       profilerfiller.m_6180_("entityManagement");
-      this.f_143244_.m_157506_();
+      //this.entityManager.tick();
       profilerfiller.m_6182_("gameEvents");
       this.m_215075_();
       profilerfiller.m_7238_();
    }
 
    public boolean m_183438_(long p_184059_) {
-      return this.f_8547_.f_8325_.m_143145_().m_183916_(p_184059_);
+      // Paper start - replace player chunk loader system
+      ChunkHolder holder = this.f_8547_.f_8325_.m_140327_(p_184059_);
+      return holder != null && holder.isTickingReady();
+      // Paper end - replace player chunk loader system
    }
 
    protected void m_8809_() {
@@ -408,9 +_,10 @@
          BlockPos blockpos2 = this.m_5452_(Heightmap.Types.MOTION_BLOCKING, this.m_46496_(i, 0, j, 15));
          BlockPos blockpos3 = blockpos2.m_7495_();
          Biome biome = this.m_204166_(blockpos2).m_203334_();
-         if (biome.m_47477_(this, blockpos3)) {
-            this.m_46597_(blockpos3, Blocks.f_50126_.m_49966_());
-         }
+         if (this.isAreaLoaded(blockpos2, 1)) // Forge: check area to avoid loading neighbors in unloaded chunks
+            if (biome.m_47477_(this, blockpos3)) {
+               this.m_46597_(blockpos3, Blocks.f_50126_.m_49966_());
+            }
 
          if (flag) {
             if (biome.m_47519_(this, blockpos2)) {
@@ -598,15 +_,19 @@
          this.f_8548_.m_6846_().m_11270_(new ClientboundGameEventPacket(ClientboundGameEventPacket.f_132161_, this.f_46440_), this.m_46472_());
       }
 
+      /* The function in use here has been replaced in order to only send the weather info to players in the correct dimension,
+       * rather than to all players on the server. This is what causes the client-side rain, as the
+       * client believes that it has started raining locally, rather than in another dimension.
+       */
       if (flag != this.m_46471_()) {
          if (flag) {
-            this.f_8548_.m_6846_().m_11268_(new ClientboundGameEventPacket(ClientboundGameEventPacket.f_132155_, 0.0F));
+            this.f_8548_.m_6846_().m_11270_(new ClientboundGameEventPacket(ClientboundGameEventPacket.f_132155_, 0.0F), this.m_46472_());
          } else {
-            this.f_8548_.m_6846_().m_11268_(new ClientboundGameEventPacket(ClientboundGameEventPacket.f_132154_, 0.0F));
+            this.f_8548_.m_6846_().m_11270_(new ClientboundGameEventPacket(ClientboundGameEventPacket.f_132154_, 0.0F), this.m_46472_());
          }
 
-         this.f_8548_.m_6846_().m_11268_(new ClientboundGameEventPacket(ClientboundGameEventPacket.f_132160_, this.f_46438_));
-         this.f_8548_.m_6846_().m_11268_(new ClientboundGameEventPacket(ClientboundGameEventPacket.f_132161_, this.f_46440_));
+         this.f_8548_.m_6846_().m_11270_(new ClientboundGameEventPacket(ClientboundGameEventPacket.f_132160_, this.f_46438_), this.m_46472_());
+         this.f_8548_.m_6846_().m_11270_(new ClientboundGameEventPacket(ClientboundGameEventPacket.f_132161_, this.f_46440_), this.m_46472_());
       }
 
    }
@@ -627,7 +_,7 @@
       if (fluidstate.m_192917_(p_184078_)) {
          fluidstate.m_76163_(this, p_184077_);
       }
-
+      MinecraftServer.getServer().executeMidTickTasks(); // Paper - exec chunk tasks during world tick
    }
 
    private void m_184112_(BlockPos p_184113_, Block p_184114_) {
@@ -635,10 +_,30 @@
       if (blockstate.m_60713_(p_184114_)) {
          blockstate.m_222963_(this, p_184113_, this.f_46441_);
       }
-
-   }
+      MinecraftServer.getServer().executeMidTickTasks(); // Paper - exec chunk tasks during world tick
+   }
+
+   // Paper start - log detailed entity tick information
+   // TODO replace with varhandle
+   static final java.util.concurrent.atomic.AtomicReference<Entity> currentlyTickingEntity = new java.util.concurrent.atomic.AtomicReference<>();
+
+   public static List<Entity> getCurrentlyTickingEntities() {
+      Entity ticking = currentlyTickingEntity.get();
+      List<Entity> ret = java.util.Arrays.asList(ticking == null ? new Entity[0] : new Entity[] { ticking });
+
+      return ret;
+   }
+   // Paper end - log detailed entity tick information
 
    public void m_8647_(Entity p_8648_) {
+      // Paper start - log detailed entity tick information
+      io.papermc.paper.util.TickThread.ensureTickThread("Cannot tick an entity off-main");
+      try {
+         if (currentlyTickingEntity.get() == null) {
+            currentlyTickingEntity.lazySet(p_8648_);
+         }
+         // Paper end - log detailed entity tick information
+      final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(p_8648_);
       p_8648_.m_146867_();
       ProfilerFiller profilerfiller = this.m_46473_();
       ++p_8648_.f_19797_;
@@ -646,18 +_,31 @@
          return Registry.f_122826_.m_7981_(p_8648_.m_6095_()).toString();
       });
       profilerfiller.m_6174_("tickNonPassenger");
-      p_8648_.m_8119_();
+      if (isActive) {
+         p_8648_.m_8119_();
+      } else {
+         p_8648_.inactiveTick();
+      }
       this.m_46473_().m_7238_();
 
       for(Entity entity : p_8648_.m_20197_()) {
          this.m_8662_(p_8648_, entity);
       }
-
+         // Paper start - log detailed entity tick information
+      } finally {
+         if (currentlyTickingEntity.get() == p_8648_) {
+            currentlyTickingEntity.lazySet(null);
+         }
+      }
+      // Paper end - log detailed entity tick information
    }
 
    private void m_8662_(Entity p_8663_, Entity p_8664_) {
       if (!p_8664_.m_213877_() && p_8664_.m_20202_() == p_8663_) {
          if (p_8664_ instanceof Player || this.f_143243_.m_156914_(p_8664_)) {
+            // Paper - EAR 2
+            final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(p_8664_);
+            // Paper end
             p_8664_.m_146867_();
             ++p_8664_.f_19797_;
             ProfilerFiller profilerfiller = this.m_46473_();
@@ -665,7 +_,15 @@
                return Registry.f_122826_.m_7981_(p_8664_.m_6095_()).toString();
             });
             profilerfiller.m_6174_("tickPassenger");
-            p_8664_.m_6083_();
+            if (isActive) {
+               if (p_8664_.canUpdate())
+                  p_8664_.m_6083_();
+            } else {
+               p_8664_.m_20256_(Vec3.f_82478_);
+               p_8664_.inactiveTick();
+               // copied from inside of if (isPassenger()) of passengerTick, but that ifPassenger is unnecessary
+               p_8663_.m_7332_(p_8664_);
+            }
             profilerfiller.m_7238_();
 
             for(Entity entity : p_8664_.m_20197_()) {
@@ -682,26 +_,66 @@
       return !this.f_8548_.m_7762_(this, p_8697_, p_8696_) && this.m_6857_().m_61937_(p_8697_);
    }
 
+   // Paper start - derived from below
+   public void saveIncrementally(boolean doFull) {
+      ServerChunkCache chunkproviderserver = this.m_7726_();
+
+
+         if (doFull) {
+            this.m_8806_();
+         }
+
+         if (!this.m_7441_()) chunkproviderserver.saveIncrementally();
+
+         // Copied from save()
+         // CraftBukkit start - moved from MinecraftServer.saveChunks
+         if (doFull) { // Paper
+            ServerLevel worldserver1 = this;
+
+            this.f_8549_.m_7831_(worldserver1.m_6857_().m_61970_());
+            this.f_8548_.f_129749_.m_5917_(this.f_8548_.m_129901_().m_136307_());
+            this.f_8548_.f_129744_.m_78290_(this.m_5962_(), this.f_8548_.f_129749_, this.f_8548_.m_6846_().m_6960_());
+         }
+         // CraftBukkit end
+
+   }
+   // Paper end
+
    public void m_8643_(@Nullable ProgressListener p_8644_, boolean p_8645_, boolean p_8646_) {
-      ServerChunkCache serverchunkcache = this.m_7726_();
-      if (!p_8646_) {
-         if (p_8644_ != null) {
-            p_8644_.m_6309_(Component.m_237115_("menu.savingLevel"));
-         }
-
-         this.m_8806_();
-         if (p_8644_ != null) {
-            p_8644_.m_6307_(Component.m_237115_("menu.savingChunks"));
-         }
-
-         serverchunkcache.m_8419_(p_8645_);
-         if (p_8645_) {
-            this.f_143244_.m_157561_();
-         } else {
-            this.f_143244_.m_157554_();
-         }
-
-      }
+      // Paper start - rewrite chunk system - add close param
+      this.save(p_8644_, p_8645_, p_8646_, false);
+   }
+   public void save(@Nullable ProgressListener progressListener, boolean flush, boolean savingDisabled, boolean close) {
+      // Paper end - rewrite chunk system - add close param
+      ServerChunkCache chunkproviderserver = this.m_7726_();
+
+      if (!savingDisabled) {
+            if (progressListener != null) {
+               progressListener.m_6309_(Component.m_237115_("menu.savingLevel"));
+            }
+
+            this.m_8806_();
+            if (progressListener != null) {
+               progressListener.m_6307_(Component.m_237115_("menu.savingChunks"));
+            }
+
+            if (!close) chunkproviderserver.m_8419_(flush); // Paper - rewrite chunk system
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.LevelEvent.Save(this));
+         if (close) {
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.LevelEvent.Unload(this));
+            chunkproviderserver.close(true); // Paper - rewrite chunk system
+         }
+         // Paper - rewrite chunk system - entity saving moved into ChunkHolder
+
+      } else if (close) { chunkproviderserver.close(false); } // Paper - rewrite chunk system
+
+      // CraftBukkit start - moved from MinecraftServer.saveChunks
+      ServerLevel worldserver1 = this;
+
+      this.f_8549_.m_7831_(worldserver1.m_6857_().m_61970_());
+      this.f_8548_.f_129749_.m_5917_(this.f_8548_.m_129901_().m_136307_());
+      this.f_8548_.f_129744_.m_78290_(this.f_8548_.m_206579_(), this.f_8548_.f_129749_, this.f_8548_.m_6846_().m_6960_());
+      // CraftBukkit end
    }
 
    private void m_8806_() {
@@ -774,6 +_,7 @@
    }
 
    private void m_8853_(ServerPlayer p_8854_) {
+      if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinLevelEvent(p_8854_, this))) return;
       Entity entity = this.m_142646_().m_142694_(p_8854_.m_20148_());
       if (entity != null) {
          f_8566_.warn("Force-added player with duplicate UUID {}", (Object)p_8854_.m_20148_().toString());
@@ -781,20 +_,54 @@
          this.m_143261_((ServerPlayer)entity, Entity.RemovalReason.DISCARDED);
       }
 
-      this.f_143244_.m_157533_(p_8854_);
+      this.entityLookup.addNewEntity(p_8854_); // Paper - rewite chunk system
+      p_8854_.onAddedToWorld();
    }
 
-   private boolean m_8872_(Entity p_8873_) {
-      if (p_8873_.m_213877_()) {
-         f_8566_.warn("Tried to add entity {} but it was marked as removed already", (Object)EntityType.m_20613_(p_8873_.m_6095_()));
-         return false;
-      } else {
-         return this.f_143244_.m_157533_(p_8873_);
-      }
+//   private boolean addEntity(Entity p_8873_) {
+//      if (p_8873_.isRemoved()) {
+//         LOGGER.warn("Tried to add entity {} but it was marked as removed already", (Object)EntityType.getKey(p_8873_.getType()));
+//         return false;
+//      } else {
+//         if (this.entityLookup.addNewEntity(p_8873_)) {
+//            p_8873_.onAddedToWorld();
+//            return true;
+//         } else {
+//            return false;
+//         }
+//      }
+//   }
+
+
+      private boolean m_8872_(Entity p_8873_) {
+         org.spigotmc.AsyncCatcher.catchOp("entity add"); // Spigot
+         // Paper start
+         if (p_8873_.isValid) {
+
+            if (DEBUG_ENTITIES) {
+               MinecraftServer.f_129750_.warn("Attempted Double World add on {}, this isn't a goldenforge issue!",  p_8873_, new Throwable());
+            }
+            return true;
+         }
+         // Paper end
+         if (p_8873_.m_213877_()) {
+//            // Paper start
+//            if (DEBUG_ENTITIES) {
+//               io.papermc.paper.util.TraceUtil.dumpTraceForThread("Tried to add entity " + entity + " but it was marked as removed already"); // CraftBukkit
+//               getAddToWorldStackTrace(entity).printStackTrace();
+//            }
+//            // Paper end
+            // WorldServer.LOGGER.warn("Tried to add entity {} but it was marked as removed already", EntityTypes.getKey(entity.getType())); // CraftBukkit
+            return false;
+         } else {
+            if (p_8873_ instanceof net.minecraft.world.entity.item.ItemEntity itemEntity && itemEntity.m_32055_().m_41619_()) return false; // Paper - Prevent empty items from being added
+
+            return this.entityLookup.addNewEntity(p_8873_); // Paper - rewrite chunk system
+         }
    }
 
    public boolean m_8860_(Entity p_8861_) {
-      if (p_8861_.m_20199_().map(Entity::m_20148_).anyMatch(this.f_143244_::m_157550_)) {
+      if (p_8861_.m_20199_().map(Entity::m_20148_).anyMatch(this.entityLookup::hasEntity)) { // Paper - rewrite chunk system
          return false;
       } else {
          this.m_47205_(p_8861_);
@@ -826,10 +_,22 @@
    }
 
    public void m_214150_(@Nullable Player p_215017_, double p_215018_, double p_215019_, double p_215020_, SoundEvent p_215021_, SoundSource p_215022_, float p_215023_, float p_215024_, long p_215025_) {
+      net.minecraftforge.event.PlayLevelSoundEvent.AtPosition event = net.minecraftforge.event.ForgeEventFactory.onPlaySoundAtPosition(this, p_215018_, p_215019_, p_215020_, p_215021_, p_215022_, p_215023_, p_215024_);
+      if (event.isCanceled() || event.getSound() == null) return;
+      p_215021_ = event.getSound();
+      p_215022_ = event.getSource();
+      p_215023_ = event.getNewVolume();
+      p_215024_ = event.getNewPitch();
       this.f_8548_.m_6846_().m_11241_(p_215017_, p_215018_, p_215019_, p_215020_, (double)p_215021_.m_215668_(p_215023_), this.m_46472_(), new ClientboundSoundPacket(p_215021_, p_215022_, p_215018_, p_215019_, p_215020_, p_215023_, p_215024_, p_215025_));
    }
 
    public void m_213890_(@Nullable Player p_215027_, Entity p_215028_, SoundEvent p_215029_, SoundSource p_215030_, float p_215031_, float p_215032_, long p_215033_) {
+      net.minecraftforge.event.PlayLevelSoundEvent.AtEntity event = net.minecraftforge.event.ForgeEventFactory.onPlaySoundAtEntity(p_215028_, p_215029_, p_215030_, p_215031_, p_215032_);
+      if (event.isCanceled() || event.getSound() == null) return;
+      p_215029_ = event.getSound();
+      p_215030_ = event.getSource();
+      p_215031_ = event.getNewVolume();
+      p_215032_ = event.getNewPitch();
       this.f_8548_.m_6846_().m_11241_(p_215027_, p_215028_.m_20185_(), p_215028_.m_20186_(), p_215028_.m_20189_(), (double)p_215029_.m_215668_(p_215031_), this.m_46472_(), new ClientboundSoundEntityPacket(p_215029_, p_215030_, p_215028_, p_215031_, p_215032_, p_215033_));
    }
 
@@ -846,6 +_,7 @@
    }
 
    public void m_214171_(GameEvent p_215041_, Vec3 p_215042_, GameEvent.Context p_215043_) {
+      if (!net.minecraftforge.common.ForgeHooks.onVanillaGameEvent(this, p_215041_, p_215042_, p_215043_)) return;
       int i = p_215041_.m_157827_();
       BlockPos blockpos = new BlockPos(p_215042_);
       int j = SectionPos.m_123171_(blockpos.m_123341_() - i);
@@ -909,32 +_,74 @@
       VoxelShape voxelshape = p_8757_.m_60812_(this, p_8755_);
       if (Shapes.m_83157_(voxelshape1, voxelshape, BooleanOp.f_82687_)) {
          List<PathNavigation> list = new ObjectArrayList<>();
-
-         for(Mob mob : this.f_143246_) {
-            PathNavigation pathnavigation = mob.m_21573_();
-            if (pathnavigation.m_200903_(p_8755_)) {
-               list.add(pathnavigation);
-            }
-         }
+         // Paper start - optimise notify()
+         io.papermc.paper.chunk.SingleThreadChunkRegionManager.Region region = this.m_7726_().f_8325_.dataRegionManager.getRegion(p_8755_.m_123341_() >> 4, p_8755_.m_123343_() >> 4);
+         if (region == null) {
+            return;
+         }
+         io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<Mob> navigatorsFromRegion = ((ChunkMap.DataRegionData)region.regionData).getNavigators();
+         if (navigatorsFromRegion == null) {
+            return;
+         }
+         io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet.Iterator<Mob> iterator = navigatorsFromRegion.iterator();
+
+         try { while (iterator.hasNext()) { // Paper end - optimise notify()
+            // CraftBukkit start - fix SPIGOT-6362
+            Mob entityinsentient;
+            try {
+               entityinsentient = (Mob) iterator.next();
+            } catch (java.util.ConcurrentModificationException ex) {
+               // This can happen because the pathfinder update below may trigger a chunk load, which in turn may cause more navigators to register
+               // In this case we just run the update again across all the iterators as the chunk will then be loaded
+               // As this is a relative edge case it is much faster than copying navigators (on either read or write)
+               this.m_7260_(p_8755_, p_8756_, p_8757_, p_8758_);
+               return;
+            }
+            // CraftBukkit end
+            PathNavigation navigationabstract = entityinsentient.m_21573_();
+
+            if (navigationabstract.m_200903_(p_8755_)) {
+               list.add(navigationabstract);
+            }
+         }
+
+         //Compatibility with immersive ingenering
+            for(Mob mob : this.f_143246_) {
+
+            }
 
          try {
             this.f_200893_ = true;
+            // Paper start - optimise notify()
+            Iterator<PathNavigation> navigationIterator = list.iterator();
 
-            for(PathNavigation pathnavigation1 : list) {
-               pathnavigation1.m_26569_();
+            while (navigationIterator.hasNext()) {
+               PathNavigation navigationabstract1 = navigationIterator.next();
+               // Paper end - optimise notify()
+               navigationabstract1.m_26569_();
             }
          } finally {
             this.f_200893_ = false;
          }
 
+            // Paper start - optimise notify()
+         } finally {
+            iterator.finishedIterating();
+         }
+         // Paper end - optimise notify()
       }
    }
 
    public void m_46672_(BlockPos p_215045_, Block p_215046_) {
+      net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, p_215045_, this.m_8055_(p_215045_), java.util.EnumSet.allOf(Direction.class), false).isCanceled();
       this.f_220350_.m_214152_(p_215045_, p_215046_, (Direction)null);
    }
 
    public void m_46590_(BlockPos p_215052_, Block p_215053_, Direction p_215054_) {
+      java.util.EnumSet<Direction> directions = java.util.EnumSet.allOf(Direction.class);
+      directions.remove(p_215054_);
+      if (net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, p_215052_, this.m_8055_(p_215052_), directions, false).isCanceled())
+         return;
       this.f_220350_.m_214152_(p_215052_, p_215053_, p_215054_);
    }
 
@@ -956,6 +_,7 @@
 
    public Explosion m_7703_(@Nullable Entity p_8653_, @Nullable DamageSource p_8654_, @Nullable ExplosionDamageCalculator p_8655_, double p_8656_, double p_8657_, double p_8658_, float p_8659_, boolean p_8660_, Explosion.BlockInteraction p_8661_) {
       Explosion explosion = new Explosion(this, p_8653_, p_8654_, p_8655_, p_8656_, p_8657_, p_8658_, p_8659_, p_8660_, p_8661_);
+      if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
       explosion.m_46061_();
       explosion.m_46075_(false);
       if (p_8661_ == Explosion.BlockInteraction.NONE) {
@@ -1170,6 +_,10 @@
          });
          optional1.ifPresent((p_215057_) -> {
             this.m_7654_().execute(() -> {
+               // Paper start
+               if (optional.isEmpty() && this.m_8904_().m_27091_(blockpos, poiType -> true)) {
+                  this.m_8904_().m_27079_(blockpos);
+               }
                this.m_8904_().m_217919_(blockpos, p_215057_);
                DebugPackets.m_133679_(this, blockpos);
             });
@@ -1231,7 +_,7 @@
             }
          }
 
-         writer.write(String.format(Locale.ROOT, "entities: %s\n", this.f_143244_.m_157572_()));
+         writer.write(String.format(Locale.ROOT, "entities: %s\n", this.entityLookup.getDebugInfo()));
          writer.write(String.format(Locale.ROOT, "block_entity_tickers: %d\n", this.f_151512_.size()));
          writer.write(String.format(Locale.ROOT, "block_ticks: %d\n", this.m_183326_().m_183574_()));
          writer.write(String.format(Locale.ROOT, "fluid_ticks: %d\n", this.m_183324_().m_183574_()));
@@ -1300,7 +_,7 @@
       Writer writer5 = Files.newBufferedWriter(path1);
 
       try {
-         this.f_143244_.m_157548_(writer5);
+         //this.entityManager.dumpSections(writer5);
       } catch (Throwable throwable8) {
          if (writer5 != null) {
             try {
@@ -1427,7 +_,7 @@
 
    @VisibleForTesting
    public String m_8590_() {
-      return String.format(Locale.ROOT, "players: %s, entities: %s [%s], block_entities: %d [%s], block_ticks: %d, fluid_ticks: %d, chunk_source: %s", this.f_8546_.size(), this.f_143244_.m_157572_(), m_143301_(this.f_143244_.m_157567_().m_142273_(), (p_207585_) -> {
+      return String.format(Locale.ROOT, "players: %s, entities: %s [%s], block_entities: %d [%s], block_ticks: %d, fluid_ticks: %d, chunk_source: %s", this.f_8546_.size(), this.entityLookup.getDebugInfo(), m_143301_(this.entityLookup.m_142273_(), (p_207585_) -> {
          return Registry.f_122826_.m_7981_(p_207585_.m_6095_()).toString();
       }), this.f_151512_.size(), m_143301_(this.f_151512_, TickingBlockEntity::m_142280_), this.m_183326_().m_183574_(), this.m_183324_().m_183574_(), this.m_46464_());
    }
@@ -1462,16 +_,22 @@
       });
    }
 
+   protected void initCapabilities() {
+      this.gatherCapabilities();
+      capabilityData = this.m_8895_().m_164861_(e -> net.minecraftforge.common.util.LevelCapabilityData.load(e, getCapabilities()), () -> new net.minecraftforge.common.util.LevelCapabilityData(getCapabilities()), net.minecraftforge.common.util.LevelCapabilityData.ID);
+      capabilityData.setCapabilities(getCapabilities());
+   }
+
    public LevelEntityGetter<Entity> m_142646_() {
-      return this.f_143244_.m_157567_();
+      return this.entityLookup; // Paper - rewrite chunk system
    }
 
    public void m_143311_(Stream<Entity> p_143312_) {
-      this.f_143244_.m_157552_(p_143312_);
+      this.entityLookup.addLegacyChunkEntities(p_143312_.toList()); // Paper - rewrite chunk system
    }
 
    public void m_143327_(Stream<Entity> p_143328_) {
-      this.f_143244_.m_157559_(p_143328_);
+      this.entityLookup.addWorldGenChunkEntities(p_143328_.toList()); // Paper - rewrite chunk system
    }
 
    public void m_184102_(LevelChunk p_184103_) {
@@ -1486,31 +_,45 @@
 
    public void close() throws IOException {
       super.close();
-      this.f_143244_.close();
+      //this.entityManager.close();
    }
 
    public String m_46464_() {
-      return "Chunks[S] W: " + this.f_8547_.m_6754_() + " E: " + this.f_143244_.m_157572_();
+      return "Chunks[S] W: " + this.f_8547_.m_6754_() + " E: " + this.entityLookup.getDebugInfo();
    }
 
    public boolean m_143319_(long p_143320_) {
-      return this.f_143244_.m_157507_(p_143320_);
+      // Paper start - rewrite chunk system
+      return this.getChunkIfLoadedImmediately(ChunkPos.m_45592_(p_143320_), ChunkPos.m_45602_(p_143320_)) != null;
+      // Paper end - rewrite chunk system
    }
 
    private boolean m_184110_(long p_184111_) {
-      return this.m_143319_(p_184111_) && this.f_8547_.m_143239_(p_184111_);
+      // Paper start - optimize is ticking ready type functions
+      ChunkHolder chunkHolder = this.f_8547_.f_8325_.m_140327_(p_184111_);
+      return chunkHolder != null && chunkHolder.isTickingReady() && this.m_143319_(p_184111_); // Paper - no longer need to check with chunk source
+      // Paper end
    }
 
    public boolean m_143340_(BlockPos p_143341_) {
-      return this.f_143244_.m_202167_(p_143341_) && this.f_8547_.f_8325_.m_143145_().m_183913_(ChunkPos.m_151388_(p_143341_));
+      // Paper start - rewrite chunk system
+      io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder = this.chunkTaskScheduler.chunkHolderManager.getChunkHolder(io.papermc.paper.util.CoordinateUtils.getChunkKey(p_143341_));
+      return chunkHolder != null && chunkHolder.isEntityTickingReady();
+      // Paper end - rewrite chunk system
    }
 
    public boolean m_201918_(BlockPos p_201919_) {
-      return this.f_143244_.m_202167_(p_201919_);
+      // Paper start - rewrite chunk system
+      io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder = this.chunkTaskScheduler.chunkHolderManager.getChunkHolder(io.papermc.paper.util.CoordinateUtils.getChunkKey(p_201919_));
+      return chunkHolder != null && chunkHolder.isEntityTickingReady();
+      // Paper end - rewrite chunk system
    }
 
    public boolean m_201916_(ChunkPos p_201917_) {
-      return this.f_143244_.m_202165_(p_201917_);
+      // Paper start - rewrite chunk system
+      io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder = this.chunkTaskScheduler.chunkHolderManager.getChunkHolder(io.papermc.paper.util.CoordinateUtils.getChunkKey(p_201917_));
+      return chunkHolder != null && chunkHolder.isEntityTickingReady();
+      // Paper end - rewrite chunk system
    }
 
    final class EntityCallbacks implements LevelCallback<Entity> {
@@ -1522,6 +_,7 @@
       }
 
       public void m_141987_(Entity p_143363_) {
+         if (p_143363_ instanceof net.minecraft.world.entity.Marker) return; // Paper - Don't tick markers
          ServerLevel.this.f_143243_.m_156908_(p_143363_);
       }
 
@@ -1530,7 +_,6 @@
       }
 
       public void m_141985_(Entity p_143371_) {
-         ServerLevel.this.m_7726_().m_8463_(p_143371_);
          if (p_143371_ instanceof ServerPlayer serverplayer) {
             ServerLevel.this.f_8546_.add(serverplayer);
             ServerLevel.this.m_8878_();
@@ -1545,13 +_,15 @@
             ServerLevel.this.f_143246_.add(mob);
          }
 
-         if (p_143371_ instanceof EnderDragon enderdragon) {
-            for(EnderDragonPart enderdragonpart : enderdragon.m_31156_()) {
+         if (p_143371_.isMultipartEntity()) {
+            for(net.minecraftforge.entity.PartEntity<?> enderdragonpart : p_143371_.getParts()) {
                ServerLevel.this.f_143247_.put(enderdragonpart.m_19879_(), enderdragonpart);
             }
          }
 
          p_143371_.m_213651_(DynamicGameEventListener::m_223617_);
+         p_143371_.isValid = true; // CraftBukkit
+         ServerLevel.this.m_7726_().m_8463_(p_143371_);
       }
 
       public void m_141981_(Entity p_143375_) {
@@ -1570,17 +_,26 @@
             ServerLevel.this.f_143246_.remove(mob);
          }
 
-         if (p_143375_ instanceof EnderDragon enderdragon) {
-            for(EnderDragonPart enderdragonpart : enderdragon.m_31156_()) {
+         if (p_143375_.isMultipartEntity()) {
+            for(net.minecraftforge.entity.PartEntity<?> enderdragonpart : p_143375_.getParts()) {
                ServerLevel.this.f_143247_.remove(enderdragonpart.m_19879_());
             }
          }
 
          p_143375_.m_213651_(DynamicGameEventListener::m_223634_);
+
+         p_143375_.isValid = false;
+         p_143375_.onRemovedFromWorld();
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityLeaveLevelEvent(p_143375_, ServerLevel.this));
       }
 
       public void m_214006_(Entity p_215086_) {
          p_215086_.m_213651_(DynamicGameEventListener::m_223641_);
       }
+   }
+
+   @Override
+   public java.util.Collection<net.minecraftforge.entity.PartEntity<?>> getPartEntities() {
+      return this.f_143247_.values();
    }
 }
