--- a/net/minecraft/server/level/ThreadedLevelLightEngine.java
+++ b/net/minecraft/server/level/ThreadedLevelLightEngine.java
@@ -23,43 +_,198 @@
 import net.minecraft.world.level.lighting.LevelLightEngine;
 import org.slf4j.Logger;
 
+// Paper start
+import ca.spottedleaf.starlight.common.light.StarLightEngine;
+import io.papermc.paper.util.CoordinateUtils;
+import java.util.function.Supplier;
+import net.minecraft.world.level.lighting.LayerLightEventListener;
+import it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap;
+import it.unimi.dsi.fastutil.longs.LongArrayList;
+import it.unimi.dsi.fastutil.longs.LongIterator;
+import net.minecraft.world.level.chunk.ChunkStatus;
+// Paper end
+
 public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCloseable {
    private static final Logger f_9296_ = LogUtils.getLogger();
-   private final ProcessorMailbox<Runnable> f_9297_;
-   private final ObjectList<Pair<ThreadedLevelLightEngine.TaskType, Runnable>> f_9298_ = new ObjectArrayList<>();
+   // Paper - rewrite chunk system
    private final ChunkMap f_9299_;
-   private final ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> f_9300_;
+   // Paper - rewrite chunk system
    private volatile int f_9301_ = 5;
-   private final AtomicBoolean f_9302_ = new AtomicBoolean();
-
-   public ThreadedLevelLightEngine(LightChunkGetter p_9305_, ChunkMap p_9306_, boolean p_9307_, ProcessorMailbox<Runnable> p_9308_, ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> p_9309_) {
-      super(p_9305_, true, p_9307_);
-      this.f_9299_ = p_9306_;
-      this.f_9300_ = p_9309_;
-      this.f_9297_ = p_9308_;
-   }
-
+   // Paper - rewrite chunk system
+
+   // Paper start - replace light engine impl
+   public final ca.spottedleaf.starlight.common.light.StarLightInterface theLightEngine;
+   public final boolean hasBlockLight;
+   public final boolean hasSkyLight;
+   // Paper end - replace light engine impl
+
+   public ThreadedLevelLightEngine(LightChunkGetter chunkProvider, ChunkMap chunkStorage, boolean hasBlockLight, ProcessorMailbox<Runnable> processor) {
+      super(chunkProvider, false, false); // Paper - destroy vanilla light engine state
+      this.f_9299_ = chunkStorage;
+      // Paper - rewrite chunk system
+      // Paper start - replace light engine impl
+      this.hasBlockLight = true;
+      this.hasSkyLight = hasBlockLight; // Nice variable name.
+      this.theLightEngine = new ca.spottedleaf.starlight.common.light.StarLightInterface(chunkProvider, this.hasSkyLight, this.hasBlockLight, this);
+      // Paper end - replace light engine impl
+   }
+
+   // Paper start - replace light engine impl
+   protected final ChunkAccess getChunk(final int chunkX, final int chunkZ) {
+      return ((ServerLevel)this.theLightEngine.getWorld()).m_7726_().getChunkAtImmediately(chunkX, chunkZ);
+   }
+
+   protected long relightCounter;
+
+   public int relight(java.util.Set<ChunkPos> chunks_param,
+                      java.util.function.Consumer<ChunkPos> chunkLightCallback,
+                      java.util.function.IntConsumer onComplete) {
+      if (!org.bukkit.Bukkit.isPrimaryThread()) {
+         throw new IllegalStateException("Must only be called on the main thread");
+      }
+
+      java.util.Set<ChunkPos> chunks = new java.util.LinkedHashSet<>(chunks_param);
+      // add tickets
+      java.util.Map<ChunkPos, Long> ticketIds = new java.util.HashMap<>();
+      int totalChunks = 0;
+      for (java.util.Iterator<ChunkPos> iterator = chunks.iterator(); iterator.hasNext();) {
+         final ChunkPos chunkPos = iterator.next();
+
+         final ChunkAccess chunk = (ChunkAccess)((ServerLevel)this.theLightEngine.getWorld()).m_7726_().m_6196_(chunkPos.f_45578_, chunkPos.f_45579_);
+         if (chunk == null || !chunk.m_6332_() || !chunk.m_6415_().m_62427_(ChunkStatus.f_62323_)) {
+            // cannot relight this chunk
+            iterator.remove();
+            continue;
+         }
+
+         final Long id = Long.valueOf(this.relightCounter++);
+
+         ((ServerLevel)this.theLightEngine.getWorld()).m_7726_().addTicketAtLevel(TicketType.CHUNK_RELIGHT, chunkPos, io.papermc.paper.util.MCUtil.getTicketLevelFor(ChunkStatus.f_62323_), id);
+         ticketIds.put(chunkPos, id);
+
+         ++totalChunks;
+      }
+
+      this.f_9299_.f_140133_.chunkTaskScheduler.radiusAwareScheduler.queueInfiniteRadiusTask(() -> { // Paper - rewrite chunk system
+         this.theLightEngine.relightChunks(chunks, (ChunkPos chunkPos) -> {
+            chunkLightCallback.accept(chunkPos);
+            ((java.util.concurrent.Executor)((ServerLevel)this.theLightEngine.getWorld()).m_7726_().f_8332_).execute(() -> {
+               ((ServerLevel)this.theLightEngine.getWorld()).m_7726_().f_8325_.m_140174_(chunkPos.m_45588_()).m_140063_(new net.minecraft.network.protocol.game.ClientboundLightUpdatePacket(chunkPos, ThreadedLevelLightEngine.this, null, null, true), false);
+               ((ServerLevel)this.theLightEngine.getWorld()).m_7726_().removeTicketAtLevel(TicketType.CHUNK_RELIGHT, chunkPos, io.papermc.paper.util.MCUtil.getTicketLevelFor(ChunkStatus.f_62323_), ticketIds.get(chunkPos));
+            });
+         }, onComplete);
+      });
+      this.m_9409_();
+
+      return totalChunks;
+   }
+
+   private final Long2IntOpenHashMap chunksBeingWorkedOn = new Long2IntOpenHashMap();
+
+   private void queueTaskForSection(final int chunkX, final int chunkY, final int chunkZ, final Supplier<CompletableFuture<Void>> runnable) {
+      final ServerLevel world = (ServerLevel)this.theLightEngine.getWorld();
+
+      final ChunkAccess center = this.theLightEngine.getAnyChunkNow(chunkX, chunkZ);
+      if (center == null || !center.m_6415_().m_62427_(ChunkStatus.f_62323_)) {
+         // do not accept updates in unlit chunks, unless we might be generating a chunk. thanks to the amazing
+         // chunk scheduling, we could be lighting and generating a chunk at the same time
+         return;
+      }
+
+      if (center.m_6415_() != ChunkStatus.f_62326_) {
+         // do not keep chunk loaded, we are probably in a gen thread
+         // if we proceed to add a ticket the chunk will be loaded, which is not what we want (avoid cascading gen)
+         runnable.get();
+         return;
+      }
+
+      if (!world.m_7726_().f_8325_.f_140135_.m_18695_()) {
+         // ticket logic is not safe to run off-main, re-schedule
+         world.m_7726_().f_8325_.f_140135_.execute(() -> {
+            this.queueTaskForSection(chunkX, chunkY, chunkZ, runnable);
+         });
+         return;
+      }
+
+      final long key = CoordinateUtils.getChunkKey(chunkX, chunkZ);
+
+      final CompletableFuture<Void> updateFuture = runnable.get();
+
+      if (updateFuture == null) {
+         // not scheduled
+         return;
+      }
+
+      final int references = this.chunksBeingWorkedOn.addTo(key, 1);
+      if (references == 0) {
+         final ChunkPos pos = new ChunkPos(chunkX, chunkZ);
+         world.m_7726_().m_8387_(ca.spottedleaf.starlight.common.light.StarLightInterface.CHUNK_WORK_TICKET, pos, 0, pos);
+      }
+
+      updateFuture.thenAcceptAsync((final Void ignore) -> {
+         final int newReferences = this.chunksBeingWorkedOn.get(key);
+         if (newReferences == 1) {
+            this.chunksBeingWorkedOn.remove(key);
+            final ChunkPos pos = new ChunkPos(chunkX, chunkZ);
+            world.m_7726_().m_8438_(ca.spottedleaf.starlight.common.light.StarLightInterface.CHUNK_WORK_TICKET, pos, 0, pos);
+         } else {
+            this.chunksBeingWorkedOn.put(key, newReferences - 1);
+         }
+      }, world.m_7726_().f_8325_.f_140135_).whenComplete((final Void ignore, final Throwable thr) -> {
+         if (thr != null) {
+            f_9296_.error("Failed to remove ticket level for post chunk task " + new ChunkPos(chunkX, chunkZ), thr);
+         }
+      });
+   }
+
+   @Override
+   public boolean m_75643_() {
+      // route to new light engine
+      return this.theLightEngine.hasUpdates();
+   }
+
+   @Override
+   public LayerLightEventListener m_75814_(final LightLayer lightType) {
+      return lightType == LightLayer.BLOCK ? this.theLightEngine.getBlockReader() : this.theLightEngine.getSkyReader();
+   }
+
+   @Override
+   public int m_75831_(final BlockPos pos, final int ambientDarkness) {
+      // need to use new light hooks for this
+      final int sky = this.theLightEngine.getSkyReader().m_7768_(pos) - ambientDarkness;
+      // Don't fetch the block light level if the skylight level is 15, since the value will never be higher.
+      if (sky == 15) return 15;
+      final int block = this.theLightEngine.getBlockReader().m_7768_(pos);
+      return Math.max(sky, block);
+   }
+   // Paper end - replace light engine imp
+
+   @Override
    public void close() {
    }
 
+   @Override
    public int m_5738_(int p_9324_, boolean p_9325_, boolean p_9326_) {
       throw (UnsupportedOperationException)Util.m_137570_(new UnsupportedOperationException("Ran automatically on a different thread!"));
    }
 
+   @Override
    public void m_8116_(BlockPos p_9359_, int p_9360_) {
       throw (UnsupportedOperationException)Util.m_137570_(new UnsupportedOperationException("Ran automatically on a different thread!"));
    }
 
+   @Override
    public void m_7174_(BlockPos p_9357_) {
-      BlockPos blockpos = p_9357_.m_7949_();
-      this.m_9312_(SectionPos.m_123171_(p_9357_.m_123341_()), SectionPos.m_123171_(p_9357_.m_123343_()), ThreadedLevelLightEngine.TaskType.POST_UPDATE, Util.m_137474_(() -> {
-         super.m_7174_(blockpos);
-      }, () -> {
-         return "checkBlock " + blockpos;
-      }));
+      // Paper start - replace light engine impl
+      final BlockPos posCopy = p_9357_.m_7949_();
+      this.queueTaskForSection(posCopy.m_123341_() >> 4, posCopy.m_123342_() >> 4, posCopy.m_123343_() >> 4, () -> {
+         return this.theLightEngine.blockChange(posCopy);
+      });
+      // Paper end - replace light engine impl
    }
 
    protected void m_9330_(ChunkPos p_9331_) {
+      if (true) return; // Paper - replace light engine impl
       this.m_9317_(p_9331_.f_45578_, p_9331_.f_45579_, () -> {
          return 0;
       }, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, Util.m_137474_(() -> {
@@ -80,17 +_,18 @@
       }));
    }
 
+   @Override
    public void m_6191_(SectionPos p_9364_, boolean p_9365_) {
-      this.m_9317_(p_9364_.m_123170_(), p_9364_.m_123222_(), () -> {
-         return 0;
-      }, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, Util.m_137474_(() -> {
-         super.m_6191_(p_9364_, p_9365_);
-      }, () -> {
-         return "updateSectionStatus " + p_9364_ + " " + p_9365_;
-      }));
+      // Paper start - replace light engine impl
+      this.queueTaskForSection(p_9364_.m_123341_(), p_9364_.m_123342_(), p_9364_.m_123343_(), () -> {
+         return this.theLightEngine.sectionChange(p_9364_, p_9365_);
+      });
+      // Paper end - replace light engine impl
    }
 
+   @Override
    public void m_6460_(ChunkPos p_9336_, boolean p_9337_) {
+      if (true) return; // Paper - replace light engine impl
       this.m_9312_(p_9336_.f_45578_, p_9336_.f_45579_, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, Util.m_137474_(() -> {
          super.m_6460_(p_9336_, p_9337_);
       }, () -> {
@@ -98,7 +_,9 @@
       }));
    }
 
+   @Override
    public void m_5687_(LightLayer p_9339_, SectionPos p_9340_, @Nullable DataLayer p_9341_, boolean p_9342_) {
+      if (true) return; // Paper - replace light engine impl
       this.m_9317_(p_9340_.m_123170_(), p_9340_.m_123222_(), () -> {
          return 0;
       }, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, Util.m_137474_(() -> {
@@ -109,20 +_,16 @@
    }
 
    private void m_9312_(int p_9313_, int p_9314_, ThreadedLevelLightEngine.TaskType p_9315_, Runnable p_9316_) {
-      this.m_9317_(p_9313_, p_9314_, this.f_9299_.m_140371_(ChunkPos.m_45589_(p_9313_, p_9314_)), p_9315_, p_9316_);
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
    }
 
    private void m_9317_(int p_9318_, int p_9319_, IntSupplier p_9320_, ThreadedLevelLightEngine.TaskType p_9321_, Runnable p_9322_) {
-      this.f_9300_.m_6937_(ChunkTaskPriorityQueueSorter.m_140624_(() -> {
-         this.f_9298_.add(Pair.of(p_9321_, p_9322_));
-         if (this.f_9298_.size() >= this.f_9301_) {
-            this.m_9366_();
-         }
-
-      }, ChunkPos.m_45589_(p_9318_, p_9319_), p_9320_));
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
    }
 
+   @Override
    public void m_6462_(ChunkPos p_9370_, boolean p_9371_) {
+      if (true) return; // Paper - replace light engine impl
       this.m_9317_(p_9370_.f_45578_, p_9370_.f_45579_, () -> {
          return 0;
       }, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, Util.m_137474_(() -> {
@@ -133,85 +_,57 @@
    }
 
    public CompletableFuture<ChunkAccess> m_215136_(ChunkAccess p_215137_) {
-      ChunkPos chunkpos = p_215137_.m_7697_();
+      ChunkPos chunkPos = p_215137_.m_7697_();
       return CompletableFuture.supplyAsync(Util.m_214655_(() -> {
-         super.m_6462_(chunkpos, true);
+         super.m_6462_(chunkPos, true);
          return p_215137_;
       }, () -> {
-         return "retainData: " + chunkpos;
-      }), (p_215152_) -> {
-         this.m_9312_(chunkpos.f_45578_, chunkpos.f_45579_, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, p_215152_);
+         return "retainData: " + chunkPos;
+      }), (task) -> {
+         this.m_9312_(chunkPos.f_45578_, chunkPos.f_45579_, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, task);
       });
    }
 
    public CompletableFuture<ChunkAccess> m_9353_(ChunkAccess p_9354_, boolean p_9355_) {
-      ChunkPos chunkpos = p_9354_.m_7697_();
-      p_9354_.m_8094_(false);
-      this.m_9312_(chunkpos.f_45578_, chunkpos.f_45579_, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, Util.m_137474_(() -> {
-         LevelChunkSection[] alevelchunksection = p_9354_.m_7103_();
-
-         for(int i = 0; i < p_9354_.m_151559_(); ++i) {
-            LevelChunkSection levelchunksection = alevelchunksection[i];
-            if (!levelchunksection.m_188008_()) {
-               int j = this.f_164445_.m_151568_(i);
-               super.m_6191_(SectionPos.m_123196_(chunkpos, j), false);
-            }
-         }
-
-         super.m_6460_(chunkpos, true);
-         if (!p_9355_) {
-            p_9354_.m_6267_().forEach((p_215147_) -> {
-               super.m_8116_(p_215147_, p_9354_.m_7146_(p_215147_));
-            });
-         }
-
-      }, () -> {
-         return "lightChunk " + chunkpos + " " + p_9355_;
-      }));
-      return CompletableFuture.supplyAsync(() -> {
-         p_9354_.m_8094_(true);
-         super.m_6462_(chunkpos, false);
-         this.f_9299_.m_140375_(chunkpos);
-         return p_9354_;
-      }, (p_215135_) -> {
-         this.m_9312_(chunkpos.f_45578_, chunkpos.f_45579_, ThreadedLevelLightEngine.TaskType.POST_UPDATE, p_215135_);
-      });
+      // Paper start - replace light engine impl
+      if (true) {
+         boolean lit = p_9355_;
+         final ChunkPos chunkPos = p_9354_.m_7697_();
+
+         return CompletableFuture.supplyAsync(() -> {
+            final Boolean[] emptySections = StarLightEngine.getEmptySectionsForChunk(p_9354_);
+            if (!lit) {
+               p_9354_.m_8094_(false);
+               this.theLightEngine.lightChunk(p_9354_, emptySections);
+               p_9354_.m_8094_(true);
+            } else {
+               this.theLightEngine.forceLoadInChunk(p_9354_, emptySections);
+               // can't really force the chunk to be edged checked, as we need neighbouring chunks - but we don't have
+               // them, so if it's not loaded then i guess we can't do edge checks. later loads of the chunk should
+               // catch what we miss here.
+               this.theLightEngine.checkChunkEdges(chunkPos.f_45578_, chunkPos.f_45579_);
+            }
+
+            this.f_9299_.m_140375_(chunkPos);
+            return p_9354_;
+         }, (runnable) -> {
+            this.theLightEngine.scheduleChunkLight(chunkPos, runnable);
+            this.m_9409_();
+         }).whenComplete((final ChunkAccess c, final Throwable throwable) -> {
+            if (throwable != null) {
+               f_9296_.error("Failed to light chunk " + chunkPos, throwable);
+            }
+         });
+      }
+      throw new InternalError(); // Paper - rewrite chunk system
    }
 
    public void m_9409_() {
-      if ((!this.f_9298_.isEmpty() || super.m_75643_()) && this.f_9302_.compareAndSet(false, true)) {
-         this.f_9297_.m_6937_(() -> {
-            this.m_9366_();
-            this.f_9302_.set(false);
-         });
-      }
-
+      // Paper - rewrite chunk system
    }
 
    private void m_9366_() {
-      int i = Math.min(this.f_9298_.size(), this.f_9301_);
-      ObjectListIterator<Pair<ThreadedLevelLightEngine.TaskType, Runnable>> objectlistiterator = this.f_9298_.iterator();
-
-      int j;
-      for(j = 0; objectlistiterator.hasNext() && j < i; ++j) {
-         Pair<ThreadedLevelLightEngine.TaskType, Runnable> pair = objectlistiterator.next();
-         if (pair.getFirst() == ThreadedLevelLightEngine.TaskType.PRE_UPDATE) {
-            pair.getSecond().run();
-         }
-      }
-
-      objectlistiterator.back(j);
-      super.m_5738_(Integer.MAX_VALUE, true, true);
-
-      for(int k = 0; objectlistiterator.hasNext() && k < i; ++k) {
-         Pair<ThreadedLevelLightEngine.TaskType, Runnable> pair1 = objectlistiterator.next();
-         if (pair1.getFirst() == ThreadedLevelLightEngine.TaskType.POST_UPDATE) {
-            pair1.getSecond().run();
-         }
-
-         objectlistiterator.remove();
-      }
-
+      throw new UnsupportedOperationException(); // Paper - rewrite chunk system
    }
 
    public void m_9310_(int p_9311_) {
