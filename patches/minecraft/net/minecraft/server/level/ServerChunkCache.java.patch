--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -6,16 +_,15 @@
 import com.mojang.datafixers.util.Either;
 import java.io.File;
 import java.io.IOException;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.Optional;
+import java.util.*;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+
+import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
@@ -45,14 +_,17 @@
 import net.minecraft.world.level.storage.DimensionDataStorage;
 import net.minecraft.world.level.storage.LevelData;
 import net.minecraft.world.level.storage.LevelStorageSource;
+import org.goldenforge.GoldenConfig;
+import org.goldenforge.config.GoldenForgeConfig;
 
 public class ServerChunkCache extends ChunkSource {
+   public static final org.slf4j.Logger LOGGER = com.mojang.logging.LogUtils.getLogger(); // Paper
    private static final List<ChunkStatus> f_8326_ = ChunkStatus.m_62349_();
-   private final DistanceManager f_8327_;
+   public final DistanceManager f_8327_;
    public final ServerLevel f_8329_;
-   final Thread f_8330_;
+   public Thread f_8330_;
    final ThreadedLevelLightEngine f_8331_;
-   private final ServerChunkCache.MainThreadExecutor f_8332_;
+   public final ServerChunkCache.MainThreadExecutor f_8332_;
    public final ChunkMap f_8325_;
    private final DimensionDataStorage f_8333_;
    private long f_8334_;
@@ -66,6 +_,9 @@
    @VisibleForDebug
    private NaturalSpawner.SpawnState f_8340_;
 
+   public final io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<LevelChunk> tickingChunks = new io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<>(4096, 0.75f, 4096, 0.15, true);
+   public final io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<LevelChunk> entityTickingChunks = new io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<>(4096, 0.75f, 4096, 0.15, true);
+   // Paper end
    public ServerChunkCache(ServerLevel p_214982_, LevelStorageSource.LevelStorageAccess p_214983_, DataFixer p_214984_, StructureTemplateManager p_214985_, Executor p_214986_, ChunkGenerator p_214987_, int p_214988_, int p_214989_, boolean p_214990_, ChunkProgressListener p_214991_, ChunkStatusUpdateListener p_214992_, Supplier<DimensionDataStorage> p_214993_) {
       this.f_8329_ = p_214982_;
       this.f_8332_ = new ServerChunkCache.MainThreadExecutor(p_214982_);
@@ -80,6 +_,127 @@
       this.m_8488_();
    }
 
+   final com.destroystokyo.paper.util.concurrent.WeakSeqLock loadedChunkMapSeqLock = new com.destroystokyo.paper.util.concurrent.WeakSeqLock();
+   final it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap<LevelChunk> loadedChunkMap = new it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap<>(8192, 0.5f);
+
+   private final LevelChunk[] lastLoadedChunks = new LevelChunk[4 * 4];
+
+   public boolean firstRunSpawnCounts = true; // Pufferfish
+   public final java.util.concurrent.atomic.AtomicBoolean _pufferfish_spawnCountsReady = new java.util.concurrent.atomic.AtomicBoolean(false); // Pufferfish - optimize countmobs
+
+   private static int getChunkCacheKey(int x, int z) {
+      return x & 3 | ((z & 3) << 2);
+   }
+
+   public void addLoadedChunk(LevelChunk chunk) {
+      this.loadedChunkMapSeqLock.acquireWrite();
+      try {
+         this.loadedChunkMap.put(chunk.coordinateKey, chunk);
+      } finally {
+         this.loadedChunkMapSeqLock.releaseWrite();
+      }
+
+      // rewrite cache if we have to
+      // we do this since we also cache null chunks
+      int cacheKey = getChunkCacheKey(chunk.locX, chunk.locZ);
+
+      this.lastLoadedChunks[cacheKey] = chunk;
+   }
+
+   public void removeLoadedChunk(LevelChunk chunk) {
+      this.loadedChunkMapSeqLock.acquireWrite();
+      try {
+         this.loadedChunkMap.remove(chunk.coordinateKey);
+      } finally {
+         this.loadedChunkMapSeqLock.releaseWrite();
+      }
+
+      // rewrite cache if we have to
+      // we do this since we also cache null chunks
+      int cacheKey = getChunkCacheKey(chunk.locX, chunk.locZ);
+
+      LevelChunk cachedChunk = this.lastLoadedChunks[cacheKey];
+      if (cachedChunk != null && cachedChunk.coordinateKey == chunk.coordinateKey) {
+         this.lastLoadedChunks[cacheKey] = null;
+      }
+   }
+
+   public LevelChunk getChunkAtIfCachedImmediately(int x, int z) {
+      long k = ChunkPos.m_45589_(x, z);
+
+      // Note: Bypass cache since we need to check ticket level, and to make this MT-Safe
+
+      ChunkHolder playerChunk = this.m_8364_(k);
+      if (playerChunk == null) {
+         return null;
+      }
+
+      return playerChunk.getFullChunkNowUnchecked();
+   }
+
+   public final LevelChunk getChunkAtIfLoadedMainThread(int x, int z) {
+      int cacheKey = getChunkCacheKey(x, z);
+
+      LevelChunk cachedChunk = this.lastLoadedChunks[cacheKey];
+      if (cachedChunk != null && cachedChunk.locX == x & cachedChunk.locZ == z) {
+         return this.lastLoadedChunks[cacheKey];
+      }
+
+      long chunkKey = ChunkPos.m_45589_(x, z);
+
+      cachedChunk = this.loadedChunkMap.get(chunkKey);
+      // Skipping a null check to avoid extra instructions to improve inline capability
+      this.lastLoadedChunks[cacheKey] = cachedChunk;
+      return cachedChunk;
+   }
+
+   public final LevelChunk getChunkAtIfLoadedMainThreadNoCache(int x, int z) {
+      return this.loadedChunkMap.get(ChunkPos.m_45589_(x, z));
+   }
+
+   @Nullable
+   public LevelChunk getChunkAtIfLoadedImmediately(int x, int z) {
+      long k = ChunkPos.m_45589_(x, z);
+
+      if (io.papermc.paper.util.TickThread.isTickThread()) { // Paper - rewrite chunk system
+         return this.getChunkAtIfLoadedMainThread(x, z);
+      }
+
+      LevelChunk ret = null;
+      long readlock;
+      do {
+         readlock = this.loadedChunkMapSeqLock.acquireRead();
+         try {
+            ret = this.loadedChunkMap.get(k);
+         } catch (Throwable thr) {
+            if (thr instanceof ThreadDeath) {
+               throw (ThreadDeath)thr;
+            }
+            // re-try, this means a CME occurred...
+            continue;
+         }
+      } while (!this.loadedChunkMapSeqLock.tryReleaseRead(readlock));
+
+      return ret;
+   }
+
+   @Nullable
+   public ChunkAccess getChunkAtImmediately(int x, int z) {
+      ChunkHolder holder = this.f_8325_.m_140327_(ChunkPos.m_45589_(x, z));
+      if (holder == null) {
+         return null;
+      }
+
+      return holder.m_140089_();
+   }
+   public <T> void addTicketAtLevel(TicketType<T> ticketType, ChunkPos chunkPos, int ticketLevel, T identifier) {
+      this.f_8327_.m_140792_(ticketType, chunkPos, ticketLevel, identifier);
+   }
+
+   public <T> void removeTicketAtLevel(TicketType<T> ticketType, ChunkPos chunkPos, int ticketLevel, T identifier) {
+      this.f_8327_.m_140823_(ticketType, chunkPos, ticketLevel, identifier);
+   }
+
    public ThreadedLevelLightEngine m_7827_() {
       return this.f_8331_;
    }
@@ -107,27 +_,42 @@
 
    @Nullable
    public ChunkAccess m_7587_(int p_8360_, int p_8361_, ChunkStatus p_8362_, boolean p_8363_) {
-      if (Thread.currentThread() != this.f_8330_) {
+      final int x1 = p_8360_; final int z1 = p_8361_; // Paper - conflict on variable change
+      if (!io.papermc.paper.util.TickThread.isTickThread()) { // Paper - rewrite chunk system
          return CompletableFuture.supplyAsync(() -> {
             return this.m_7587_(p_8360_, p_8361_, p_8362_, p_8363_);
          }, this.f_8332_).join();
       } else {
+         // Paper start - optimise for loaded chunks
+         LevelChunk ifLoaded = this.getChunkAtIfLoadedMainThread(p_8360_, p_8361_);
+         if (ifLoaded != null) {
+            return ifLoaded;
+         }
+         // Paper end
          ProfilerFiller profilerfiller = this.f_8329_.m_46473_();
          profilerfiller.m_6174_("getChunk");
          long i = ChunkPos.m_45589_(p_8360_, p_8361_);
 
-         for(int j = 0; j < 4; ++j) {
-            if (i == this.f_8337_[j] && p_8362_ == this.f_8338_[j]) {
-               ChunkAccess chunkaccess = this.f_8339_[j];
-               if (chunkaccess != null || !p_8363_) {
-                  return chunkaccess;
-               }
-            }
-         }
+//         for(int j = 0; j < 4; ++j) {
+//            if (i == this.lastChunkPos[j] && p_8362_ == this.lastChunkStatus[j]) {
+//               ChunkAccess chunkaccess = this.lastChunk[j];
+//               if (chunkaccess != null) { // CraftBukkit - the chunk can become accessible in the meantime TODO for non-null chunks it might also make sense to check that the chunk's state hasn't changed in the meantime
+//                  return chunkaccess;
+//               }
+//            }
+//         }
 
          profilerfiller.m_6174_("getChunkCacheMiss");
-         CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.m_8456_(p_8360_, p_8361_, p_8362_, p_8363_);
-         this.f_8332_.m_18701_(completablefuture::isDone);
+         CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getChunkFutureMainThread(p_8360_, p_8361_, p_8362_, p_8363_, true);
+         ServerChunkCache.MainThreadExecutor chunkproviderserver_b = this.f_8332_;
+         if (!completablefuture.isDone()) { // Paper
+            // Paper start - async chunk io/loading
+            io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.pushChunkWait(this.f_8329_, x1, z1); // Paper - rewrite chunk system
+            // Paper end
+            com.destroystokyo.paper.io.SyncLoadFinder.logSyncLoad(this.f_8329_, x1, z1); // Paper - sync load info
+            chunkproviderserver_b.m_18701_(completablefuture::isDone);
+            io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.popChunkWait(); // Paper - async chunk debug  // Paper - rewrite chunk system
+         } // Paper
          ChunkAccess chunkaccess1 = completablefuture.join().map((p_8406_) -> {
             return p_8406_;
          }, (p_8423_) -> {
@@ -144,38 +_,10 @@
 
    @Nullable
    public LevelChunk m_7131_(int p_8357_, int p_8358_) {
-      if (Thread.currentThread() != this.f_8330_) {
+      if (!io.papermc.paper.util.TickThread.isTickThread()) { // Paper - rewrite chunk system
          return null;
       } else {
-         this.f_8329_.m_46473_().m_6174_("getChunkNow");
-         long i = ChunkPos.m_45589_(p_8357_, p_8358_);
-
-         for(int j = 0; j < 4; ++j) {
-            if (i == this.f_8337_[j] && this.f_8338_[j] == ChunkStatus.f_62326_) {
-               ChunkAccess chunkaccess = this.f_8339_[j];
-               return chunkaccess instanceof LevelChunk ? (LevelChunk)chunkaccess : null;
-            }
-         }
-
-         ChunkHolder chunkholder = this.m_8364_(i);
-         if (chunkholder == null) {
-            return null;
-         } else {
-            Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either = chunkholder.m_140080_(ChunkStatus.f_62326_).getNow((Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>)null);
-            if (either == null) {
-               return null;
-            } else {
-               ChunkAccess chunkaccess1 = either.left().orElse((ChunkAccess)null);
-               if (chunkaccess1 != null) {
-                  this.m_8366_(i, chunkaccess1, ChunkStatus.f_62326_);
-                  if (chunkaccess1 instanceof LevelChunk) {
-                     return (LevelChunk)chunkaccess1;
-                  }
-               }
-
-               return null;
-            }
-         }
+         return this.getChunkAtIfLoadedMainThread(p_8357_, p_8358_); // Paper - optimise for loaded chunks
       }
    }
 
@@ -186,7 +_,7 @@
    }
 
    public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> m_8431_(int p_8432_, int p_8433_, ChunkStatus p_8434_, boolean p_8435_) {
-      boolean flag = Thread.currentThread() == this.f_8330_;
+      boolean flag = io.papermc.paper.util.TickThread.isTickThread(); // Paper - rewrite chunk system
       CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture;
       if (flag) {
          completablefuture = this.m_8456_(p_8432_, p_8433_, p_8434_, p_8435_);
@@ -203,58 +_,64 @@
    }
 
    private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> m_8456_(int p_8457_, int p_8458_, ChunkStatus p_8459_, boolean p_8460_) {
-      ChunkPos chunkpos = new ChunkPos(p_8457_, p_8458_);
-      long i = chunkpos.m_45588_();
-      int j = 33 + ChunkStatus.m_62370_(p_8459_);
-      ChunkHolder chunkholder = this.m_8364_(i);
-      if (p_8460_) {
-         this.f_8327_.m_140792_(TicketType.f_9449_, chunkpos, j, chunkpos);
-         if (this.m_8416_(chunkholder, j)) {
-            ProfilerFiller profilerfiller = this.f_8329_.m_46473_();
-            profilerfiller.m_6180_("chunkLoad");
-            this.m_8489_();
-            chunkholder = this.m_8364_(i);
-            profilerfiller.m_7238_();
-            if (this.m_8416_(chunkholder, j)) {
-               throw (IllegalStateException)Util.m_137570_(new IllegalStateException("No chunk holder after ticket has been added"));
-            }
-         }
-      }
-
-      return this.m_8416_(chunkholder, j) ? ChunkHolder.f_139996_ : chunkholder.m_140049_(p_8459_, this.f_8325_);
+      return getChunkFutureMainThread(p_8457_, p_8458_, p_8459_, p_8460_, false);
    }
-
-   private boolean m_8416_(@Nullable ChunkHolder p_8417_, int p_8418_) {
-      return p_8417_ == null || p_8417_.m_140093_() > p_8418_;
+   private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkFutureMainThread(int chunkX, int chunkZ, ChunkStatus leastStatus, boolean create, boolean isUrgent) {
+      // Paper start - rewrite chunk system
+      io.papermc.paper.util.TickThread.ensureTickThread(this.f_8329_, chunkX, chunkZ, "Scheduling chunk load off-main");
+      int minLevel = 33 + ChunkStatus.m_62370_(leastStatus);
+      io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder = this.f_8329_.chunkTaskScheduler.chunkHolderManager.getChunkHolder(chunkX, chunkZ);
+
+      boolean needsFullScheduling = leastStatus == ChunkStatus.f_62326_ && (chunkHolder == null || !chunkHolder.getChunkStatus().m_140114_(ChunkHolder.FullChunkStatus.BORDER));
+
+      if ((chunkHolder == null || chunkHolder.getTicketLevel() > minLevel || needsFullScheduling) && !create) {
+         return ChunkHolder.f_139996_;
+      }
+
+      io.papermc.paper.chunk.system.scheduling.NewChunkHolder.ChunkCompletion chunkCompletion = chunkHolder == null ? null : chunkHolder.getLastChunkCompletion();
+      if (needsFullScheduling || chunkCompletion == null || !chunkCompletion.genStatus().m_62427_(leastStatus)) {
+         // schedule
+         CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> ret = new CompletableFuture<>();
+         Consumer<ChunkAccess> complete = (ChunkAccess chunk) -> {
+            if (chunk == null) {
+               ret.complete(Either.right(ChunkHolder.ChunkLoadingFailure.f_140101_));
+            } else {
+               ret.complete(Either.left(chunk));
+            }
+         };
+
+         this.f_8329_.chunkTaskScheduler.scheduleChunkLoad(
+                 chunkX, chunkZ, leastStatus, true,
+                 isUrgent ? ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.BLOCKING : ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.NORMAL,
+                 complete
+         );
+
+         return ret;
+      } else {
+         // can return now
+         return CompletableFuture.completedFuture(Either.left(chunkCompletion.chunk()));
+      }
+      // Paper end - rewrite chunk system
    }
 
    public boolean m_5563_(int p_8429_, int p_8430_) {
-      ChunkHolder chunkholder = this.m_8364_((new ChunkPos(p_8429_, p_8430_)).m_45588_());
-      int i = 33 + ChunkStatus.m_62370_(ChunkStatus.f_62326_);
-      return !this.m_8416_(chunkholder, i);
+      return this.getChunkAtIfLoadedImmediately(p_8429_, p_8430_) != null; // Paper - rewrite chunk system
    }
 
    public BlockGetter m_6196_(int p_8454_, int p_8455_) {
-      long i = ChunkPos.m_45589_(p_8454_, p_8455_);
-      ChunkHolder chunkholder = this.m_8364_(i);
-      if (chunkholder == null) {
+      long k = ChunkPos.m_45589_(p_8454_, p_8455_);
+      ChunkHolder playerchunk = this.m_8364_(k);
+
+      if (playerchunk == null) {
          return null;
       } else {
-         int j = f_8326_.size() - 1;
-
-         while(true) {
-            ChunkStatus chunkstatus = f_8326_.get(j);
-            Optional<ChunkAccess> optional = chunkholder.m_140047_(chunkstatus).getNow(ChunkHolder.f_139995_).left();
-            if (optional.isPresent()) {
-               return optional.get();
-            }
-
-            if (chunkstatus == ChunkStatus.f_62323_.m_62482_()) {
-               return null;
-            }
-
-            --j;
+         // Paper start - rewrite chunk system
+         ChunkStatus status = playerchunk.getChunkHolderStatus();
+         if (status != null && !status.m_62427_(ChunkStatus.f_62323_.m_62482_())) {
+            return null;
          }
+         return playerchunk.getAvailableChunkNow();
+         // Paper end - rewrite chunk system
       }
    }
 
@@ -266,27 +_,15 @@
       return this.f_8332_.m_7245_();
    }
 
-   boolean m_8489_() {
-      boolean flag = this.f_8327_.m_140805_(this.f_8325_);
-      boolean flag1 = this.f_8325_.m_140324_();
-      if (!flag && !flag1) {
-         return false;
-      } else {
-         this.m_8488_();
-         return true;
-      }
-   }
-
    public boolean m_143239_(long p_143240_) {
-      ChunkHolder chunkholder = this.m_8364_(p_143240_);
-      if (chunkholder == null) {
-         return false;
-      } else if (!this.f_8329_.m_183438_(p_143240_)) {
-         return false;
-      } else {
-         Either<LevelChunk, ChunkHolder.ChunkLoadingFailure> either = chunkholder.m_140026_().getNow((Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>)null);
-         return either != null && either.left().isPresent();
-      }
+      // Paper start - replace player chunk loader system
+      ChunkHolder holder = this.f_8325_.m_140327_(p_143240_);
+      return holder != null && holder.isTickingReady();
+      // Paper end - replace player chunk loader system
+   }
+
+   public boolean m_8489_() {
+      return this.f_8329_.chunkTaskScheduler.chunkHolderManager.processTicketUpdates(); // Paper - rewrite chunk system
    }
 
    public void m_8419_(boolean p_8420_) {
@@ -294,10 +_,28 @@
       this.f_8325_.m_140318_(p_8420_);
    }
 
+   // Paper start - duplicate save, but call incremental
+   public void saveIncrementally() {
+      this.m_8489_();
+      this.f_8325_.saveIncrementally();
+   }
+   // Paper end
+
+   @Override
    public void close() throws IOException {
-      this.m_8419_(true);
-      this.f_8331_.close();
-      this.f_8325_.close();
+      // CraftBukkit start
+      this.close(true);
+   }
+
+   public void close(boolean save) { // Paper - rewrite chunk system
+      this.f_8329_.chunkTaskScheduler.chunkHolderManager.close(save, true); // Paper - rewrite chunk system
+      // Paper start - Write SavedData IO async
+      try {
+         this.f_8333_.close();
+      } catch (IOException exception) {
+         this.LOGGER.error("Failed to close persistent world data", exception);
+      }
+      // Paper end - Write SavedData IO async
    }
 
    public void m_201698_(BooleanSupplier p_201913_, boolean p_201914_) {
@@ -306,6 +_,7 @@
       this.m_8489_();
       this.f_8329_.m_46473_().m_6182_("chunks");
       if (p_201914_) {
+         this.f_8325_.f_140133_.playerChunkLoader.tick(); // Paper - replace player chunk loader - this is mostly required to account for view distance changes
          this.m_8490_();
       }
 
@@ -318,68 +_,224 @@
    private void m_8490_() {
       long i = this.f_8329_.m_46467_();
       long j = i - this.f_8334_;
+
       this.f_8334_ = i;
       boolean flag = this.f_8329_.m_46659_();
+
       if (flag) {
          this.f_8325_.m_140421_();
       } else {
-         LevelData leveldata = this.f_8329_.m_6106_();
-         ProfilerFiller profilerfiller = this.f_8329_.m_46473_();
-         profilerfiller.m_6180_("pollingChunks");
+         // Paper start - optimize isOutisdeRange
+         ChunkMap playerChunkMap = this.f_8325_;
+         for (ServerPlayer player : this.f_8329_.f_8546_) {
+            if (!player.affectsSpawning || player.m_5833_()) {
+               playerChunkMap.playerMobSpawnMap.remove(player);
+               continue;
+            }
+
+            int viewDistance = this.f_8325_.getEffectiveViewDistance();
+
+            // copied and modified from isOutisdeRange
+            int chunkRange = GoldenConfig.mobSpawnRange;
+            chunkRange = (chunkRange > viewDistance) ? (byte)viewDistance : chunkRange;
+            chunkRange = (chunkRange > DistanceManager.MOB_SPAWN_RANGE) ? DistanceManager.MOB_SPAWN_RANGE : chunkRange;
+
+            if (chunkRange < 0) {
+               playerChunkMap.playerMobSpawnMap.remove(player);
+               player.lastEntitySpawnRadiusSquared = -1.0;
+               continue;
+            }
+
+            int range = Math.min(chunkRange, 32); // limit to max view distance
+            int chunkX = io.papermc.paper.util.MCUtil.getChunkCoordinate(player.m_20185_());
+            int chunkZ = io.papermc.paper.util.MCUtil.getChunkCoordinate(player.m_20189_());
+
+            playerChunkMap.playerMobSpawnMap.addOrUpdate(player, chunkX, chunkZ, range);
+            player.lastEntitySpawnRadiusSquared = (double)((range << 4) * (range << 4)); // used in anyPlayerCloseEnoughForSpawning
+         }
+         // Paper end - optimize isOutisdeRange
+         LevelData worlddata = this.f_8329_.m_6106_();
+         ProfilerFiller gameprofilerfiller = this.f_8329_.m_46473_();
+
+         gameprofilerfiller.m_6180_("pollingChunks");
          int k = this.f_8329_.m_46469_().m_46215_(GameRules.f_46143_);
-         boolean flag1 = leveldata.m_6793_() % 400L == 0L;
-         profilerfiller.m_6180_("naturalSpawnCount");
+         //boolean flag1 = level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) != 0L && worlddata.getGameTime() % level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) == 0L; // CraftBukkit
+         boolean flag1 = worlddata.m_6793_() % 400L == 0L;
+
+         gameprofilerfiller.m_6180_("naturalSpawnCount");
          int l = this.f_8327_.m_140816_();
-         NaturalSpawner.SpawnState naturalspawner$spawnstate = NaturalSpawner.m_186524_(l, this.f_8329_.m_8583_(), this::m_8370_, new LocalMobCapCalculator(this.f_8325_));
-         this.f_8340_ = naturalspawner$spawnstate;
-         profilerfiller.m_6182_("filteringLoadedChunks");
-         List<ServerChunkCache.ChunkAndHolder> list = Lists.newArrayListWithCapacity(l);
-
-         for(ChunkHolder chunkholder : this.f_8325_.m_140416_()) {
-            LevelChunk levelchunk = chunkholder.m_140085_();
-            if (levelchunk != null) {
-               list.add(new ServerChunkCache.ChunkAndHolder(levelchunk, chunkholder));
-            }
-         }
-
-         profilerfiller.m_6182_("spawnAndTick");
-         boolean flag2 = this.f_8329_.m_46469_().m_46207_(GameRules.f_46134_);
-         Collections.shuffle(list);
-
-         for(ServerChunkCache.ChunkAndHolder serverchunkcache$chunkandholder : list) {
-            LevelChunk levelchunk1 = serverchunkcache$chunkandholder.f_184028_;
-            ChunkPos chunkpos = levelchunk1.m_7697_();
-            if (this.f_8329_.m_201916_(chunkpos) && this.f_8325_.m_183879_(chunkpos)) {
-               levelchunk1.m_187632_(j);
-               if (flag2 && (this.f_8335_ || this.f_8336_) && this.f_8329_.m_6857_().m_61927_(chunkpos)) {
-                  NaturalSpawner.m_47029_(this.f_8329_, levelchunk1, naturalspawner$spawnstate, this.f_8336_, this.f_8335_, flag1);
-               }
-
-               if (this.f_8329_.m_183438_(chunkpos.m_45588_())) {
-                  this.f_8329_.m_8714_(levelchunk1, k);
-               }
-            }
-         }
-
-         profilerfiller.m_6182_("customSpawners");
+         // Paper start - per player mob spawning
+         NaturalSpawner.SpawnState spawnercreature_d; // moved down
+         if ((this.f_8336_ || this.f_8335_) && GoldenForgeConfig.Server.perPlayerMobSpawns.get()) { // don't count mobs when animals and monsters are disabled
+            // Pufferfish start - moved down when async processing
+            if (!GoldenForgeConfig.Server.enableAsyncMobSpawning.get()) {
+               // re-set mob counts
+               for (ServerPlayer player : this.f_8329_.f_8546_) {
+                  Arrays.fill(player.mobCounts, 0);
+               }
+               f_8340_ = NaturalSpawner.createState(l, this.f_8329_.m_8583_(), this::m_8370_, null, true);
+            }
+            // Pufferfish end
+         } else {
+            // Pufferfish start - this is only implemented for per-player mob spawning so this makes everything work if this setting is disabled.
+            f_8340_ = NaturalSpawner.createState(l, this.f_8329_.m_8583_(), this::m_8370_,GoldenForgeConfig.Server.perPlayerMobSpawns.get() ? new LocalMobCapCalculator(this.f_8325_) : null, false);
+            _pufferfish_spawnCountsReady.set(true);
+            // Pufferfish end
+         }
+         // Paper end
+
+         //this.lastSpawnState = spawnercreature_d; // Pufferfish - this is managed asynchronously
+         gameprofilerfiller.m_6182_("filteringLoadedChunks");
+         // Paper - moved down
+
+         // Paper - moved down
+
+         gameprofilerfiller.m_6182_("spawnAndTick");
+         boolean flag2 = this.f_8329_.m_46469_().m_46207_(GameRules.f_46134_) && !this.f_8329_.m_6907_().isEmpty(); // CraftBukkit
+
+         // Paper - only shuffle if per-player mob spawning is disabled
+         // Paper - moved natural spawn event up
+         // Paper start - optimise chunk tick iteration
+         int chunksTicked = 0; // Paper
+         io.papermc.paper.util.player.NearbyPlayers nearbyPlayers = this.f_8325_.getNearbyPlayers(); // Paper - optimise chunk tick iteration
+         Iterator<LevelChunk> iterator1;
+         if (GoldenForgeConfig.Server.perPlayerMobSpawns.get()) {
+            iterator1 = this.entityTickingChunks.iterator();
+         } else {
+            iterator1 = this.entityTickingChunks.unsafeIterator();
+            List<LevelChunk> shuffled = Lists.newArrayListWithCapacity(this.entityTickingChunks.size());
+            while (iterator1.hasNext()) {
+               shuffled.add(iterator1.next());
+            }
+            Collections.shuffle(shuffled);
+            iterator1 = shuffled.iterator();
+         }
+
+         try {
+            while (iterator1.hasNext()) {
+               LevelChunk chunk1 = iterator1.next();
+               ChunkPos chunkcoordintpair = chunk1.m_7697_();
+
+               // Paper start - optimise chunk tick iteration
+               com.destroystokyo.paper.util.maplist.ReferenceList<ServerPlayer> playersNearby
+                       = nearbyPlayers.getPlayers(chunkcoordintpair, io.papermc.paper.util.player.NearbyPlayers.NearbyMapType.SPAWN_RANGE);
+               if (playersNearby == null) {
+                  continue;
+               }
+               Object[] rawData = playersNearby.getRawData();
+               boolean spawn = false;
+               boolean tick = false;
+               for (int itr = 0, len = playersNearby.size(); itr < len; ++itr) {
+                  ServerPlayer player = (ServerPlayer)rawData[itr];
+                  if (player.m_5833_()) {
+                     continue;
+                  }
+
+                  double distance = ChunkMap.m_140226_(chunkcoordintpair, player);
+                  spawn |= player.lastEntitySpawnRadiusSquared >= distance;
+                  tick |= ((double)io.papermc.paper.util.player.NearbyPlayers.SPAWN_RANGE_VIEW_DISTANCE_BLOCKS) * ((double)io.papermc.paper.util.player.NearbyPlayers.SPAWN_RANGE_VIEW_DISTANCE_BLOCKS) >= distance;
+                  if (spawn & tick) {
+                     break;
+                  }
+               }
+               // Paper end - optimise chunk tick iteration
+               // Paper - move down
+               // Paper end - optimise chunk tick iteration
+               if ((tick || this.f_8329_.m_201916_(chunkcoordintpair))) { // Paper - optimise anyPlayerCloseEnoughForSpawning // Paper - the chunk is known ticking
+                  chunk1.m_187632_(j);
+                  if (flag2 && (!GoldenForgeConfig.Server.enableAsyncMobSpawning.get() || _pufferfish_spawnCountsReady.get()) && (this.f_8335_ || this.f_8336_) && this.f_8329_.m_6857_().m_61927_(chunkcoordintpair)) { // Spigot // Paper - optimise anyPlayerCloseEnoughForSpawning & optimise chunk tick iteration
+                     NaturalSpawner.m_47029_(this.f_8329_, chunk1, f_8340_, this.f_8336_, this.f_8335_, flag1); // Pufferfish
+                  }
+
+                  if (tick || this.f_8329_.m_183438_(chunkcoordintpair.m_45588_())) { // Paper - the chunk is known ticking
+                     this.f_8329_.m_8714_(chunk1, k);
+                     if ((chunksTicked++ & 1) == 0) net.minecraft.server.MinecraftServer.getServer().executeMidTickTasks(); // Paper
+                  }
+               }
+               // Paper start - optimise chunk tick iteration
+            }
+
+         } finally {
+            if (iterator1 instanceof io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet.Iterator safeIterator) {
+               safeIterator.finishedIterating();
+            }
+         }
+         // Paper end - optimise chunk tick iteration
+         gameprofilerfiller.m_6182_("customSpawners");
          if (flag2) {
             this.f_8329_.m_8799_(this.f_8335_, this.f_8336_);
          }
+         gameprofilerfiller.m_7238_();
+         // Paper start - use set of chunks requiring updates, rather than iterating every single one loaded
+         gameprofilerfiller.m_6182_("broadcast");
+         if (!this.f_8325_.needsChangeBroadcasting.isEmpty()) {
+            ReferenceOpenHashSet<ChunkHolder> copy = this.f_8325_.needsChangeBroadcasting.clone();
+            this.f_8325_.needsChangeBroadcasting.clear();
+            for (ChunkHolder holder : copy) {
+               holder.m_140054_(holder.getFullChunkNowUnchecked()); // LevelChunks are NEVER unloaded
+               if (holder.needsBroadcastChanges()) {
+                  // I DON'T want to KNOW what DUMB plugins might be doing.
+                  this.f_8325_.needsChangeBroadcasting.add(holder);
+               }
+            }
+         }
+         gameprofilerfiller.m_7238_();
+         // Paper end - use set of chunks requiring updates, rather than iterating every single one loaded
+         // Paper start - controlled flush for entity tracker packets
+         List<net.minecraft.network.Connection> disabledFlushes = new java.util.ArrayList<>(this.f_8329_.f_8546_.size());
+         for (ServerPlayer player : this.f_8329_.f_8546_) {
+            net.minecraft.server.network.ServerGamePacketListenerImpl connection = player.f_8906_;
+            if (connection != null) {
+               connection.f_9742_.disableAutomaticFlush();
+               disabledFlushes.add(connection.f_9742_);
+            }
+         }
+         try { // Paper end - controlled flush for entity tracker packets
+            this.f_8325_.m_140421_();
+            // Paper start - controlled flush for entity tracker packets
+         } finally {
+            for (net.minecraft.network.Connection networkManager : disabledFlushes) {
+               networkManager.enableAutomaticFlush();
+            }
+         }
+         // Paper end - controlled flush for entity tracker packets
+      }
 
-         profilerfiller.m_6182_("broadcast");
-         list.forEach((p_184022_) -> {
-            p_184022_.f_184029_.m_140054_(p_184022_.f_184028_);
-         });
-         profilerfiller.m_7238_();
-         profilerfiller.m_7238_();
-         this.f_8325_.m_140421_();
+      // Pufferfish start - optimize mob spawning
+      if (GoldenForgeConfig.Server.enableAsyncMobSpawning.get()) {
+         for (ServerPlayer player : this.f_8329_.f_8546_) {
+            Arrays.fill(player.mobCounts, 0);
+         }
+         if (firstRunSpawnCounts) {
+            firstRunSpawnCounts = false;
+            _pufferfish_spawnCountsReady.set(true);
+         }
+         if (GoldenForgeConfig.Server.perPlayerMobSpawns.get() && _pufferfish_spawnCountsReady.getAndSet(false)) {
+            net.minecraft.server.MinecraftServer.getServer().mobSpawnExecutor.submit(() -> {
+               int mapped = f_8327_.m_140816_();
+               io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet.Iterator<Entity> objectiterator =
+                       f_8329_.f_143243_.entities.iterator(io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet.ITERATOR_FLAG_SEE_ADDITIONS);
+               gg.pufferfish.pufferfish.util.IterableWrapper<Entity> wrappedIterator =
+                       new gg.pufferfish.pufferfish.util.IterableWrapper<>(objectiterator);
+               f_8340_ = NaturalSpawner.createState(mapped, wrappedIterator, this::m_8370_, null, true);
+               objectiterator.finishedIterating();
+               _pufferfish_spawnCountsReady.set(true);
+            });
+         }
       }
+      // Pufferfish end
    }
 
    private void m_8370_(long p_8371_, Consumer<LevelChunk> p_8372_) {
-      ChunkHolder chunkholder = this.m_8364_(p_8371_);
-      if (chunkholder != null) {
-         chunkholder.m_140082_().getNow(ChunkHolder.f_139997_).left().ifPresent(p_8372_);
+      ChunkHolder playerchunk = this.m_8364_(p_8371_);
+
+      if (playerchunk != null) {
+         // Paper start - rewrite chunk system
+         LevelChunk chunk = playerchunk.m_212234_();
+         if (chunk != null) {
+            p_8372_.accept(chunk);
+         }
+         // Paper end - rewrite chunk system
       }
 
    }
@@ -426,10 +_,16 @@
    }
 
    public <T> void m_8387_(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_) {
+      addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_, false);
+   }
+   public <T> void addRegionTicket(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_, boolean forceTicks) {
       this.f_8327_.m_140840_(p_8388_, p_8389_, p_8390_, p_8391_);
    }
 
    public <T> void m_8438_(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_) {
+      removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_, false);
+   }
+   public <T> void removeRegionTicket(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_, boolean forceTicks) {
       this.f_8327_.m_140849_(p_8439_, p_8440_, p_8441_, p_8442_);
    }
 
@@ -498,11 +_,10 @@
    public void m_201915_() {
       this.f_8327_.m_201910_();
    }
-
    static record ChunkAndHolder(LevelChunk f_184028_, ChunkHolder f_184029_) {
    }
 
-   final class MainThreadExecutor extends BlockableEventLoop<Runnable> {
+   public final class MainThreadExecutor extends BlockableEventLoop<Runnable> {
       MainThreadExecutor(Level p_8494_) {
          super("Chunk source main thread executor for " + p_8494_.m_46472_().m_135782_());
       }
@@ -531,10 +_,8 @@
       public boolean m_7245_() {
          if (ServerChunkCache.this.m_8489_()) {
             return true;
-         } else {
-            ServerChunkCache.this.f_8331_.m_9409_();
-            return super.m_7245_();
          }
+         return super.m_7245_() | ServerChunkCache.this.f_8329_.chunkTaskScheduler.executeMainThreadTask(); // Paper - rewrite chunk system
       }
    }
 }
