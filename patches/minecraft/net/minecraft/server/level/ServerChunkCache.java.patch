--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -6,10 +_,7 @@
 import com.mojang.datafixers.util.Either;
 import java.io.File;
 import java.io.IOException;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.Optional;
+import java.util.*;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
@@ -53,7 +_,7 @@
    public final ServerLevel level;
    final Thread mainThread;
    final ThreadedLevelLightEngine lightEngine;
-   private final ServerChunkCache.MainThreadExecutor mainThreadProcessor;
+   public final ServerChunkCache.MainThreadExecutor mainThreadProcessor;
    public final ChunkMap chunkMap;
    private final DimensionDataStorage dataStorage;
    private long lastInhabitedUpdate;
@@ -66,6 +_,92 @@
    @Nullable
    @VisibleForDebug
    private NaturalSpawner.SpawnState lastSpawnState;
+   // Paper start
+   final com.destroystokyo.paper.util.concurrent.WeakSeqLock loadedChunkMapSeqLock = new com.destroystokyo.paper.util.concurrent.WeakSeqLock();
+   final it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap<LevelChunk> loadedChunkMap = new it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap<>(8192, 0.5f);
+
+   private final LevelChunk[] lastLoadedChunks = new LevelChunk[4 * 4];
+
+   private static int getChunkCacheKey(int x, int z) {
+      return x & 3 | ((z & 3) << 2);
+   }
+
+   public void addLoadedChunk(LevelChunk chunk) {
+      this.loadedChunkMapSeqLock.acquireWrite();
+      try {
+         this.loadedChunkMap.put(chunk.coordinateKey, chunk);
+      } finally {
+         this.loadedChunkMapSeqLock.releaseWrite();
+      }
+
+      // rewrite cache if we have to
+      // we do this since we also cache null chunks
+      int cacheKey = getChunkCacheKey(chunk.locX, chunk.locZ);
+
+      this.lastLoadedChunks[cacheKey] = chunk;
+   }
+
+   public void removeLoadedChunk(LevelChunk chunk) {
+      this.loadedChunkMapSeqLock.acquireWrite();
+      try {
+         this.loadedChunkMap.remove(chunk.coordinateKey);
+      } finally {
+         this.loadedChunkMapSeqLock.releaseWrite();
+      }
+
+      // rewrite cache if we have to
+      // we do this since we also cache null chunks
+      int cacheKey = getChunkCacheKey(chunk.locX, chunk.locZ);
+
+      LevelChunk cachedChunk = this.lastLoadedChunks[cacheKey];
+      if (cachedChunk != null && cachedChunk.coordinateKey == chunk.coordinateKey) {
+         this.lastLoadedChunks[cacheKey] = null;
+      }
+   }
+
+   public ChunkAccess getChunkAtImmediately(int x, int z) {
+      ChunkHolder holder = this.chunkMap.getVisibleChunkIfPresent(ChunkPos.asLong(x, z));
+      if (holder == null) {
+         return null;
+      }
+
+      return holder.getLastAvailable();
+   }
+
+
+   public final LevelChunk getChunkAtIfLoadedMainThread(int x, int z) {
+      int cacheKey = getChunkCacheKey(x, z);
+
+      LevelChunk cachedChunk = this.lastLoadedChunks[cacheKey];
+      if (cachedChunk != null && cachedChunk.locX == x & cachedChunk.locZ == z) {
+         return cachedChunk;
+      }
+
+      long chunkKey = ChunkPos.asLong(x, z);
+
+      cachedChunk = this.loadedChunkMap.get(chunkKey);
+      // Skipping a null check to avoid extra instructions to improve inline capability
+      this.lastLoadedChunks[cacheKey] = cachedChunk;
+      return cachedChunk;
+   }
+
+   public final LevelChunk getChunkAtIfLoadedMainThreadNoCache(int x, int z) {
+      return this.loadedChunkMap.get(ChunkPos.asLong(x, z));
+   }
+
+   public final LevelChunk getChunkAtMainThread(int x, int z) {
+      LevelChunk ret = this.getChunkAtIfLoadedMainThread(x, z);
+      if (ret != null) {
+         return ret;
+      }
+      return (LevelChunk)this.getChunk(x, z, ChunkStatus.FULL, true);
+   }
+
+   final java.util.concurrent.atomic.AtomicLong chunkFutureAwaitCounter = new java.util.concurrent.atomic.AtomicLong(); // Paper - private -> package private
+   // Paper end
+
+   public final io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<LevelChunk> tickingChunks = new io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<>(4096, 0.75f, 4096, 0.15, true);
+   public final io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<LevelChunk> entityTickingChunks = new io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<>(4096, 0.75f, 4096, 0.15, true);
 
    public ServerChunkCache(ServerLevel p_214982_, LevelStorageSource.LevelStorageAccess p_214983_, DataFixer p_214984_, StructureTemplateManager p_214985_, Executor p_214986_, ChunkGenerator p_214987_, int p_214988_, int p_214989_, boolean p_214990_, ChunkProgressListener p_214991_, ChunkStatusUpdateListener p_214992_, Supplier<DimensionDataStorage> p_214993_) {
       this.level = p_214982_;
@@ -106,29 +_,87 @@
       this.lastChunk[0] = p_8368_;
    }
 
+   // Paper start - "real" get chunk if loaded
+   // Note: Partially copied from the getChunkAt method below
+   @Nullable
+   public LevelChunk getChunkAtIfCachedImmediately(int x, int z) {
+      long k = ChunkPos.asLong(x, z);
+
+      // Note: Bypass cache since we need to check ticket level, and to make this MT-Safe
+
+      ChunkHolder playerChunk = this.getVisibleChunkIfPresent(k);
+      if (playerChunk == null) {
+         return null;
+      }
+
+      return playerChunk.getFullChunkNowUnchecked();
+   }
+
+   @Nullable
+   public LevelChunk getChunkAtIfLoadedImmediately(int x, int z) {
+      long k = ChunkPos.asLong(x, z);
+
+      if (io.papermc.paper.util.TickThread.isTickThread()) { // Paper - rewrite chunk system
+         return this.getChunkAtIfLoadedMainThread(x, z);
+      }
+
+      LevelChunk ret = null;
+      long readlock;
+      do {
+         readlock = this.loadedChunkMapSeqLock.acquireRead();
+         try {
+            ret = this.loadedChunkMap.get(k);
+         } catch (Throwable thr) {
+            if (thr instanceof ThreadDeath) {
+               throw (ThreadDeath)thr;
+            }
+            // re-try, this means a CME occurred...
+            continue;
+         }
+      } while (!this.loadedChunkMapSeqLock.tryReleaseRead(readlock));
+
+      return ret;
+   }
+   // Paper end
+
+   public <T> void addTicketAtLevel(TicketType<T> ticketType, ChunkPos chunkPos, int ticketLevel, T identifier) {
+      this.distanceManager.addTicket(ticketType, chunkPos, ticketLevel, identifier);
+   }
+
+   public <T> void removeTicketAtLevel(TicketType<T> ticketType, ChunkPos chunkPos, int ticketLevel, T identifier) {
+      this.distanceManager.removeTicket(ticketType, chunkPos, ticketLevel, identifier);
+   }
+
    @Nullable
    public ChunkAccess getChunk(int p_8360_, int p_8361_, ChunkStatus p_8362_, boolean p_8363_) {
-      if (Thread.currentThread() != this.mainThread) {
+      final int x1 = p_8360_; final int z1 = p_8361_; // Paper - conflict on variable change
+      if (!io.papermc.paper.util.TickThread.isTickThread()) { // Paper - rewrite chunk system
          return CompletableFuture.supplyAsync(() -> {
             return this.getChunk(p_8360_, p_8361_, p_8362_, p_8363_);
          }, this.mainThreadProcessor).join();
       } else {
+         // Paper start - optimise for loaded chunks
+         LevelChunk ifLoaded = this.getChunkAtIfLoadedMainThread(p_8360_, p_8361_);
+         if (ifLoaded != null) {
+            return ifLoaded;
+         }
+         // Paper end
          ProfilerFiller profilerfiller = this.level.getProfiler();
          profilerfiller.incrementCounter("getChunk");
          long i = ChunkPos.asLong(p_8360_, p_8361_);
 
-         for(int j = 0; j < 4; ++j) {
-            if (i == this.lastChunkPos[j] && p_8362_ == this.lastChunkStatus[j]) {
-               ChunkAccess chunkaccess = this.lastChunk[j];
-               if (chunkaccess != null || !p_8363_) {
-                  return chunkaccess;
-               }
-            }
-         }
+         // Paper - rewrite chunk system - there are no correct callbacks to remove items from cache in the new chunk system
 
          profilerfiller.incrementCounter("getChunkCacheMiss");
-         CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getChunkFutureMainThread(p_8360_, p_8361_, p_8362_, p_8363_);
-         this.mainThreadProcessor.managedBlock(completablefuture::isDone);
+         CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getChunkFutureMainThread(p_8360_, p_8361_, p_8362_, p_8363_,  true); // Paper
+         if (!completablefuture.isDone()) { // Paper
+            // Paper start - async chunk io/loading
+            io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.pushChunkWait(this.level, x1, z1); // Paper - rewrite chunk system
+            // Paper end
+            com.destroystokyo.paper.io.SyncLoadFinder.logSyncLoad(this.level, x1, z1); // Paper - sync load info
+            mainThreadProcessor.managedBlock(completablefuture::isDone);
+            io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.popChunkWait(); // Paper - async chunk debug  // Paper - rewrite chunk system
+         } // Paper
          ChunkAccess chunkaccess1 = completablefuture.join().map((p_8406_) -> {
             return p_8406_;
          }, (p_8423_) -> {
@@ -145,38 +_,10 @@
 
    @Nullable
    public LevelChunk getChunkNow(int p_8357_, int p_8358_) {
-      if (Thread.currentThread() != this.mainThread) {
+      if (!io.papermc.paper.util.TickThread.isTickThread()) { // Paper - rewrite chunk system
          return null;
       } else {
-         this.level.getProfiler().incrementCounter("getChunkNow");
-         long i = ChunkPos.asLong(p_8357_, p_8358_);
-
-         for(int j = 0; j < 4; ++j) {
-            if (i == this.lastChunkPos[j] && this.lastChunkStatus[j] == ChunkStatus.FULL) {
-               ChunkAccess chunkaccess = this.lastChunk[j];
-               return chunkaccess instanceof LevelChunk ? (LevelChunk)chunkaccess : null;
-            }
-         }
-
-         ChunkHolder chunkholder = this.getVisibleChunkIfPresent(i);
-         if (chunkholder == null) {
-            return null;
-         } else {
-            Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either = chunkholder.getFutureIfPresent(ChunkStatus.FULL).getNow((Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>)null);
-            if (either == null) {
-               return null;
-            } else {
-               ChunkAccess chunkaccess1 = either.left().orElse((ChunkAccess)null);
-               if (chunkaccess1 != null) {
-                  this.storeInCache(i, chunkaccess1, ChunkStatus.FULL);
-                  if (chunkaccess1 instanceof LevelChunk) {
-                     return (LevelChunk)chunkaccess1;
-                  }
-               }
-
-               return null;
-            }
-         }
+         return this.getChunkAtIfLoadedMainThread(p_8357_, p_8358_); // Paper - optimise for loaded chunks
       }
    }
 
@@ -187,7 +_,7 @@
    }
 
    public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkFuture(int p_8432_, int p_8433_, ChunkStatus p_8434_, boolean p_8435_) {
-      boolean flag = Thread.currentThread() == this.mainThread;
+      boolean flag = io.papermc.paper.util.TickThread.isTickThread(); // Paper - rewrite chunk system
       CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture;
       if (flag) {
          completablefuture = this.getChunkFutureMainThread(p_8432_, p_8433_, p_8434_, p_8435_);
@@ -203,36 +_,53 @@
       return completablefuture;
    }
 
-   private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkFutureMainThread(int p_8457_, int p_8458_, ChunkStatus p_8459_, boolean p_8460_) {
-      ChunkPos chunkpos = new ChunkPos(p_8457_, p_8458_);
-      long i = chunkpos.toLong();
-      int j = ChunkLevel.byStatus(p_8459_);
-      ChunkHolder chunkholder = this.getVisibleChunkIfPresent(i);
-      if (p_8460_) {
-         this.distanceManager.addTicket(TicketType.UNKNOWN, chunkpos, j, chunkpos);
-         if (this.chunkAbsent(chunkholder, j)) {
-            ProfilerFiller profilerfiller = this.level.getProfiler();
-            profilerfiller.push("chunkLoad");
-            this.runDistanceManagerUpdates();
-            chunkholder = this.getVisibleChunkIfPresent(i);
-            profilerfiller.pop();
-            if (this.chunkAbsent(chunkholder, j)) {
-               throw (IllegalStateException)Util.pauseInIde(new IllegalStateException("No chunk holder after ticket has been added"));
+   private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkFutureMainThread(int chunkX, int chunkZ, ChunkStatus leastStatus, boolean create) {
+      // Paper start - add isUrgent - old sig left in place for dirty nms plugins
+      return getChunkFutureMainThread(chunkX, chunkZ, leastStatus, create, false);
+   }
+
+   private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkFutureMainThread(int chunkX, int chunkZ, ChunkStatus leastStatus, boolean create, boolean isUrgent) {
+      // Paper start - rewrite chunk system
+      io.papermc.paper.util.TickThread.ensureTickThread(this.level, chunkX, chunkZ, "Scheduling chunk load off-main");
+      int minLevel = ChunkLevel.byStatus(leastStatus);
+      io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder = this.level.chunkTaskScheduler.chunkHolderManager.getChunkHolder(chunkX, chunkZ);
+
+      boolean needsFullScheduling = leastStatus == ChunkStatus.FULL && (chunkHolder == null || !chunkHolder.getChunkStatus().isOrAfter(FullChunkStatus.FULL));
+
+      if ((chunkHolder == null || chunkHolder.getTicketLevel() > minLevel || needsFullScheduling) && !create) {
+         return ChunkHolder.UNLOADED_CHUNK_FUTURE;
+      }
+
+      io.papermc.paper.chunk.system.scheduling.NewChunkHolder.ChunkCompletion chunkCompletion = chunkHolder == null ? null : chunkHolder.getLastChunkCompletion();
+      if (needsFullScheduling || chunkCompletion == null || !chunkCompletion.genStatus().isOrAfter(leastStatus)) {
+         // schedule
+         CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> ret = new CompletableFuture<>();
+         Consumer<ChunkAccess> complete = (ChunkAccess chunk) -> {
+            if (chunk == null) {
+               ret.complete(Either.right(ChunkHolder.ChunkLoadingFailure.UNLOADED));
+            } else {
+               ret.complete(Either.left(chunk));
             }
-         }
+         };
+
+         this.level.chunkTaskScheduler.scheduleChunkLoad(
+                 chunkX, chunkZ, leastStatus, true,
+                 isUrgent ? ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.BLOCKING : ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.NORMAL,
+                 complete
+         );
+
+         return ret;
+      } else {
+         // can return now
+         return CompletableFuture.completedFuture(Either.left(chunkCompletion.chunk()));
       }
-
-      return this.chunkAbsent(chunkholder, j) ? ChunkHolder.UNLOADED_CHUNK_FUTURE : chunkholder.getOrScheduleFuture(p_8459_, this.chunkMap);
-   }
-
-   private boolean chunkAbsent(@Nullable ChunkHolder p_8417_, int p_8418_) {
-      return p_8417_ == null || p_8417_.getTicketLevel() > p_8418_;
-   }
+      // Paper end - rewrite chunk system
+   }
+
+// Paper - rewrite chunk system
 
    public boolean hasChunk(int p_8429_, int p_8430_) {
-      ChunkHolder chunkholder = this.getVisibleChunkIfPresent((new ChunkPos(p_8429_, p_8430_)).toLong());
-      int i = ChunkLevel.byStatus(ChunkStatus.FULL);
-      return !this.chunkAbsent(chunkholder, i);
+      return this.getChunkAtIfLoadedImmediately(p_8429_, p_8430_) != null; // Paper - rewrite chunk system
    }
 
    @Nullable
@@ -242,21 +_,13 @@
       if (chunkholder == null) {
          return null;
       } else {
-         int j = CHUNK_STATUSES.size() - 1;
-
-         while(true) {
-            ChunkStatus chunkstatus = CHUNK_STATUSES.get(j);
-            Optional<ChunkAccess> optional = chunkholder.getFutureIfPresentUnchecked(chunkstatus).getNow(ChunkHolder.UNLOADED_CHUNK).left();
-            if (optional.isPresent()) {
-               return optional.get();
-            }
-
-            if (chunkstatus == ChunkStatus.INITIALIZE_LIGHT.getParent()) {
-               return null;
-            }
-
-            --j;
+         // Paper start - rewrite chunk system
+         ChunkStatus status = chunkholder.getChunkHolderStatus();
+         if (status != null && !status.isOrAfter(ChunkStatus.LIGHT.getParent())) {
+            return null;
          }
+         return chunkholder.getAvailableChunkNow();
+         // Paper end - rewrite chunk system
       }
    }
 
@@ -269,26 +_,20 @@
    }
 
    boolean runDistanceManagerUpdates() {
-      boolean flag = this.distanceManager.runAllUpdates(this.chunkMap);
-      boolean flag1 = this.chunkMap.promoteChunkMap();
-      if (!flag && !flag1) {
-         return false;
-      } else {
-         this.clearCache();
-         return true;
-      }
-   }
+      return this.level.chunkTaskScheduler.chunkHolderManager.processTicketUpdates(); // Paper - rewrite chunk system
+   }
+
+   // Paper start
+   public boolean isPositionTicking(Entity entity) {
+      return this.isPositionTicking(ChunkPos.asLong(net.minecraft.util.Mth.floor(entity.getX()) >> 4, net.minecraft.util.Mth.floor(entity.getZ()) >> 4));
+   }
+   // Paper end
 
    public boolean isPositionTicking(long p_143240_) {
-      ChunkHolder chunkholder = this.getVisibleChunkIfPresent(p_143240_);
-      if (chunkholder == null) {
-         return false;
-      } else if (!this.level.shouldTickBlocksAt(p_143240_)) {
-         return false;
-      } else {
-         Either<LevelChunk, ChunkHolder.ChunkLoadingFailure> either = chunkholder.getTickingChunkFuture().getNow((Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>)null);
-         return either != null && either.left().isPresent();
-      }
+      // Paper start - replace player chunk loader system
+      ChunkHolder holder = this.chunkMap.getVisibleChunkIfPresent(p_143240_);
+      return holder != null && holder.isTickingReady();
+      // Paper end - replace player chunk loader system
    }
 
    public void save(boolean p_8420_) {
@@ -296,10 +_,19 @@
       this.chunkMap.saveAllChunks(p_8420_);
    }
 
+   // Paper start - duplicate save, but call incremental
+   public void saveIncrementally() {
+      this.runDistanceManagerUpdates();
+      this.chunkMap.saveIncrementally();
+   }
+   // Paper end
+
    public void close() throws IOException {
-      this.save(true);
-      this.lightEngine.close();
-      this.chunkMap.close();
+      this.close(true);
+   }
+
+   public void close(boolean save) { // Paper - rewrite chunk system
+      this.level.chunkTaskScheduler.chunkHolderManager.close(save, true); // Paper - rewrite chunk system
    }
 
    public void tick(BooleanSupplier p_201913_, boolean p_201914_) {
@@ -308,6 +_,7 @@
       this.runDistanceManagerUpdates();
       this.level.getProfiler().popPush("chunks");
       if (p_201914_) {
+         this.chunkMap.level.playerChunkLoader.tick(); // Paper - replace player chunk loader - this is mostly required to account for view distance changes
          this.tickChunks();
       }
 
@@ -335,33 +_,82 @@
          NaturalSpawner.SpawnState naturalspawner$spawnstate = NaturalSpawner.createState(l, this.level.getAllEntities(), this::getFullChunk, new LocalMobCapCalculator(this.chunkMap));
          this.lastSpawnState = naturalspawner$spawnstate;
          profilerfiller.popPush("filteringLoadedChunks");
-         List<ServerChunkCache.ChunkAndHolder> list = Lists.newArrayListWithCapacity(l);
+         //List<ServerChunkCache.ChunkAndHolder> list = Lists.newArrayListWithCapacity(l);
 
-         for(ChunkHolder chunkholder : this.chunkMap.getChunks()) {
-            LevelChunk levelchunk = chunkholder.getTickingChunk();
-            if (levelchunk != null) {
-               list.add(new ServerChunkCache.ChunkAndHolder(levelchunk, chunkholder));
-            }
-         }
+//         for(ChunkHolder chunkholder : this.chunkMap.getChunks()) {
+//            LevelChunk levelchunk = chunkholder.getTickingChunk();
+//            if (levelchunk != null) {
+//               list.add(new ServerChunkCache.ChunkAndHolder(levelchunk, chunkholder));
+//            }
+//         }
 
          profilerfiller.popPush("spawnAndTick");
          boolean flag2 = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING);
-         Collections.shuffle(list);
-
-         for(ServerChunkCache.ChunkAndHolder serverchunkcache$chunkandholder : list) {
-            LevelChunk levelchunk1 = serverchunkcache$chunkandholder.chunk;
-            ChunkPos chunkpos = levelchunk1.getPos();
-            if (this.level.isNaturalSpawningAllowed(chunkpos) && this.chunkMap.anyPlayerCloseEnoughForSpawning(chunkpos)) {
-               levelchunk1.incrementInhabitedTime(j);
-               if (flag2 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunkpos)) {
-                  NaturalSpawner.spawnForChunk(this.level, levelchunk1, naturalspawner$spawnstate, this.spawnFriendlies, this.spawnEnemies, flag1);
-               }
-
-               if (this.level.shouldTickBlocksAt(chunkpos.toLong())) {
-                  this.level.tickChunk(levelchunk1, k);
-               }
-            }
-         }
+         //Collections.shuffle(list);
+
+         int chunksTicked = 0; // Paper
+         // Paper start - optimise chunk tick iteration
+         io.papermc.paper.util.player.NearbyPlayers nearbyPlayers = this.chunkMap.getNearbyPlayers(); // Paper - optimise chunk tick iteration
+         Iterator<LevelChunk> iterator1;
+         if (false) {
+            iterator1 = this.tickingChunks.iterator();
+         } else {
+            iterator1 = this.tickingChunks.unsafeIterator();
+            List<LevelChunk> shuffled = Lists.newArrayListWithCapacity(this.tickingChunks.size());
+            while (iterator1.hasNext()) {
+               shuffled.add(iterator1.next());
+            }
+            Collections.shuffle(shuffled);
+            iterator1 = shuffled.iterator();
+         }
+
+         try {
+            while (iterator1.hasNext()) {
+               LevelChunk chunk1 = iterator1.next(); // Paper - optimise chunk tick iteration
+               ChunkPos chunkcoordintpair = chunk1.getPos();
+
+               // Paper start - optimise chunk tick iteration
+               com.destroystokyo.paper.util.maplist.ReferenceList<ServerPlayer> playersNearby
+                       = nearbyPlayers.getPlayers(chunkcoordintpair, io.papermc.paper.util.player.NearbyPlayers.NearbyMapType.SPAWN_RANGE);
+               if (playersNearby == null) {
+                  continue;
+               }
+               Object[] rawData = playersNearby.getRawData();
+               boolean spawn = false;
+               boolean tick = false;
+               for (int itr = 0, len = playersNearby.size(); itr < len; ++itr) {
+                  ServerPlayer player = (ServerPlayer)rawData[itr];
+                  if (player.isSpectator()) {
+                     continue;
+                  }
+
+                  double distance = ChunkMap.euclideanDistanceSquared(chunkcoordintpair, player);
+                  spawn |= player.lastEntitySpawnRadiusSquared >= distance;
+                  tick |= ((double)io.papermc.paper.util.player.NearbyPlayers.SPAWN_RANGE_VIEW_DISTANCE_BLOCKS) * ((double)io.papermc.paper.util.player.NearbyPlayers.SPAWN_RANGE_VIEW_DISTANCE_BLOCKS) >= distance;
+                  if (spawn & tick) {
+                     break;
+                  }
+               }
+               // Paper end - optimise chunk tick iteration
+               if (tick && chunk1.chunkStatus.isOrAfter(net.minecraft.server.level.FullChunkStatus.ENTITY_TICKING)) { // Paper - optimise chunk tick iteration
+                  chunk1.incrementInhabitedTime(j);
+                  if (spawn && flag2 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunkcoordintpair)) { // Spigot // Paper - optimise chunk tick iteration
+                     NaturalSpawner.spawnForChunk(this.level, chunk1, naturalspawner$spawnstate, this.spawnFriendlies, this.spawnEnemies, flag1);
+                  }
+
+                  if (true || this.level.shouldTickBlocksAt(chunkcoordintpair.toLong())) { // Paper - optimise chunk tick iteration
+                     this.level.tickChunk(chunk1, k);
+                     if ((chunksTicked++ & 1) == 0) net.minecraft.server.MinecraftServer.getServer().executeMidTickTasks(); // Paper
+                  }
+               }
+         }
+         // Paper start - optimise chunk tick iteration
+         } finally {
+            if (iterator1 instanceof io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet.Iterator safeIterator) {
+               safeIterator.finishedIterating();
+            }
+         }
+         // Paper end - optimise chunk tick iteration
 
          profilerfiller.popPush("customSpawners");
          if (flag2) {
@@ -369,9 +_,22 @@
          }
 
          profilerfiller.popPush("broadcast");
-         list.forEach((p_184022_) -> {
-            p_184022_.holder.broadcastChanges(p_184022_.chunk);
-         });
+         // Paper start - optimise chunk tick iteration
+         if (!this.chunkMap.needsChangeBroadcasting.isEmpty()) {
+            it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<ChunkHolder> copy = this.chunkMap.needsChangeBroadcasting.clone();
+            this.chunkMap.needsChangeBroadcasting.clear();
+            for (ChunkHolder holder : copy) {
+               holder.broadcastChanges(holder.getFullChunkNowUnchecked()); // LevelChunks are NEVER unloaded
+               if (holder.needsBroadcastChanges()) {
+                  // I DON'T want to KNOW what DUMB plugins might be doing.
+                  this.chunkMap.needsChangeBroadcasting.add(holder);
+               }
+            }
+         }
+         // Paper end - optimise chunk tick iteration
+//         list.forEach((p_184022_) -> {
+//            p_184022_.holder.broadcastChanges(p_184022_.chunk);
+//         });
          profilerfiller.pop();
          profilerfiller.pop();
          this.chunkMap.tick();
@@ -381,7 +_,12 @@
    private void getFullChunk(long p_8371_, Consumer<LevelChunk> p_8372_) {
       ChunkHolder chunkholder = this.getVisibleChunkIfPresent(p_8371_);
       if (chunkholder != null) {
-         chunkholder.getFullChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).left().ifPresent(p_8372_);
+         // Paper start - rewrite chunk system
+         LevelChunk chunk = chunkholder.getFullChunk();
+         if (chunk != null) {
+            p_8372_.accept(chunk);
+         }
+         // Paper end - rewrite chunk system
       }
 
    }
@@ -432,11 +_,17 @@
    }
 
    public <T> void addRegionTicket(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_) {
-      this.distanceManager.addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_);
+      addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_, false);
+   }
+   public <T> void addRegionTicket(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_, boolean forceTicks) {
+      this.distanceManager.addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_); // Goldenforge todo: forceTicks
    }
 
    public <T> void removeRegionTicket(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_) {
-      this.distanceManager.removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_);
+      removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_, false);
+   }
+   public <T> void removeRegionTicket(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_, boolean forceTicks) {
+      this.distanceManager.removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_); // Goldenforge todo: forceTicks
    }
 
    public void updateChunkForced(ChunkPos p_8400_, boolean p_8401_) {
@@ -537,10 +_,8 @@
       public boolean pollTask() {
          if (ServerChunkCache.this.runDistanceManagerUpdates()) {
             return true;
-         } else {
-            ServerChunkCache.this.lightEngine.tryScheduleUpdate();
-            return super.pollTask();
          }
+         return super.pollTask() | ServerChunkCache.this.level.chunkTaskScheduler.executeMainThreadTask(); // Paper - rewrite chunk system
       }
    }
 }
