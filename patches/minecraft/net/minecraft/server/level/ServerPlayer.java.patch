--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -1,13 +_,12 @@
 package net.minecraft.server.level;
 
+import com.google.common.base.Preconditions;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Either;
 import com.mojang.logging.LogUtils;
-import java.util.Collection;
-import java.util.List;
-import java.util.Optional;
-import java.util.OptionalInt;
+
+import java.util.*;
 import javax.annotation.Nullable;
 import net.minecraft.BlockUtil;
 import net.minecraft.ChatFormatting;
@@ -88,6 +_,7 @@
 import net.minecraft.world.Container;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.MenuProvider;
+import net.minecraft.world.damagesource.CombatTracker;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.damagesource.EntityDamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
@@ -106,6 +_,7 @@
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.player.ProfilePublicKey;
 import net.minecraft.world.entity.projectile.AbstractArrow;
+import net.minecraft.world.food.FoodData;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.ContainerListener;
 import net.minecraft.world.inventory.ContainerSynchronizer;
@@ -146,6 +_,7 @@
 
 public class ServerPlayer extends Player {
    private static final Logger f_8907_ = LogUtils.getLogger();
+   public long lastSave = MinecraftServer.currentTick; // Paper
    private static final int f_143381_ = 32;
    private static final int f_143382_ = 10;
    public ServerGamePacketListenerImpl f_8906_;
@@ -191,6 +_,14 @@
    private final TextFilter f_8939_;
    private boolean f_143378_;
    private boolean f_184127_ = true;
+
+   public boolean isRealPlayer; // Paper - chunk priority
+   public double lastEntitySpawnRadiusSquared; // Paper - optimise isOutsideRange, this field is in blocks
+   public int newExp = 0;
+   public int newLevel = 0;
+   public int newTotalExp = 0;
+   public boolean keepLevel = false;
+
    private final ContainerSynchronizer f_143379_ = new ContainerSynchronizer() {
       public void m_142589_(AbstractContainerMenu p_143448_, NonNullList<ItemStack> p_143449_, ItemStack p_143450_, int[] p_143451_) {
          ServerPlayer.this.f_8906_.m_9829_(new ClientboundContainerSetContentPacket(p_143448_.f_38840_, p_143448_.m_182425_(), p_143449_, p_143450_));
@@ -234,6 +_,87 @@
    public int f_8940_;
    public int f_8943_;
    public boolean f_8944_;
+   public final com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> cachedSingleHashSet; // Paper
+   // Paper start - mob spawning rework
+   public static final int MOBCATEGORY_TOTAL_ENUMS = net.minecraft.world.entity.MobCategory.values().length;
+   public final int[] mobCounts = new int[MOBCATEGORY_TOTAL_ENUMS]; // Paper
+   public final com.destroystokyo.paper.util.PooledHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> cachedSingleMobDistanceMap;
+   public boolean joining = true;
+   @Override
+   public boolean m_6107_() {
+      return super.m_6107_() || (this.f_8906_ != null && this.f_8906_.isDisconnected()); // Paper
+   }
+   // Paper end
+
+   private final java.util.concurrent.atomic.AtomicReference<io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances> viewDistances = new java.util.concurrent.atomic.AtomicReference<>(new io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances(-1, -1, -1));
+   public io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.PlayerChunkLoaderData chunkLoader;
+
+   public io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances getViewDistances() {
+      return this.viewDistances.get();
+   }
+
+   private void updateViewDistance(final java.util.function.Function<io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances, io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances> update) {
+      for (io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances curr = this.viewDistances.get();;) {
+         if (this.viewDistances.compareAndSet(curr, update.apply(curr))) {
+            return;
+         }
+      }
+   }
+
+   public void setTickViewDistance(final int distance) {
+      if ((distance < io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MIN_VIEW_DISTANCE || distance > io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MAX_VIEW_DISTANCE)) {
+         throw new IllegalArgumentException("Tick view distance must be a number between " + io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MIN_VIEW_DISTANCE + " and " + (io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MAX_VIEW_DISTANCE) + ", got: " + distance);
+      }
+      this.updateViewDistance((input) -> {
+         return input.setTickViewDistance(distance);
+      });
+   }
+
+   public void setLoadViewDistance(final int distance) {
+      if (distance != -1 && (distance < io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MIN_VIEW_DISTANCE || distance > io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MAX_VIEW_DISTANCE + 1)) {
+         throw new IllegalArgumentException("Load view distance must be a number between " + io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MIN_VIEW_DISTANCE + " and " + (io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MAX_VIEW_DISTANCE + 1) + " or -1, got: " + distance);
+      }
+      this.updateViewDistance((input) -> {
+         return input.setLoadViewDistance(distance);
+      });
+   }
+
+   public void setSendViewDistance(final int distance) {
+      if (distance != -1 && (distance < io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MIN_VIEW_DISTANCE || distance > io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MAX_VIEW_DISTANCE + 1)) {
+         throw new IllegalArgumentException("Send view distance must be a number between " + io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MIN_VIEW_DISTANCE + " and " + (io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.MAX_VIEW_DISTANCE + 1) + " or -1, got: " + distance);
+      }
+      this.updateViewDistance((input) -> {
+         return input.setSendViewDistance(distance);
+      });
+   }
+
+   // Goldenforge API
+//   public boolean teleport(Location location) {
+//      // Paper end
+//      Preconditions.checkArgument(location != null, "location cannot be null");
+//      location.checkFinite();
+//      // Don't allow teleporting between worlds while keeping passengers
+//      if (this.isVehicle() && location.getWorld() != this.level) {
+//         return false;
+//      }
+//
+//      // If this entity is riding another entity, we must dismount before teleporting.
+//      this.stopRiding(); // Paper - Teleport passenger API
+//
+//      // Let the server handle cross world teleports
+//      if (location.getWorld() != null && !location.getWorld().equals(this.level)) {
+//         // Prevent teleportation to an other world during world generation
+//         //Preconditions.checkState(!generation, "Cannot teleport entity to an other world during world generation");
+//         this.teleportTo(((ServerLevel) location.getWorld()), location.getX(), location.getY(), location.getZ(), yRot, xRot);
+//         return true;
+//      }
+//
+//      // entity.setLocation() throws no event, and so cannot be cancelled
+//      moveTo(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch()); // Paper - use proper moveTo, as per vanilla teleporting
+//
+//      return true;
+//   }
+   // Goldenforge end
 
    public ServerPlayer(MinecraftServer p_215088_, ServerLevel p_215089_, GameProfile p_215090_, @Nullable ProfilePublicKey p_215091_) {
       super(p_215089_, p_215089_.m_220360_(), p_215089_.m_220361_(), p_215090_, p_215091_);
@@ -243,10 +_,51 @@
       this.f_8910_ = p_215088_.m_6846_().m_11239_(this);
       this.f_8909_ = p_215088_.m_6846_().m_11296_(this);
       this.f_19793_ = 1.0F;
-      this.m_9201_(p_215089_);
-   }
-
-   private void m_9201_(ServerLevel p_9202_) {
+      //this.fudgeSpawnLocation(p_215089_); // Paper - don't move to spawn on login, only first join
+      this.cachedSingleHashSet = new com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<>(this); // Paper
+      this.cachedSingleMobDistanceMap = new com.destroystokyo.paper.util.PooledHashSets.PooledObjectLinkedOpenHashSet<>(this); // Paper
+   }
+
+   // Yes, this doesn't match Vanilla, but it's the best we can do for now.
+   // If this is an issue, PRs are welcome
+   public final BlockPos getSpawnPoint(ServerLevel worldserver) {
+      BlockPos blockposition = worldserver.m_220360_();
+
+      if (worldserver.m_6042_().f_223549_() && worldserver.f_8549_.m_5464_() != GameType.ADVENTURE) {
+         int i = Math.max(0, this.f_8924_.m_129803_(worldserver));
+         int j = Mth.m_14107_(worldserver.m_6857_().m_61941_((double) blockposition.m_123341_(), (double) blockposition.m_123343_()));
+
+         if (j < i) {
+            i = j;
+         }
+
+         if (j <= 1) {
+            i = 1;
+         }
+
+         long k = (long) (i * 2 + 1);
+         long l = k * k;
+         int i1 = l > 2147483647L ? Integer.MAX_VALUE : (int) l;
+         int j1 = this.m_9237_(i1);
+         int k1 = RandomSource.m_216327_().m_188503_(i1);
+
+         for (int l1 = 0; l1 < i1; ++l1) {
+            int i2 = (k1 + j1 * l1) % i1;
+            int j2 = i2 % (i * 2 + 1);
+            int k2 = i2 / (i * 2 + 1);
+            BlockPos blockposition1 = PlayerRespawnLogic.m_183928_(worldserver, blockposition.m_123341_() + j2 - i, blockposition.m_123343_() + k2 - i);
+
+            if (blockposition1 != null) {
+               return blockposition1;
+            }
+         }
+      }
+
+      return blockposition;
+   }
+   // CraftBukkit end
+
+   public void m_9201_(ServerLevel p_9202_) {
       BlockPos blockpos = p_9202_.m_220360_();
       if (p_9202_.m_6042_().f_223549_() && p_9202_.m_7654_().m_129910_().m_5464_() != GameType.ADVENTURE) {
          int i = Math.max(0, this.f_8924_.m_129803_(p_9202_));
@@ -272,7 +_,7 @@
             BlockPos blockpos1 = PlayerRespawnLogic.m_183928_(p_9202_, blockpos.m_123341_() + j2 - i, blockpos.m_123343_() + k2 - i);
             if (blockpos1 != null) {
                this.m_20035_(blockpos1, 0.0F, 0.0F);
-               if (p_9202_.m_45786_(this)) {
+               if (p_9202_.noCollision(this, this.m_20191_(), true)) { // Paper - make sure this loads chunks, we default to NOT loading now
                   break;
                }
             }
@@ -280,7 +_,7 @@
       } else {
          this.m_20035_(blockpos, 0.0F, 0.0F);
 
-         while(!p_9202_.m_45786_(this) && this.m_20186_() < (double)(p_9202_.m_151558_() - 1)) {
+         while(!p_9202_.noCollision(this, this.m_20191_(), true) && this.m_20186_() < (double)(p_9202_.m_151558_() - 1)) { // Paper - make sure this loads chunks, we default to NOT loading now
             this.m_6034_(this.m_20185_(), this.m_20186_() + 1.0D, this.m_20189_());
          }
       }
@@ -356,6 +_,29 @@
 
    }
 
+   // CraftBukkit start - World fallback code, either respawn location or global spawn
+   public void spawnIn(ServerLevel world) {
+      this.m_143425_(world);
+      if (world == null) {
+         this.revive();
+         Vec3 position = null;
+         if (this.f_8935_ != null) {
+            world = this.f_8924_.m_129880_(this.f_8935_);
+            if (world != null && this.m_8961_() != null) {
+               position = Player.m_36130_((ServerLevel) world, this.m_8961_(), this.m_8962_(), false, false).orElse(null);
+            }
+         }
+         if (world == null || position == null) {
+            world = MinecraftServer.getServer().m_129783_();
+            position = Vec3.m_82512_(world.m_220360_());
+         }
+         this.m_143425_(world);
+         this.m_20343_(position.m_7096_(), position.m_7098_(), position.m_7094_()); // Paper - don't register to chunks yet
+      }
+      this.f_8941_.m_9260_((ServerLevel) world);
+   }
+   // CraftBukkit end
+
    public void m_8985_(int p_8986_) {
       float f = (float)this.m_36323_();
       float f1 = (f - 1.0F) / f;
@@ -406,6 +_,11 @@
    }
 
    public void m_8119_() {
+      // CraftBukkit start
+      if (this.joining) {
+         this.joining = false;
+      }
+      // CraftBukkit end
       this.f_8941_.m_7712_();
       --this.f_8921_;
       if (this.f_19802_ > 0) {
@@ -443,7 +_,7 @@
 
    public void m_9240_() {
       try {
-         if (!this.m_5833_() || !this.m_146899_()) {
+         if (isValid && !this.m_5833_() || !this.m_146899_()) { // Paper - don't tick dead players that are not in the world currently (pending respawn)
             super.m_8119_();
          }
 
@@ -550,7 +_,10 @@
 
    public void m_6667_(DamageSource p_9035_) {
       this.m_146850_(GameEvent.f_223707_);
+      if (net.minecraftforge.common.ForgeHooks.onLivingDeath(this, p_9035_)) return;
       boolean flag = this.f_19853_.m_46469_().m_46207_(GameRules.f_46142_);
+      boolean keepInventory = this.f_19853_.m_46469_().m_46207_(GameRules.f_46133_) || this.m_5833_();
+      this.keepLevel = keepInventory; // SPIGOT-2222: pre-set keepLevel
       if (flag) {
          Component component = this.m_21231_().m_19293_();
          this.f_8906_.m_243119_(new ClientboundPlayerCombatKillPacket(this.m_21231_(), component), PacketSendListener.m_243073_(() -> {
@@ -692,11 +_,12 @@
    }
 
    @Nullable
-   public Entity m_5489_(ServerLevel p_9180_) {
+   public Entity changeDimension(ServerLevel p_9180_, net.minecraftforge.common.util.ITeleporter teleporter) {
+      if (!net.minecraftforge.common.ForgeHooks.onTravelToDimension(this, p_9180_.m_46472_())) return null;
       this.f_8927_ = true;
       ServerLevel serverlevel = this.m_9236_();
       ResourceKey<Level> resourcekey = serverlevel.m_46472_();
-      if (resourcekey == Level.f_46430_ && p_9180_.m_46472_() == Level.f_46428_) {
+      if (resourcekey == Level.f_46430_ && p_9180_.m_46472_() == Level.f_46428_ && teleporter.isVanilla()) { //Forge: Fix non-vanilla teleporters triggering end credits
          this.m_19877_();
          this.m_9236_().m_143261_(this, Entity.RemovalReason.CHANGED_DIMENSION);
          if (!this.f_8944_) {
@@ -713,13 +_,14 @@
          PlayerList playerlist = this.f_8924_.m_6846_();
          playerlist.m_11289_(this);
          serverlevel.m_143261_(this, Entity.RemovalReason.CHANGED_DIMENSION);
-         this.m_146912_();
-         PortalInfo portalinfo = this.m_7937_(p_9180_);
+         this.revive();
+         PortalInfo portalinfo = teleporter.getPortalInfo(this, p_9180_, this::m_7937_);
          if (portalinfo != null) {
+            Entity e = teleporter.placeEntity(this, serverlevel, p_9180_, this.m_146908_(), spawnPortal -> {//Forge: Start vanilla logic
             serverlevel.m_46473_().m_6180_("moving");
             if (resourcekey == Level.f_46428_ && p_9180_.m_46472_() == Level.f_46429_) {
                this.f_8933_ = this.m_20182_();
-            } else if (p_9180_.m_46472_() == Level.f_46430_) {
+            } else if (spawnPortal && p_9180_.m_46472_() == Level.f_46430_) {
                this.m_9006_(p_9180_, new BlockPos(portalinfo.f_77676_));
             }
 
@@ -731,6 +_,9 @@
             this.m_6027_(portalinfo.f_77676_.f_82479_, portalinfo.f_77676_.f_82480_, portalinfo.f_77676_.f_82481_);
             serverlevel.m_46473_().m_7238_();
             this.m_9209_(serverlevel);
+            return this;//forge: this is part of the ITeleporter patch
+            });//Forge: End vanilla logic
+            if (e != this) throw new java.lang.IllegalArgumentException(String.format(java.util.Locale.ENGLISH, "Teleporter %s returned not the player entity but instead %s, expected PlayerEntity %s", teleporter, e, this));
             this.f_8906_.m_9829_(new ClientboundPlayerAbilitiesPacket(this.m_150110_()));
             playerlist.m_11229_(this, p_9180_);
             playerlist.m_11292_(this);
@@ -739,10 +_,12 @@
                this.f_8906_.m_9829_(new ClientboundUpdateMobEffectPacket(this.m_19879_(), mobeffectinstance));
             }
 
+            if (teleporter.playTeleportSound(this, serverlevel, p_9180_))
             this.f_8906_.m_9829_(new ClientboundLevelEventPacket(1032, BlockPos.f_121853_, 0, false));
             this.f_8920_ = -1;
             this.f_8917_ = -1.0F;
             this.f_8918_ = -1;
+            net.minecraftforge.event.ForgeEventFactory.firePlayerChangedDimensionEvent(this, resourcekey, p_9180_.m_46472_());
          }
 
          return this;
@@ -778,7 +_,7 @@
       }
    }
 
-   private void m_9209_(ServerLevel p_9210_) {
+   public void m_9209_(ServerLevel p_9210_) {
       ResourceKey<Level> resourcekey = p_9210_.m_46472_();
       ResourceKey<Level> resourcekey1 = this.f_19853_.m_46472_();
       CriteriaTriggers.f_10588_.m_19757_(this, resourcekey, resourcekey1);
@@ -806,6 +_,9 @@
    }
 
    public Either<Player.BedSleepingProblem, Unit> m_7720_(BlockPos p_9115_) {
+      java.util.Optional<BlockPos> optAt = java.util.Optional.of(p_9115_);
+      Player.BedSleepingProblem ret = net.minecraftforge.event.ForgeEventFactory.onPlayerSleepInBed(this, optAt);
+      if (ret != null) return Either.left(ret);
       Direction direction = this.f_19853_.m_8055_(p_9115_).m_61143_(HorizontalDirectionalBlock.f_54117_);
       if (!this.m_5803_() && this.m_6084_()) {
          if (!this.f_19853_.m_6042_().f_63858_()) {
@@ -816,7 +_,7 @@
             return Either.left(Player.BedSleepingProblem.OBSTRUCTED);
          } else {
             this.m_9158_(this.f_19853_.m_46472_(), p_9115_, this.m_146908_(), false, true);
-            if (this.f_19853_.m_46461_()) {
+            if (!net.minecraftforge.event.ForgeEventFactory.fireSleepingTimeCheck(this, optAt)) {
                return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_NOW);
             } else {
                if (!this.m_7500_()) {
@@ -854,6 +_,7 @@
    }
 
    private boolean m_9116_(BlockPos p_9117_, Direction p_9118_) {
+      if (p_9118_ == null) return false;
       return this.m_9222_(p_9117_) || this.m_9222_(p_9117_.m_121945_(p_9118_.m_122424_()));
    }
 
@@ -962,6 +_,7 @@
             this.f_8906_.m_9829_(new ClientboundOpenScreenPacket(abstractcontainermenu.f_38840_, abstractcontainermenu.m_6772_(), p_9033_.m_5446_()));
             this.m_143399_(abstractcontainermenu);
             this.f_36096_ = abstractcontainermenu;
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.player.PlayerContainerEvent.Open(this, this.f_36096_));
             return OptionalInt.of(this.f_8940_);
          }
       }
@@ -980,6 +_,7 @@
       this.f_8906_.m_9829_(new ClientboundHorseScreenOpenPacket(this.f_8940_, p_9060_.m_6643_(), p_9059_.m_19879_()));
       this.f_36096_ = new HorseInventoryMenu(this.f_8940_, this.m_150109_(), p_9060_, p_9059_);
       this.m_143399_(this.f_36096_);
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.player.PlayerContainerEvent.Open(this, this.f_36096_));
    }
 
    public void m_6986_(ItemStack p_9082_, InteractionHand p_9083_) {
@@ -1005,6 +_,7 @@
    public void m_9230_() {
       this.f_36096_.m_6877_(this);
       this.f_36095_.m_150414_(this.f_36096_);
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.player.PlayerContainerEvent.Close(this, this.f_36096_));
       this.f_36096_ = this.f_36095_;
    }
 
@@ -1125,12 +_,21 @@
       this.f_8920_ = -1;
       this.f_8917_ = -1.0F;
       this.f_8918_ = -1;
-      this.f_8929_.m_12685_(p_9016_.f_8929_);
+      //this.recipeBook.copyOverData(p_9016_.recipeBook);
       this.f_8928_ = p_9016_.f_8928_;
       this.f_8933_ = p_9016_.f_8933_;
       this.m_36362_(p_9016_.m_36331_());
       this.m_36364_(p_9016_.m_36332_());
       this.m_219749_(p_9016_.m_219759_());
+
+      //Copy over a section of the Entity Data from the old player.
+      //Allows mods to specify data that persists after players respawn.
+      CompoundTag old = p_9016_.getPersistentData();
+      if (old.m_128441_(PERSISTED_NBT_TAG))
+          getPersistentData().m_128365_(PERSISTED_NBT_TAG, old.m_128423_(PERSISTED_NBT_TAG));
+      net.minecraftforge.event.ForgeEventFactory.onPlayerClone(this, p_9016_, !p_9017_);
+      this.tabListHeader = p_9016_.tabListHeader;
+      this.tabListFooter = p_9016_.tabListFooter;
    }
 
    protected void m_142540_(MobEffectInstance p_143393_, @Nullable Entity p_143394_) {
@@ -1189,6 +_,8 @@
    }
 
    public boolean m_143403_(GameType p_143404_) {
+      p_143404_ = net.minecraftforge.common.ForgeHooks.onChangeGameType(this, this.f_8941_.m_9290_(), p_143404_);
+      if (p_143404_ == null) return false;
       if (!this.f_8941_.m_143473_(p_143404_)) {
          return false;
       } else {
@@ -1253,6 +_,7 @@
       return s.substring(0, s.indexOf(":"));
    }
 
+   public Integer clientViewDistance;
    public void m_9156_(ServerboundClientInformationPacket p_9157_) {
       this.f_8922_ = p_9157_.f_133865_();
       this.f_8923_ = p_9157_.f_133866_();
@@ -1260,6 +_,8 @@
       this.f_184127_ = p_9157_.f_195812_();
       this.m_20088_().m_135381_(f_36089_, (byte)p_9157_.f_133867_());
       this.m_20088_().m_135381_(f_36090_, (byte)(p_9157_.f_133868_() == HumanoidArm.LEFT ? 0 : 1));
+      this.language = p_9157_.f_133863_();
+      this.clientViewDistance = p_9157_.f_133864_();
    }
 
    public boolean m_143432_() {
@@ -1319,6 +_,7 @@
    public void m_9213_(@Nullable Entity p_9214_) {
       Entity entity = this.m_8954_();
       this.f_8926_ = (Entity)(p_9214_ == null ? this : p_9214_);
+      while (this.f_8926_ instanceof net.minecraftforge.entity.PartEntity<?> partEntity) this.f_8926_ = partEntity.getParent(); // FORGE: fix MC-46486
       if (entity != this.f_8926_) {
          this.f_8906_.m_9829_(new ClientboundSetCameraPacket(this.f_8926_));
          this.m_6021_(this.f_8926_.m_20185_(), this.f_8926_.m_20186_(), this.f_8926_.m_20189_());
@@ -1348,7 +_,11 @@
 
    @Nullable
    public Component m_8957_() {
-      return null;
+      if (!this.hasTabListName) {
+         this.tabListDisplayName = net.minecraftforge.event.ForgeEventFactory.getPlayerTabListDisplayName(this);
+         this.hasTabListName = true;
+      }
+      return this.tabListDisplayName;
    }
 
    public void m_6674_(InteractionHand p_9031_) {
@@ -1373,21 +_,23 @@
       this.m_8127_();
       if (p_9000_ == this.f_19853_) {
          this.f_8906_.m_9774_(p_9001_, p_9002_, p_9003_, p_9004_, p_9005_);
-      } else {
+      } else if (net.minecraftforge.common.ForgeHooks.onTravelToDimension(this, p_9000_.m_46472_())) {
          ServerLevel serverlevel = this.m_9236_();
          LevelData leveldata = p_9000_.m_6106_();
          this.f_8906_.m_9829_(new ClientboundRespawnPacket(p_9000_.m_220362_(), p_9000_.m_46472_(), BiomeManager.m_47877_(p_9000_.m_7328_()), this.f_8941_.m_9290_(), this.f_8941_.m_9293_(), p_9000_.m_46659_(), p_9000_.m_8584_(), true, this.m_219759_()));
          this.f_8906_.m_9829_(new ClientboundChangeDifficultyPacket(leveldata.m_5472_(), leveldata.m_5474_()));
          this.f_8924_.m_6846_().m_11289_(this);
          serverlevel.m_143261_(this, Entity.RemovalReason.CHANGED_DIMENSION);
-         this.m_146912_();
+         this.revive();
          this.m_7678_(p_9001_, p_9002_, p_9003_, p_9004_, p_9005_);
          this.m_143425_(p_9000_);
          p_9000_.m_8622_(this);
          this.m_9209_(serverlevel);
          this.f_8906_.m_9774_(p_9001_, p_9002_, p_9003_, p_9004_, p_9005_);
+         this.f_8941_.m_9260_(p_9000_);
          this.f_8924_.m_6846_().m_11229_(this, p_9000_);
          this.f_8924_.m_6846_().m_11292_(this);
+         net.minecraftforge.event.ForgeEventFactory.firePlayerChangedDimensionEvent(this, serverlevel.m_46472_(), p_9000_.m_46472_());
       }
 
    }
@@ -1409,7 +_,13 @@
       return this.f_8937_;
    }
 
+   public void forceSetPositionRotation(double x, double y, double z, float yaw, float pitch) {
+      this.m_7678_(x, y, z, yaw, pitch);
+      this.f_8906_.m_9953_();
+   }
+
    public void m_9158_(ResourceKey<Level> p_9159_, @Nullable BlockPos p_9160_, float p_9161_, boolean p_9162_, boolean p_9163_) {
+      if (net.minecraftforge.event.ForgeEventFactory.onPlayerSpawnSet(this, p_9160_ == null ? Level.f_46428_ : p_9159_, p_9160_, p_9162_)) return;
       if (p_9160_ != null) {
          boolean flag = p_9160_.equals(this.f_8936_) && p_9159_.equals(this.f_8935_);
          if (p_9163_ && !flag) {
@@ -1440,6 +_,43 @@
 
    }
 
+   public void reset() {
+      float exp = 0;
+      boolean keepInventory = this.f_19853_.m_46469_().m_46207_(GameRules.f_46133_);
+
+      if (this.keepLevel) { // CraftBukkit - SPIGOT-6687: Only use keepLevel (was pre-set with RULE_KEEPINVENTORY value in PlayerDeathEvent)
+         exp = this.f_36080_;
+         this.newTotalExp = this.f_36079_;
+         this.newLevel = this.f_36078_;
+      }
+
+      this.m_21153_(this.m_21233_());
+      this.m_5810_(); // CraftBukkit - SPIGOT-6682: Clear active item on reset
+      this.m_20301_(this.m_6062_()); // Paper
+      this.m_7311_(0);
+      this.f_19789_ = 0;
+      this.f_36097_ = new FoodData();
+      this.f_36078_ = this.newLevel;
+      this.f_36079_ = this.newTotalExp;
+      this.f_36080_ = 0;
+      this.f_20919_ = 0;
+      this.m_21317_(0); // CraftBukkit - ArrowBodyCountChangeEvent
+      this.m_21219_();
+      this.f_20948_ = true;
+      this.f_36096_ = this.f_36095_;
+      this.f_20888_ = null;
+      this.f_20949_ = null;
+      this.f_20944_ = new CombatTracker(this);
+      this.f_8920_ = -1;
+      if (this.keepLevel) { // CraftBukkit - SPIGOT-6687: Only use keepLevel (was pre-set with RULE_KEEPINVENTORY value in PlayerDeathEvent)
+         this.f_36080_ = exp;
+      } else {
+         this.m_6756_(this.newExp);
+      }
+      this.keepLevel = false;
+      this.m_20334_(0, 0, 0); // CraftBukkit - SPIGOT-6948: Reset velocity on death
+   }
+
    public SectionPos m_8965_() {
       return this.f_8934_;
    }
@@ -1461,6 +_,8 @@
       if (itementity == null) {
          return null;
       } else {
+         if (captureDrops() != null) captureDrops().add(itementity);
+         else
          this.f_19853_.m_7967_(itementity);
          ItemStack itemstack = itementity.m_32055_();
          if (p_9087_) {
@@ -1475,6 +_,76 @@
       }
    }
 
+   private String language = "en_us";
+   /**
+    * Returns the language last reported by the player as their local language.
+    * Defaults to en_us if the value is unknown.
+    */
+   public String getLanguage() {
+      return this.language;
+   }
+
+   private Component tabListHeader = Component.m_237119_();
+   private Component tabListFooter = Component.m_237119_();
+
+   public Component getTabListHeader() {
+       return this.tabListHeader;
+   }
+
+   /**
+    * Set the tab list header while preserving the footer.
+    *
+    * @param header the new header, or {@link Component#empty()} to clear
+    */
+   public void setTabListHeader(final Component header) {
+       this.setTabListHeaderFooter(header, this.tabListFooter);
+   }
+
+   public Component getTabListFooter() {
+       return this.tabListFooter;
+   }
+
+   /**
+    * Set the tab list footer while preserving the header.
+    *
+    * @param footer the new footer, or {@link Component#empty()} to clear
+    */
+   public void setTabListFooter(final Component footer) {
+       this.setTabListHeaderFooter(this.tabListHeader, footer);
+   }
+
+   /**
+    * Set the tab list header and footer at once.
+    *
+    * @param header the new header, or {@link Component#empty()} to clear
+    * @param footer the new footer, or {@link Component#empty()} to clear
+    */
+   public void setTabListHeaderFooter(final Component header, final Component footer) {
+       if (java.util.Objects.equals(header, this.tabListHeader)
+           && java.util.Objects.equals(footer, this.tabListFooter)) {
+           return;
+       }
+
+       this.tabListHeader = java.util.Objects.requireNonNull(header, "header");
+       this.tabListFooter = java.util.Objects.requireNonNull(footer, "footer");
+
+       this.f_8906_.m_9829_(new net.minecraft.network.protocol.game.ClientboundTabListPacket(header, footer));
+   }
+
+   // We need this as tablistDisplayname may be null even if the the event was fired.
+   private boolean hasTabListName = false;
+   private Component tabListDisplayName = null;
+   /**
+    * Force the name displayed in the tab list to refresh, by firing {@link net.minecraftforge.event.entity.player.PlayerEvent.TabListNameFormat}.
+    */
+   public void refreshTabListName() {
+      Component oldName = this.tabListDisplayName;
+      this.tabListDisplayName = net.minecraftforge.event.ForgeEventFactory.getPlayerTabListDisplayName(this);
+      if (!java.util.Objects.equals(oldName, this.tabListDisplayName)) {
+         this.m_20194_().m_6846_().m_11268_(new net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket(net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket.Action.UPDATE_DISPLAY_NAME, this));
+      }
+   }
+
    public TextFilter m_8967_() {
       return this.f_8939_;
    }
@@ -1534,11 +_,13 @@
 
    public boolean m_182294_(boolean p_182295_) {
       Inventory inventory = this.m_150109_();
+      ItemStack selected = inventory.m_36056_();
+      if (selected.m_41619_() || !selected.onDroppedByPlayer(this)) return false;
       ItemStack itemstack = inventory.m_182403_(p_182295_);
       this.f_36096_.m_182417_(inventory, inventory.f_35977_).ifPresent((p_182293_) -> {
          this.f_36096_.m_150404_(p_182293_, inventory.m_36056_());
       });
-      return this.m_7197_(itemstack, false, true) != null;
+      return net.minecraftforge.common.ForgeHooks.onPlayerTossEvent(this, itemstack, true) != null;
    }
 
    public boolean m_184128_() {
