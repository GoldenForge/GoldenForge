--- a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -38,6 +_,7 @@
 import net.minecraft.util.SignatureValidator;
 import net.minecraft.world.entity.player.ProfilePublicKey;
 import org.apache.commons.lang3.Validate;
+import org.goldenforge.VelocityProxy;
 import org.slf4j.Logger;
 
 public class ServerLoginPacketListenerImpl implements TickablePacketListener, ServerLoginPacketListener {
@@ -58,6 +_,8 @@
    @Nullable
    private ProfilePublicKey.Data f_240234_;
 
+   private int velocityLoginMessageId = -1; // Paper - Velocity support
+
    public ServerLoginPacketListenerImpl(MinecraftServer p_10027_, Connection p_10028_) {
       this.f_10018_ = p_10027_;
       this.f_10013_ = p_10028_;
@@ -65,7 +_,16 @@
    }
 
    public void m_9933_() {
-      if (this.f_10019_ == ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT) {
+//      System.out.println(this.gameProfile.getId());
+//      System.out.println(this.state);
+      if (this.f_10019_ == State.NEGOTIATING) {
+         // We force the state into "NEGOTIATING" which is otherwise unused. Once we're completed we move the negotiation onto "READY_TO_ACCEPT"
+         // Might want to promote player object creation to here as well..
+
+         boolean negotiationComplete = net.minecraftforge.network.NetworkHooks.tickNegotiation(this, this.f_10013_, this.f_10024_);
+         if (negotiationComplete)
+            this.f_10019_ = State.READY_TO_ACCEPT;
+      } else if (this.f_10019_ == ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT) {
          this.m_10055_();
       } else if (this.f_10019_ == ServerLoginPacketListenerImpl.State.DELAY_ACCEPT) {
          ServerPlayer serverplayer = this.f_10018_.m_6846_().m_11259_(this.f_10021_.getId());
@@ -97,6 +_,7 @@
 
    }
 
+
    public void m_10055_() {
       ProfilePublicKey profilepublickey = null;
       if (!this.f_10021_.isComplete()) {
@@ -178,14 +_,24 @@
       GameProfile gameprofile = this.f_10018_.m_236731_();
       if (gameprofile != null && p_10047_.f_238040_().equalsIgnoreCase(gameprofile.getName())) {
          this.f_10021_ = gameprofile;
-         this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+         this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
       } else {
          this.f_10021_ = new GameProfile((UUID)null, p_10047_.f_238040_());
          if (this.f_10018_.m_129797_() && !this.f_10013_.m_129531_()) {
             this.f_10019_ = ServerLoginPacketListenerImpl.State.KEY;
             this.f_10013_.m_129512_(new ClientboundHelloPacket("", this.f_10018_.m_129790_().getPublic().getEncoded(), this.f_10017_));
          } else {
-            this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+            // Paper start - Velocity support
+            if (true) {
+               this.velocityLoginMessageId = java.util.concurrent.ThreadLocalRandom.current().nextInt();
+               net.minecraft.network.FriendlyByteBuf buf = new net.minecraft.network.FriendlyByteBuf(io.netty.buffer.Unpooled.buffer());
+               buf.writeByte(VelocityProxy.MAX_SUPPORTED_FORWARDING_VERSION);
+               net.minecraft.network.protocol.login.ClientboundCustomQueryPacket packet1 = new net.minecraft.network.protocol.login.ClientboundCustomQueryPacket(this.velocityLoginMessageId, VelocityProxy.PLAYER_INFO_CHANNEL, buf);
+               this.f_10013_.m_129512_(packet1);
+               return;
+            }
+            // Paper end
+            this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
          }
 
       }
@@ -222,7 +_,7 @@
          throw new IllegalStateException("Protocol error", cryptexception);
       }
 
-      Thread thread = new Thread("User Authenticator #" + f_10014_.incrementAndGet()) {
+      Thread thread = new Thread(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER, "User Authenticator #" + f_10014_.incrementAndGet()) {
          public void run() {
             GameProfile gameprofile = ServerLoginPacketListenerImpl.this.f_10021_;
 
@@ -230,11 +_,11 @@
                ServerLoginPacketListenerImpl.this.f_10021_ = ServerLoginPacketListenerImpl.this.f_10018_.m_129925_().hasJoinedServer(new GameProfile((UUID)null, gameprofile.getName()), s, this.m_10064_());
                if (ServerLoginPacketListenerImpl.this.f_10021_ != null) {
                   ServerLoginPacketListenerImpl.f_10015_.info("UUID of player {} is {}", ServerLoginPacketListenerImpl.this.f_10021_.getName(), ServerLoginPacketListenerImpl.this.f_10021_.getId());
-                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
                } else if (ServerLoginPacketListenerImpl.this.f_10018_.m_129792_()) {
                   ServerLoginPacketListenerImpl.f_10015_.warn("Failed to verify username but will let them in anyway!");
                   ServerLoginPacketListenerImpl.this.f_10021_ = gameprofile;
-                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
                } else {
                   ServerLoginPacketListenerImpl.this.m_10053_(Component.m_237115_("multiplayer.disconnect.unverified_username"));
                   ServerLoginPacketListenerImpl.f_10015_.error("Username '{}' tried to join with an invalid session", (Object)gameprofile.getName());
@@ -243,7 +_,7 @@
                if (ServerLoginPacketListenerImpl.this.f_10018_.m_129792_()) {
                   ServerLoginPacketListenerImpl.f_10015_.warn("Authentication servers are down but will let them in anyway!");
                   ServerLoginPacketListenerImpl.this.f_10021_ = gameprofile;
-                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
                } else {
                   ServerLoginPacketListenerImpl.this.m_10053_(Component.m_237115_("multiplayer.disconnect.authservers_down"));
                   ServerLoginPacketListenerImpl.f_10015_.error("Couldn't verify username because servers are unavailable");
@@ -263,7 +_,37 @@
    }
 
    public void m_7223_(ServerboundCustomQueryPacket p_10045_) {
-      this.m_10053_(Component.m_237115_("multiplayer.disconnect.unexpected_query_response"));
+      if (p_10045_.m_179824_() == this.velocityLoginMessageId) {
+         net.minecraft.network.FriendlyByteBuf buf = p_10045_.m_179825_();
+         if (buf == null) {
+            this.m_10053_(Component.m_237113_("This server requires you to connect with Velocity."));
+            return;
+         }
+
+         if (!VelocityProxy.checkIntegrity(buf)) {
+            this.m_10053_(Component.m_237113_("Unable to verify player details"));
+            return;
+         }
+
+         int version = buf.m_130242_();
+         if (version > VelocityProxy.MAX_SUPPORTED_FORWARDING_VERSION) {
+            throw new IllegalStateException("Unsupported forwarding version " + version + ", wanted upto " + VelocityProxy.MAX_SUPPORTED_FORWARDING_VERSION);
+         }
+
+         java.net.SocketAddress listening = this.f_10013_.m_129523_();
+         int port = 0;
+         if (listening instanceof java.net.InetSocketAddress) {
+            port = ((java.net.InetSocketAddress) listening).getPort();
+         }
+         this.f_10013_.f_129469_ = new java.net.InetSocketAddress(VelocityProxy.readAddress(buf), port);
+
+         this.f_10021_ = VelocityProxy.createProfile(buf);
+
+         ServerLoginPacketListenerImpl.this.f_10019_ = State.NEGOTIATING;
+         return;
+      }
+      if (!net.minecraftforge.network.NetworkHooks.onCustomPayload(p_10045_, this.f_10013_))
+         this.m_10053_(Component.m_237115_("multiplayer.disconnect.unexpected_query_response"));
    }
 
    protected GameProfile m_10038_(GameProfile p_10039_) {
