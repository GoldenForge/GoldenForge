--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -17,8 +_,11 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Optional;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.BooleanSupplier;
 import javax.annotation.Nullable;
+
+import io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler;
 import net.minecraft.DefaultUncaughtExceptionHandler;
 import net.minecraft.DefaultUncaughtExceptionHandlerWithName;
 import net.minecraft.SharedConstants;
@@ -54,13 +_,15 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import net.minecraft.world.level.storage.LevelStorageSource;
+import org.goldenforge.config.GoldenForgeConfig;
 import org.slf4j.Logger;
 
 public class DedicatedServer extends MinecraftServer implements ServerInterface {
    static final Logger f_139598_ = LogUtils.getLogger();
    private static final int f_142864_ = 5000;
    private static final int f_142865_ = 2;
-   public final List<ConsoleInput> f_139600_ = Collections.synchronizedList(Lists.newArrayList());
+   //public final List<ConsoleInput> consoleInput = Collections.synchronizedList(Lists.newArrayList());
+   private final java.util.Queue<ConsoleInput> serverCommandQueue = new java.util.concurrent.ConcurrentLinkedQueue<>(); // Paper - use a proper queuemmands
    @Nullable
    private QueryThreadGs4 f_139601_;
    private final RconConsoleSource f_139602_;
@@ -82,6 +_,7 @@
    public boolean m_7038_() throws IOException {
       Thread thread = new Thread("Server console handler") {
          public void run() {
+            if (net.minecraftforge.server.console.TerminalHandler.handleCommands(DedicatedServer.this)) return;
             BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
 
             String s1;
@@ -103,6 +_,8 @@
          f_139598_.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
       }
 
+      ChunkTaskScheduler.init();
+
       f_139598_.info("Loading properties");
       DedicatedServerProperties dedicatedserverproperties = this.f_139604_.m_139777_();
       if (this.m_129792_()) {
@@ -113,6 +_,8 @@
          this.m_129913_(dedicatedserverproperties.f_139730_);
       }
 
+      org.spigotmc.WatchdogThread.doStart(60, false);
+
       this.m_129997_(dedicatedserverproperties.f_139733_);
       this.m_129999_(dedicatedserverproperties.f_139734_);
       this.m_129989_(dedicatedserverproperties.f_139736_);
@@ -144,7 +_,16 @@
       if (!this.m_129797_()) {
          f_139598_.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
          f_139598_.warn("The server will make no attempt to authenticate usernames. Beware.");
-         f_139598_.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+         // Spigot start
+         // Paper start
+         if (GoldenForgeConfig.Server.isVelocityEnabled.get()) {
+            f_139598_.warn("Whilst this makes it possible to use Velocity, unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.");
+            f_139598_.warn("Please see https://docs.papermc.io/velocity/security for further information.");
+            // Paper end
+         } else {
+            f_139598_.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+         }
+         // Spigot end
          f_139598_.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
       }
 
@@ -159,11 +_,13 @@
          long i = Util.m_137569_();
          SkullBlockEntity.m_222885_(this.f_236721_, this);
          GameProfileCache.m_11004_(this.m_129797_());
+         if (!net.minecraftforge.server.ServerLifecycleHooks.handleServerAboutToStart(this)) return false;
          f_139598_.info("Preparing level \"{}\"", (Object)this.m_7123_());
          this.m_130006_();
          long j = Util.m_137569_() - i;
          String s = String.format(Locale.ROOT, "%.3fs", (double)j / 1.0E9D);
-         f_139598_.info("Done ({})! For help, type \"help\"", (Object)s);
+         // LOGGER.info("Done ({})! For help, type \"help\"", (Object)s);  // Paper moved to after init
+         this.f_129726_ = Util.m_137550_(); //Forge: Update server time to prevent watchdog/spaming during long load.
          if (dedicatedserverproperties.f_139744_ != null) {
             this.m_129900_().m_46170_(GameRules.f_46153_).m_46246_(dedicatedserverproperties.f_139744_, this);
          }
@@ -178,21 +_,23 @@
             this.f_139603_ = RconThread.m_11615_(this);
          }
 
-         if (this.m_139669_() > 0L) {
-            Thread thread1 = new Thread(new ServerWatchdog(this));
-            thread1.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandlerWithName(f_139598_));
-            thread1.setName("Server Watchdog");
-            thread1.setDaemon(true);
-            thread1.start();
-         }
+//         if (this.getMaxTickLength() > 0L) {
+//            Thread thread1 = new Thread(new ServerWatchdog(this));
+//            thread1.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandlerWithName(LOGGER));
+//            thread1.setName("Server Watchdog");
+//            thread1.setDaemon(true);
+//            thread1.start();
+//         }
 
          Items.f_41852_.m_6787_(CreativeModeTab.f_40754_, NonNullList.m_122779_());
+         // <3 you Grum for this, saves us ~30 patch files! --^
          if (dedicatedserverproperties.f_139721_) {
             MinecraftServerStatistics.m_18328_(this);
             f_139598_.info("JMX monitoring enabled");
          }
 
-         return true;
+         if (GoldenForgeConfig.Server.enableAsyncMobSpawning.get()) mobSpawnExecutor.start(); // Pufferfish
+         return net.minecraftforge.server.ServerLifecycleHooks.handleServerStarting(this);
       }
    }
 
@@ -281,7 +_,7 @@
       if (this.f_139601_ != null) {
          this.f_139601_.m_7530_();
       }
-
+      System.exit(this.abnormalExit ? 70 : 0); // CraftBukkit // Paper
    }
 
    public void m_5703_(BooleanSupplier p_139661_) {
@@ -294,13 +_,15 @@
    }
 
    public void m_139645_(String p_139646_, CommandSourceStack p_139647_) {
-      this.f_139600_.add(new ConsoleInput(p_139646_, p_139647_));
+      this.serverCommandQueue.add(new ConsoleInput(p_139646_, p_139647_)); // Paper - use proper queue
    }
 
    public void m_139665_() {
-      while(!this.f_139600_.isEmpty()) {
-         ConsoleInput consoleinput = this.f_139600_.remove(0);
-         this.m_129892_().m_230957_(consoleinput.f_135929_, consoleinput.f_135928_);
+      // Paper start - use proper queue
+      ConsoleInput servercommand;
+      while ((servercommand = this.serverCommandQueue.poll()) != null) {
+         // Paper end
+         this.m_129892_().m_230957_(servercommand.f_135929_, servercommand.f_135928_);
       }
 
    }
@@ -318,7 +_,7 @@
    }
 
    public boolean m_214000_() {
-      return this.m_7913_().f_214803_;
+      return super.m_214000_() || this.m_7913_().f_214803_;
    }
 
    public DedicatedPlayerList m_6846_() {
@@ -515,7 +_,6 @@
 
    public void m_7041_() {
       super.m_7041_();
-      Util.m_137580_();
       SkullBlockEntity.m_196704_();
    }
 
