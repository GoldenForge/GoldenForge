--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -10,6 +_,7 @@
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
+import io.papermc.paper.util.TickThread;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import java.awt.image.BufferedImage;
 import java.io.ByteArrayOutputStream;
@@ -152,10 +_,12 @@
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
 import org.apache.commons.lang3.Validate;
+import org.goldenforge.tpsmonitor.TpsMonitorManager;
 import org.slf4j.Logger;
 
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements CommandSource, AutoCloseable {
-   private static final Logger f_129750_ = LogUtils.getLogger();
+   private static MinecraftServer SERVER; public static MinecraftServer getServer() { return SERVER; }
+   public static final Logger f_129750_ = LogUtils.getLogger();
    public static final String f_195495_ = "vanilla";
    private static final float f_177884_ = 0.8F;
    private static final int f_177885_ = 100;
@@ -172,7 +_,7 @@
    public static final LevelSettings f_129743_ = new LevelSettings("Demo World", GameType.SURVIVAL, false, Difficulty.NORMAL, false, new GameRules(), DataPackConfig.f_45842_);
    private static final long f_177871_ = 50L;
    public static final GameProfile f_195496_ = new GameProfile(Util.f_137441_, "Anonymous Player");
-   protected final LevelStorageSource.LevelStorageAccess f_129744_;
+   public final LevelStorageSource.LevelStorageAccess f_129744_;
    protected final PlayerDataStorage f_129745_;
    private final List<Runnable> f_129752_ = Lists.newArrayList();
    private MetricsRecorder f_177872_ = InactiveMetricsRecorder.f_146153_;
@@ -217,7 +_,7 @@
    private long f_129718_;
    protected final Services f_236721_;
    private long f_129724_;
-   private final Thread f_129725_;
+   public final Thread f_129725_;
    protected long f_129726_ = Util.m_137550_();
    private long f_129727_;
    private boolean f_129728_;
@@ -235,29 +_,43 @@
    private String f_129739_;
    private MinecraftServer.ReloadableResources f_129740_;
    private final StructureTemplateManager f_236720_;
-   protected final WorldData f_129749_;
+   public final WorldData f_129749_;
    private volatile boolean f_195494_;
 
+   public static long currentTickLong = 0L; // Paper
+   public int autosavePeriod;
+   public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
+   public static int currentTick = 0; // Paper - Further improve tick loop
+
+   public gg.pufferfish.pufferfish.util.AsyncExecutor mobSpawnExecutor = new gg.pufferfish.pufferfish.util.AsyncExecutor("MobSpawning"); // Pufferfish - optimize mob spawning
+
+   public final java.util.concurrent.ExecutorService chatExecutor = java.util.concurrent.Executors.newCachedThreadPool(
+           new com.google.common.util.concurrent.ThreadFactoryBuilder().setDaemon(true).setNameFormat("Async Chat Thread - #%d").setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(net.minecraft.server.MinecraftServer.f_129750_)).build()); // Paper
+
+
+
    public static <S extends MinecraftServer> S m_129872_(Function<Thread, S> p_129873_) {
       AtomicReference<S> atomicreference = new AtomicReference<>();
-      Thread thread = new Thread(() -> {
+      Thread thread = new TickThread(() -> {
          atomicreference.get().m_130011_();
       }, "Server thread");
       thread.setUncaughtExceptionHandler((p_177909_, p_177910_) -> {
          f_129750_.error("Uncaught exception in server thread", p_177910_);
       });
-      if (Runtime.getRuntime().availableProcessors() > 4) {
+      if (Util.VIRTUAL_PROCESSOR_AMOUNT > 4) {
          thread.setPriority(8);
       }
 
       S s = p_129873_.apply(thread);
       atomicreference.set(s);
+      thread.setPriority(Thread.NORM_PRIORITY+2); // Paper - boost priority
       thread.start();
       return s;
    }
 
    public MinecraftServer(Thread p_236723_, LevelStorageSource.LevelStorageAccess p_236724_, PackRepository p_236725_, WorldStem p_236726_, Proxy p_236727_, DataFixer p_236728_, Services p_236729_, ChunkProgressListenerFactory p_236730_) {
       super("Server");
+      SERVER = this;
       this.f_129746_ = p_236726_.f_206894_();
       this.f_129749_ = p_236726_.f_206895_();
       if (!this.f_129749_.m_5961_().m_204655_().m_142003_(LevelStem.f_63971_)) {
@@ -332,6 +_,7 @@
       this.m_129841_(dimensiondatastorage);
       this.f_129732_ = new CommandStorage(dimensiondatastorage);
       WorldBorder worldborder = serverlevel.m_6857_();
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.LevelEvent.Load(f_129762_.get(Level.f_46428_)));
       if (!serverleveldata.m_6535_()) {
          try {
             m_177896_(serverlevel, serverleveldata, worldgensettings.m_64660_(), flag);
@@ -366,6 +_,7 @@
             ServerLevel serverlevel1 = new ServerLevel(this, this.f_129738_, this.f_129744_, derivedleveldata, resourcekey1, entry.getValue(), p_129816_, flag, j, ImmutableList.of(), false);
             worldborder.m_61929_(new BorderChangeListener.DelegateBorderChangeListener(serverlevel1.m_6857_()));
             this.f_129762_.put(resourcekey1, serverlevel1);
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.LevelEvent.Load(f_129762_.get(resourcekey)));
          }
       }
 
@@ -377,6 +_,7 @@
          p_177898_.m_7250_(BlockPos.f_121853_.m_6630_(80), 0.0F);
       } else {
          ServerChunkCache serverchunkcache = p_177897_.m_7726_();
+         if (net.minecraftforge.event.ForgeEventFactory.onCreateWorldSpawn(p_177897_, p_177898_)) return;
          ChunkPos chunkpos = new ChunkPos(serverchunkcache.m_214994_().m_224579_().m_183230_());
          int i = serverchunkcache.m_8481_().m_142051_(p_177897_);
          if (i < p_177897_.m_141937_()) {
@@ -430,6 +_,7 @@
    }
 
    private void m_129940_(ChunkProgressListener p_129941_) {
+      this.forceTicks = true;
       ServerLevel serverlevel = this.m_129783_();
       f_129750_.info("Preparing start region for dimension {}", (Object)serverlevel.m_46472_().m_135782_());
       BlockPos blockpos = serverlevel.m_220360_();
@@ -438,15 +_,11 @@
       serverchunkcache.m_7827_().m_9310_(500);
       this.f_129726_ = Util.m_137550_();
       serverchunkcache.m_8387_(TicketType.f_9442_, new ChunkPos(blockpos), 11, Unit.INSTANCE);
-
-      while(serverchunkcache.m_8427_() != 441) {
-         this.f_129726_ = Util.m_137550_() + 10L;
-         this.m_130012_();
-      }
-
-      this.f_129726_ = Util.m_137550_() + 10L;
-      this.m_130012_();
-
+//      while(serverchunkcache.getTickingGenerated() != 441) {
+//         this.executeModerately();
+//      }
+
+      this.executeModerately();
       for(ServerLevel serverlevel1 : this.f_129762_.values()) {
          ForcedChunksSavedData forcedchunkssaveddata = serverlevel1.m_8895_().m_164858_(ForcedChunksSavedData::m_151483_, "chunks");
          if (forcedchunkssaveddata != null) {
@@ -457,15 +_,23 @@
                ChunkPos chunkpos = new ChunkPos(i);
                serverlevel1.m_7726_().m_6692_(chunkpos, true);
             }
+            net.minecraftforge.common.world.ForgeChunkManager.reinstatePersistentChunks(serverlevel1, forcedchunkssaveddata);
          }
       }
 
-      this.f_129726_ = Util.m_137550_() + 10L;
-      this.m_130012_();
+      this.executeModerately();
       p_129941_.m_7646_();
       serverchunkcache.m_7827_().m_9310_(5);
       this.m_129962_();
-   }
+      this.forceTicks = false;
+   }
+
+   private void executeModerately() {
+      this.m_18699_();
+      java.util.concurrent.locks.LockSupport.parkNanos("executing tasks", 1000L);
+   }
+   // CraftBukkit end
+
 
    public GameType m_130008_() {
       return this.f_129749_.m_5464_();
@@ -481,32 +_,80 @@
 
    public abstract boolean m_6983_();
 
+//   public boolean saveAllChunks(boolean p_129886_, boolean p_129887_, boolean p_129888_) {
+//      boolean flag = false;
+//
+//      for(ServerLevel serverlevel : this.getAllLevels()) {
+//         if (!p_129886_) {
+//            LOGGER.info("Saving chunks for level '{}'/{}", serverlevel, serverlevel.dimension().location());
+//         }
+//
+//         serverlevel.save((ProgressListener)null, p_129887_, serverlevel.noSave && !p_129888_);
+//         flag = true;
+//      }
+//
+//      ServerLevel serverlevel2 = this.overworld();
+//      ServerLevelData serverleveldata = this.worldData.overworldData();
+//      serverleveldata.setWorldBorder(serverlevel2.getWorldBorder().createSettings());
+//      this.worldData.setCustomBossEvents(this.getCustomBossEvents().save());
+//      this.storageSource.saveDataTag(this.registryAccess(), this.worldData, this.getPlayerList().getSingleplayerData());
+//      if (p_129887_) {
+//         for(ServerLevel serverlevel1 : this.getAllLevels()) {
+//            LOGGER.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", (Object)serverlevel1.getChunkSource().chunkMap.getStorageName());
+//         }
+//
+//         LOGGER.info("ThreadedAnvilChunkStorage: All dimensions are saved");
+//      }
+//
+//      return flag;
+//   }
+
    public boolean m_129885_(boolean p_129886_, boolean p_129887_, boolean p_129888_) {
-      boolean flag = false;
-
-      for(ServerLevel serverlevel : this.m_129785_()) {
-         if (!p_129886_) {
-            f_129750_.info("Saving chunks for level '{}'/{}", serverlevel, serverlevel.m_46472_().m_135782_());
-         }
-
-         serverlevel.m_8643_((ProgressListener)null, p_129887_, serverlevel.f_8564_ && !p_129888_);
-         flag = true;
-      }
-
-      ServerLevel serverlevel2 = this.m_129783_();
-      ServerLevelData serverleveldata = this.f_129749_.m_5996_();
-      serverleveldata.m_7831_(serverlevel2.m_6857_().m_61970_());
-      this.f_129749_.m_5917_(this.m_129901_().m_136307_());
-      this.f_129744_.m_78290_(this.m_206579_(), this.f_129749_, this.m_6846_().m_6960_());
-      if (p_129887_) {
-         for(ServerLevel serverlevel1 : this.m_129785_()) {
-            f_129750_.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", (Object)serverlevel1.m_7726_().f_8325_.m_182285_());
-         }
-
-         f_129750_.info("ThreadedAnvilChunkStorage: All dimensions are saved");
-      }
-
-      return flag;
+      // Paper start - rewrite chunk system - add close param
+      // This allows us to avoid double saving chunks by closing instead of saving then closing
+      return this.saveAllChunks(p_129886_, p_129887_, p_129888_, false);
+   }
+   public boolean saveAllChunks(boolean suppressLogs, boolean flush, boolean force, boolean close) {
+      // Paper end - rewrite chunk system - add close param
+      boolean flag3 = false;
+
+      for (Iterator iterator = this.m_129785_().iterator(); iterator.hasNext(); flag3 = true) {
+         ServerLevel worldserver = (ServerLevel) iterator.next();
+
+         if (!suppressLogs) {
+            MinecraftServer.f_129750_.info("Saving chunks for level '{}'/{}", worldserver, worldserver.m_46472_().m_135782_());
+         }
+         // Paper start - rewrite chunk system
+         worldserver.save((ProgressListener) null, flush, worldserver.f_8564_ && !force, close);
+         if (flush) {
+            MinecraftServer.f_129750_.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", worldserver.m_7726_().f_8325_.m_182285_());
+         }
+         // Paper end - rewrite chunk system
+      }
+
+      // CraftBukkit start - moved to WorldServer.save
+        /*
+        WorldServer worldserver1 = this.overworld();
+        IWorldDataServer iworlddataserver = this.worldData.overworldData();
+
+        iworlddataserver.setWorldBorder(worldserver1.getWorldBorder().createSettings());
+        this.worldData.setCustomBossEvents(this.getCustomBossEvents().save());
+        this.storageSource.saveDataTag(this.registryAccess(), this.worldData, this.getPlayerList().getSingleplayerData());
+        */
+      // CraftBukkit end
+      if (flush) {
+         Iterator iterator1 = this.m_129785_().iterator();
+
+         while (iterator1.hasNext()) {
+            ServerLevel worldserver2 = (ServerLevel) iterator1.next();
+
+            //MinecraftServer.LOGGER.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", worldserver2.getChunkSource().chunkMap.getStorageName()); // Paper - move up
+         }
+
+         MinecraftServer.f_129750_.info("ThreadedAnvilChunkStorage: All dimensions are saved");
+      }
+
+      return flag3;
    }
 
    public boolean m_195514_(boolean p_195515_, boolean p_195516_, boolean p_195517_) {
@@ -526,7 +_,41 @@
       this.m_7041_();
    }
 
+
+   // CraftBukkit start
+   private boolean hasStopped = false;
+   public volatile boolean hasFullyShutdown = false; // Paper
+   private boolean hasLoggedStop = false; // Paper
+   private final Object stopLock = new Object();
+   public final boolean hasStopped() {
+      synchronized (this.stopLock) {
+         return this.hasStopped;
+      }
+   }
+   public volatile Thread shutdownThread; // Paper
+   // CraftBukkit end
+
    public void m_7041_() {
+      // CraftBukkit start - prevent double stopping on multiple threads
+      synchronized(this.stopLock) {
+         if (this.hasStopped) return;
+         this.hasStopped = true;
+      }
+      // Paper start - kill main thread, and kill it hard
+      shutdownThread = Thread.currentThread();
+      if (!m_18695_()) {
+         MinecraftServer.f_129750_.info("Stopping main thread (Ignore any thread death message you see! - DO NOT REPORT THREAD DEATH TO PAPER)");
+         while (this.m_6304_().isAlive()) {
+            this.m_6304_().stop();
+            try {
+               Thread.sleep(1);
+            } catch (InterruptedException e) {}
+         }
+      }
+      // Paper end
+      // CraftBukkit end
+      if (m_130010_() && m_6982_()) net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.GameShuttingDownEvent());
+
       if (this.f_177872_.m_142763_()) {
          this.m_236737_();
       }
@@ -541,6 +_,7 @@
          f_129750_.info("Saving players");
          this.f_129763_.m_11302_();
          this.f_129763_.m_11313_();
+         try { Thread.sleep(100); } catch (InterruptedException ex) {} // CraftBukkit - SPIGOT-625 - give server at least a chance to send packets
       }
 
       f_129750_.info("Saving worlds");
@@ -550,27 +_,38 @@
             serverlevel.f_8564_ = false;
          }
       }
-
-      while(this.f_129762_.values().stream().anyMatch((p_202480_) -> {
-         return p_202480_.m_7726_().f_8325_.m_201907_();
-      })) {
-         this.f_129726_ = Util.m_137550_() + 1L;
-
-         for(ServerLevel serverlevel1 : this.m_129785_()) {
-            serverlevel1.m_7726_().m_201915_();
-            serverlevel1.m_7726_().m_201698_(() -> {
-               return true;
-            }, false);
-         }
-
-         this.m_130012_();
-      }
+//
+//      while(this.levels.values().stream().anyMatch((p_202480_) -> {
+//         return p_202480_.getChunkSource().chunkMap.hasWork();
+//      })) {
+//         this.nextTickTime = Util.getMillis() + 1L;
+//
+//         for(ServerLevel serverlevel1 : this.getAllLevels()) {
+//            serverlevel1.getChunkSource().removeTicketsOnClosing();
+//            serverlevel1.getChunkSource().tick(() -> {
+//               return true;
+//            }, false);
+//            while (serverlevel1.getChunkSource().pollTask()); // Paper - drain tasks
+//         }
+//
+//         this.waitUntilNextTick();
+//      }
 
       this.m_129885_(false, true, false);
 
+      this.f_195494_ = false;
+      this.f_129740_.close();
+
+      try {
+         this.f_129744_.close();
+      } catch (IOException ioexception1) {
+         MinecraftServer.f_129750_.error("Failed to unlock level {}", this.f_129744_.m_78277_(), ioexception1);
+      }
+
       for(ServerLevel serverlevel2 : this.m_129785_()) {
          if (serverlevel2 != null) {
             try {
+               net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.LevelEvent.Unload(serverlevel2));
                serverlevel2.close();
             } catch (IOException ioexception1) {
                f_129750_.error("Exception closing the level", (Throwable)ioexception1);
@@ -587,6 +_,14 @@
          f_129750_.error("Failed to unlock level {}", this.f_129744_.m_78277_(), ioexception);
       }
 
+      f_129750_.info("Flushing Chunk IO");
+      io.papermc.paper.chunk.system.io.RegionFileIOThread.close(true); // Paper // Paper - rewrite chunk system
+
+      f_129750_.info("Closing Thread Pool");
+      Util.m_137580_(); // Paper
+
+      org.apache.logging.log4j.LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
+      System.exit(0);
    }
 
    public String m_130009_() {
@@ -602,23 +_,93 @@
    }
 
    public void m_7570_(boolean p_129884_) {
+      // Paper start - allow passing of the intent to restart
+      this.safeShutdown(p_129884_);
+   }
+   public void safeShutdown(boolean waitForShutdown) {
+      this.hasLoggedStop = true; // Paper
+      // Paper end
       this.f_129764_ = false;
-      if (p_129884_) {
+      if (waitForShutdown) {
          try {
             this.f_129725_.join();
          } catch (InterruptedException interruptedexception) {
-            f_129750_.error("Error while shutting down", (Throwable)interruptedexception);
-         }
-      }
-
-   }
-
+            MinecraftServer.f_129750_.error("Error while shutting down", interruptedexception);
+         }
+      }
+
+   }
+
+   // Paper start - Further improve server tick loop
+   public static final int TICK_TIME = 1000000000 / MinecraftServer.TPS;
+   public static final int TPS = 20;
+   private static final long SEC_IN_NANO = 1000000000;
+   private static final long MAX_CATCHUP_BUFFER = TICK_TIME * TPS * 60L;
+   private long lastTick = 0;
+   private long catchupTime = 0;
+
+   public static volatile RuntimeException chunkSystemCrash; // Paper - rewrite chunk system
+
+   public final RollingAverage tps1 = new RollingAverage(60);
+   public final RollingAverage tps5 = new RollingAverage(60 * 5);
+   public final RollingAverage tps15 = new RollingAverage(60 * 15);
+
+   public static class RollingAverage {
+      private final int size;
+      private long time;
+      private java.math.BigDecimal total;
+      private int index = 0;
+      private final java.math.BigDecimal[] samples;
+      private final long[] times;
+
+      RollingAverage(int size) {
+         this.size = size;
+         this.time = size * SEC_IN_NANO;
+         this.total = dec(TPS).multiply(dec(SEC_IN_NANO)).multiply(dec(size));
+         this.samples = new java.math.BigDecimal[size];
+         this.times = new long[size];
+         for (int i = 0; i < size; i++) {
+            this.samples[i] = dec(TPS);
+            this.times[i] = SEC_IN_NANO;
+         }
+      }
+
+      private static java.math.BigDecimal dec(long t) {
+         return new java.math.BigDecimal(t);
+      }
+      public void add(java.math.BigDecimal x, long t) {
+         time -= times[index];
+         total = total.subtract(samples[index].multiply(dec(times[index])));
+         samples[index] = x;
+         times[index] = t;
+         time += t;
+         total = total.add(x.multiply(dec(t)));
+         if (++index == size) {
+            index = 0;
+         }
+      }
+
+      public double getAverage() {
+         return total.divide(dec(time), 30, java.math.RoundingMode.HALF_UP).doubleValue();
+      }
+   }
+   private static final java.math.BigDecimal TPS_BASE = new java.math.BigDecimal(1E9).multiply(new java.math.BigDecimal(20));
+
+   public double[] getTPS() {
+      return new double[] {
+              net.minecraft.server.MinecraftServer.getServer().tps1.getAverage(),
+              net.minecraft.server.MinecraftServer.getServer().tps5.getAverage(),
+              net.minecraft.server.MinecraftServer.getServer().tps15.getAverage()
+      };
+   }
    protected void m_130011_() {
       try {
          if (!this.m_7038_()) {
             throw new IllegalStateException("Failed to initialize server");
          }
 
+         net.minecraftforge.server.ServerLifecycleHooks.handleServerStarted(this);
+         new TpsMonitorManager();
          this.f_129726_ = Util.m_137550_();
          this.f_129757_.m_134908_(Component.m_237113_(this.f_129709_));
          this.f_129757_.m_134912_(new ServerStatus.Version(SharedConstants.m_183709_().getName(), SharedConstants.m_183709_().getProtocolVersion()));
@@ -626,20 +_,41 @@
          this.f_129757_.m_242958_(this.m_214005_());
          this.m_129878_(this.f_129757_);
 
+
+         long start = System.nanoTime(), curTime, tickSection = start; // Paper - Further improve server tick loop
+         lastTick = start - TICK_TIME; // Paper
          while(this.f_129764_) {
-            long i = Util.m_137550_() - this.f_129726_;
-            if (i > 2000L && this.f_129726_ - this.f_129718_ >= 15000L) {
+            // Paper start - rewrite chunk system
+            // guarantee that nothing can stop the server from halting if it can at least still tick
+            if (this.chunkSystemCrash != null) {
+               throw this.chunkSystemCrash;
+            }
+            // Paper end - rewrite chunk system
+            long i = ((curTime = System.nanoTime()) / (1000L * 1000L)) - this.f_129726_; // Paper
+            if (i > 5000L && this.f_129726_ - this.f_129718_ >= 30000L) {
                long j = i / 50L;
                f_129750_.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
                this.f_129726_ += j * 50L;
                this.f_129718_ = this.f_129726_;
             }
 
+            ++MinecraftServer.currentTickLong; // Paper
+            if ( ++MinecraftServer.currentTick % 20 == 0 )
+            {
+               final long diff = curTime - tickSection;
+               java.math.BigDecimal currentTps = TPS_BASE.divide(new java.math.BigDecimal(diff), 30, java.math.RoundingMode.HALF_UP);
+               tps1.add(currentTps, diff);
+               tps5.add(currentTps, diff);
+               tps15.add(currentTps, diff);
+               tickSection = curTime;
+            }
+
             if (this.f_177877_) {
                this.f_177877_ = false;
                this.f_177876_ = new MinecraftServer.TimeProfiler(Util.m_137569_(), this.f_129766_);
             }
 
+            lastTick = curTime;
             this.f_129726_ += 50L;
             this.m_177945_();
             this.f_129754_.m_6180_("tick");
@@ -653,6 +_,8 @@
             this.f_129717_ = true;
             JvmProfiler.f_185340_.m_183597_(this.f_129737_);
          }
+         net.minecraftforge.server.ServerLifecycleHooks.handleServerStopping(this);
+         net.minecraftforge.server.ServerLifecycleHooks.expectServerStopped(); // Forge: Has to come before MinecraftServer#onServerCrash to avoid race conditions
       } catch (Throwable throwable1) {
          f_129750_.error("Encountered an unexpected exception", throwable1);
          CrashReport crashreport = m_206568_(throwable1);
@@ -664,6 +_,7 @@
             f_129750_.error("We were unable to save this crash report to disk.");
          }
 
+         net.minecraftforge.server.ServerLifecycleHooks.expectServerStopped(); // Forge: Has to come before MinecraftServer#onServerCrash to avoid race conditions
          this.m_7268_(crashreport);
       } finally {
          try {
@@ -676,6 +_,7 @@
                this.f_236721_.f_214336_().m_196559_();
             }
 
+            net.minecraftforge.server.ServerLifecycleHooks.handleServerStopped(this);
             this.m_6988_();
          }
 
@@ -704,15 +_,30 @@
 
       return crashreport;
    }
-
+   public boolean forceTicks; // Paper
    private boolean m_129960_() {
+      // Paper start
+      if (this.forceTicks) {
+         return true;
+      }
+      // Paper end
+      if (isOversleep) return canOversleep();// Paper - because of our changes, this logic is broken
       return this.m_18767_() || Util.m_137550_() < (this.f_129728_ ? this.f_129727_ : this.f_129726_);
    }
 
+   boolean isOversleep = false;
+   private boolean canOversleep() {
+      return this.f_129728_ && Util.m_137550_() < this.f_129727_;
+   }
+
+   private boolean canSleepForTickNoOversleep() {
+      return this.forceTicks || this.m_18767_() || Util.m_137550_() < this.f_129726_;
+   }
+
    protected void m_130012_() {
-      this.m_18699_();
+      //this.executeAll(); // Paper - move this into the tick method for timings
       this.m_18701_(() -> {
-         return !this.m_129960_();
+         return !this.canSleepForTickNoOversleep(); // Paper - move oversleep into full server tick
       });
    }
 
@@ -732,19 +_,85 @@
 
    private boolean m_129961_() {
       if (super.m_7245_()) {
+         this.executeMidTickTasks(); // Paper - execute chunk tasks mid tick
          return true;
       } else {
+         boolean ret = false; // Paper - force execution of all worlds, do not just bias the first
          if (this.m_129960_()) {
             for(ServerLevel serverlevel : this.m_129785_()) {
                if (serverlevel.m_7726_().m_8466_()) {
-                  return true;
+                  ret = true; // Paper - force execution of all worlds, do not just bias the first
                }
             }
          }
 
-         return false;
-      }
-   }
+         return ret;  // Paper - force execution of all worlds, do not just bias the first
+      }
+   }
+
+   // Paper start - execute chunk tasks mid tick
+   static final long CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME = 25L * 1000L; // 25us
+   static final long MAX_CHUNK_EXEC_TIME = 1000L; // 1us
+
+   static final long TASK_EXECUTION_FAILURE_BACKOFF = 5L * 1000L; // 5us
+
+   private static long lastMidTickExecute;
+   private static long lastMidTickExecuteFailure;
+
+   private boolean tickMidTickTasks() {
+      // give all worlds a fair chance at by targetting them all.
+      // if we execute too many tasks, that's fine - we have logic to correctly handle overuse of allocated time.
+      boolean executed = false;
+      for (ServerLevel world : this.m_129785_()) {
+         long currTime = System.nanoTime();
+         if (currTime - world.lastMidTickExecuteFailure <= TASK_EXECUTION_FAILURE_BACKOFF) {
+            continue;
+         }
+         if (!world.m_7726_().m_8466_()) {
+            // we need to back off if this fails
+            world.lastMidTickExecuteFailure = currTime;
+         } else {
+            executed = true;
+         }
+      }
+
+      return executed;
+   }
+
+   public final void executeMidTickTasks() {
+      long startTime = System.nanoTime();
+      if ((startTime - lastMidTickExecute) <= CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME || (startTime - lastMidTickExecuteFailure) <= TASK_EXECUTION_FAILURE_BACKOFF) {
+         // it's shown to be bad to constantly hit the queue (chunk loads slow to a crawl), even if no tasks are executed.
+         // so, backoff to prevent this
+         return;
+      }
+
+      for (;;) {
+         boolean moreTasks = this.tickMidTickTasks();
+         long currTime = System.nanoTime();
+         long diff = currTime - startTime;
+
+         if (!moreTasks || diff >= MAX_CHUNK_EXEC_TIME) {
+            if (!moreTasks) {
+               lastMidTickExecuteFailure = currTime;
+            }
+
+            // note: negative values reduce the time
+            long overuse = diff - MAX_CHUNK_EXEC_TIME;
+            if (overuse >= (10L * 1000L * 1000L)) { // 10ms
+               // make sure something like a GC or dumb plugin doesn't screw us over...
+               overuse = 10L * 1000L * 1000L; // 10ms
+            }
+
+            double overuseCount = (double)overuse/(double)MAX_CHUNK_EXEC_TIME;
+            long extraSleep = (long)Math.round(overuseCount*CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME);
+
+            lastMidTickExecute = currTime + extraSleep;
+            return;
+         }
+      }
+   }
+   // Paper end - execute chunk tasks mid tick
 
    public void m_6367_(TickTask p_129957_) {
       this.m_129905_().m_6174_("runTask");
@@ -789,7 +_,16 @@
 
    public void m_5705_(BooleanSupplier p_129871_) {
       long i = Util.m_137569_();
+      // Paper start - move oversleep into full server tick
+      isOversleep = true;
+      this.m_18701_(() -> {
+         return !this.canOversleep();
+      });
+      isOversleep = false;
+      // Paper end
+      net.minecraftforge.event.ForgeEventFactory.onPreServerTick(p_129871_, this);
       ++this.f_129766_;
+      TpsMonitorManager.get().tick();
       this.m_5703_(p_129871_);
       if (i - this.f_129724_ >= 5000000000L) {
          this.f_129724_ = i;
@@ -810,15 +_,33 @@
             Collections.shuffle(Arrays.asList(agameprofile));
             this.f_129757_.m_134914_().m_134924_(agameprofile);
          }
+         this.f_129757_.invalidateJson();
       }
 
-      if (this.f_129766_ % 6000 == 0) {
-         f_129750_.debug("Autosave started");
-         this.f_129754_.m_6180_("save");
-         this.m_195514_(true, false, false);
-         this.f_129754_.m_7238_();
-         f_129750_.debug("Autosave finished");
-      }
+      // Paper start - incremental chunk and player saving
+      int playerSaveInterval = -1;
+      if (playerSaveInterval < 0) {
+         playerSaveInterval = autosavePeriod;
+      }
+      this.f_129754_.m_6180_("save");
+      final boolean fullSave = autosavePeriod > 0 && this.f_129766_ % autosavePeriod == 0;
+      try {
+         this.f_195494_ = true;
+         if (playerSaveInterval > 0) {
+            this.f_129763_.saveAll(playerSaveInterval);
+         }
+         for (ServerLevel level : this.m_129785_()) {
+            if (6000 > 0) {
+               level.saveIncrementally(fullSave);
+            }
+         }
+      } finally {
+         this.f_195494_ = false;
+      }
+      this.f_129754_.m_7238_();
+      // Paper end
+      io.papermc.paper.util.CachedLists.reset(); // Paper
+      this.m_18699_();
 
       this.f_129754_.m_6180_("tallying");
       long l = this.f_129748_[this.f_129766_ % 100] = Util.m_137569_() - i;
@@ -826,42 +_,67 @@
       long i1 = Util.m_137569_();
       this.f_129735_.m_13755_(i1 - i);
       this.f_129754_.m_7238_();
+      net.minecraftforge.event.ForgeEventFactory.onPostServerTick(p_129871_, this);
    }
 
    public void m_5703_(BooleanSupplier p_129954_) {
       this.f_129754_.m_6180_("commandFunctions");
       this.m_129890_().m_136128_();
       this.f_129754_.m_6182_("levels");
+      while (!this.processQueue.isEmpty()) {
+         this.processQueue.remove().run();
+      }
 
-      for(ServerLevel serverlevel : this.m_129785_()) {
+      for(ServerLevel serverlevel : this.getWorldArray()) {
+         long tickStart = Util.m_137569_();
          this.f_129754_.m_6521_(() -> {
             return serverlevel + " " + serverlevel.m_46472_().m_135782_();
          });
-         if (this.f_129766_ % 20 == 0) {
-            this.f_129754_.m_6180_("timeSync");
-            this.f_129763_.m_11270_(new ClientboundSetTimePacket(serverlevel.m_46467_(), serverlevel.m_46468_(), serverlevel.m_46469_().m_46207_(GameRules.f_46140_)), serverlevel.m_46472_());
-            this.f_129754_.m_7238_();
+         // Send time updates to everyone, it will get the right time from the world the player is in.
+         // Paper start - optimize time updates
+         for (final ServerLevel world : this.m_129785_()) {
+            final boolean doDaylight = world.m_46469_().m_46207_(GameRules.f_46140_);
+            final long dayTime = world.m_46468_();
+            long worldTime = world.m_46467_();
+            final ClientboundSetTimePacket worldPacket = new ClientboundSetTimePacket(worldTime, dayTime, doDaylight);
+            for (Player entityhuman : world.m_6907_()) {
+               if (!(entityhuman instanceof ServerPlayer) || (f_129766_ + entityhuman.m_19879_()) % 20 != 0) {
+                  continue;
+               }
+               ServerPlayer entityplayer = (ServerPlayer) entityhuman;
+               entityplayer.f_8906_.m_9829_(worldPacket); // Add support for per player time
+            }
          }
+         // Paper end
 
          this.f_129754_.m_6180_("tick");
+         net.minecraftforge.event.ForgeEventFactory.onPreLevelTick(serverlevel, p_129954_);
 
          try {
             serverlevel.m_8793_(p_129954_);
+            // Paper start
+            for (final io.papermc.paper.chunk.SingleThreadChunkRegionManager regionManager : serverlevel.m_7726_().f_8325_.regionManagers) {
+               regionManager.recalculateRegions();
+            }
+            // Paper end
          } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.m_127521_(throwable, "Exception ticking world");
             serverlevel.m_6026_(crashreport);
             throw new ReportedException(crashreport);
          }
+         net.minecraftforge.event.ForgeEventFactory.onPostLevelTick(serverlevel, p_129954_);
 
          this.f_129754_.m_7238_();
          this.f_129754_.m_7238_();
+         serverlevel.explosionDensityCache.clear(); // Paper - Optimize explosions
+         perWorldTickTimes.computeIfAbsent(serverlevel.m_46472_(), k -> new long[100])[this.f_129766_ % 100] = Util.m_137569_() - tickStart;
       }
 
       this.f_129754_.m_6182_("connection");
       this.m_129919_().m_9721_();
       this.f_129754_.m_6182_("players");
       this.f_129763_.m_11288_();
-      if (SharedConstants.f_136183_) {
+      if (net.minecraftforge.gametest.ForgeGameTestHooks.isGametestEnabled()) {
          GameTestTicker.f_177648_.m_127790_();
       }
 
@@ -929,7 +_,7 @@
 
    @DontObfuscate
    public String m_130001_() {
-      return "vanilla";
+      return net.minecraftforge.internal.BrandingControl.getServerBranding();
    }
 
    public SystemReport m_177935_(SystemReport p_177936_) {
@@ -1121,7 +_,7 @@
    }
 
    public boolean m_214000_() {
-      return false;
+      return net.minecraftforge.common.ForgeMod.isServerChatPreviewEnabled();
    }
 
    public boolean m_129918_() {
@@ -1287,6 +_,7 @@
          this.m_6846_().m_11315_();
          this.f_129734_.m_136120_(this.f_129740_.f_206585_.m_206860_());
          this.f_236720_.m_230370_(this.f_129740_.f_206584_);
+         this.m_6846_().m_11314_().forEach(this.m_6846_()::m_11289_); //Forge: Fix newly added/modified commands not being sent to the client when commands reload.
       }, this);
       if (this.m_18695_()) {
          this.m_18701_(completablefuture::isDone);
@@ -1296,10 +_,13 @@
    }
 
    public static DataPackConfig m_129819_(PackRepository p_129820_, DataPackConfig p_129821_, boolean p_129822_) {
+      net.minecraftforge.resource.ResourcePackLoader.loadResourcePacks(p_129820_, net.minecraftforge.server.ServerLifecycleHooks::buildPackFinder);
       p_129820_.m_10506_();
+      DataPackConfig.f_45842_.addModPacks(net.minecraftforge.common.ForgeHooks.getModPacks());
+      p_129821_.addModPacks(net.minecraftforge.common.ForgeHooks.getModPacks());
       if (p_129822_) {
-         p_129820_.m_10509_(Collections.singleton("vanilla"));
-         return DataPackConfig.f_45842_;
+         p_129820_.m_10509_(net.minecraftforge.common.ForgeHooks.getModPacksWithVanilla());
+         return new DataPackConfig(net.minecraftforge.common.ForgeHooks.getModPacksWithVanilla(), ImmutableList.of());
       } else {
          Set<String> set = Sets.newLinkedHashSet();
 
@@ -1450,6 +_,31 @@
 
    public abstract boolean m_7779_(GameProfile p_129840_);
 
+   private Map<ResourceKey<Level>, long[]> perWorldTickTimes = Maps.newIdentityHashMap();
+   @Nullable
+   public long[] getTickTime(ResourceKey<Level> dim) {
+      return perWorldTickTimes.get(dim);
+   }
+
+   @Deprecated //Forge Internal use Only, You can screw up a lot of things if you mess with this map.
+   public synchronized Map<ResourceKey<Level>, ServerLevel> forgeGetWorldMap() {
+      return this.f_129762_;
+   }
+   private int worldArrayMarker = 0;
+   private int worldArrayLast = -1;
+   private ServerLevel[] worldArray;
+   @Deprecated //Forge Internal use Only, use to protect against concurrent modifications in the world tick loop.
+   public synchronized void markWorldsDirty() {
+      worldArrayMarker++;
+   }
+   public ServerLevel[] getWorldArray() {
+      if (worldArrayMarker == worldArrayLast && worldArray != null)
+         return worldArray;
+      worldArray = this.f_129762_.values().stream().toArray(x -> new ServerLevel[x]);
+      worldArrayLast = worldArrayMarker;
+      return worldArray;
+   }
+
    public void m_142116_(Path p_177911_) throws IOException {
    }
 
@@ -1708,6 +_,10 @@
 
    public WorldData m_129910_() {
       return this.f_129749_;
+   }
+
+   public MinecraftServer.ReloadableResources getServerResources() {
+       return f_129740_;
    }
 
    public RegistryAccess.Frozen m_206579_() {
