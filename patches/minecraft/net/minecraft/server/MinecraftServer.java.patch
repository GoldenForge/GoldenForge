--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -155,7 +_,8 @@
 import org.slf4j.Logger;
 
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements CommandSource, AutoCloseable {
-   private static final Logger f_129750_ = LogUtils.getLogger();
+   private static MinecraftServer SERVER; public static MinecraftServer getServer() { return SERVER; }
+   public static final Logger f_129750_ = LogUtils.getLogger();
    public static final String f_195495_ = "vanilla";
    private static final float f_177884_ = 0.8F;
    private static final int f_177885_ = 100;
@@ -172,7 +_,7 @@
    public static final LevelSettings f_129743_ = new LevelSettings("Demo World", GameType.SURVIVAL, false, Difficulty.NORMAL, false, new GameRules(), DataPackConfig.f_45842_);
    private static final long f_177871_ = 50L;
    public static final GameProfile f_195496_ = new GameProfile(Util.f_137441_, "Anonymous Player");
-   protected final LevelStorageSource.LevelStorageAccess f_129744_;
+   public final LevelStorageSource.LevelStorageAccess f_129744_;
    protected final PlayerDataStorage f_129745_;
    private final List<Runnable> f_129752_ = Lists.newArrayList();
    private MetricsRecorder f_177872_ = InactiveMetricsRecorder.f_146153_;
@@ -217,7 +_,7 @@
    private long f_129718_;
    protected final Services f_236721_;
    private long f_129724_;
-   private final Thread f_129725_;
+   public final Thread f_129725_;
    protected long f_129726_ = Util.m_137550_();
    private long f_129727_;
    private boolean f_129728_;
@@ -235,12 +_,17 @@
    private String f_129739_;
    private MinecraftServer.ReloadableResources f_129740_;
    private final StructureTemplateManager f_236720_;
-   protected final WorldData f_129749_;
+   public final WorldData f_129749_;
    private volatile boolean f_195494_;
 
+   public static long currentTickLong = 0L; // Paper
+   public int autosavePeriod;
+   public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
+   public static int currentTick = 0; // Paper - Further improve tick loop
+
    public static <S extends MinecraftServer> S m_129872_(Function<Thread, S> p_129873_) {
       AtomicReference<S> atomicreference = new AtomicReference<>();
-      Thread thread = new Thread(() -> {
+      Thread thread = new Thread(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER, () -> {
          atomicreference.get().m_130011_();
       }, "Server thread");
       thread.setUncaughtExceptionHandler((p_177909_, p_177910_) -> {
@@ -258,6 +_,7 @@
 
    public MinecraftServer(Thread p_236723_, LevelStorageSource.LevelStorageAccess p_236724_, PackRepository p_236725_, WorldStem p_236726_, Proxy p_236727_, DataFixer p_236728_, Services p_236729_, ChunkProgressListenerFactory p_236730_) {
       super("Server");
+      SERVER = this;
       this.f_129746_ = p_236726_.f_206894_();
       this.f_129749_ = p_236726_.f_206895_();
       if (!this.f_129749_.m_5961_().m_204655_().m_142003_(LevelStem.f_63971_)) {
@@ -332,6 +_,7 @@
       this.m_129841_(dimensiondatastorage);
       this.f_129732_ = new CommandStorage(dimensiondatastorage);
       WorldBorder worldborder = serverlevel.m_6857_();
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.LevelEvent.Load(f_129762_.get(Level.f_46428_)));
       if (!serverleveldata.m_6535_()) {
          try {
             m_177896_(serverlevel, serverleveldata, worldgensettings.m_64660_(), flag);
@@ -366,6 +_,7 @@
             ServerLevel serverlevel1 = new ServerLevel(this, this.f_129738_, this.f_129744_, derivedleveldata, resourcekey1, entry.getValue(), p_129816_, flag, j, ImmutableList.of(), false);
             worldborder.m_61929_(new BorderChangeListener.DelegateBorderChangeListener(serverlevel1.m_6857_()));
             this.f_129762_.put(resourcekey1, serverlevel1);
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.LevelEvent.Load(f_129762_.get(resourcekey)));
          }
       }
 
@@ -377,6 +_,7 @@
          p_177898_.m_7250_(BlockPos.f_121853_.m_6630_(80), 0.0F);
       } else {
          ServerChunkCache serverchunkcache = p_177897_.m_7726_();
+         if (net.minecraftforge.event.ForgeEventFactory.onCreateWorldSpawn(p_177897_, p_177898_)) return;
          ChunkPos chunkpos = new ChunkPos(serverchunkcache.m_214994_().m_224579_().m_183230_());
          int i = serverchunkcache.m_8481_().m_142051_(p_177897_);
          if (i < p_177897_.m_141937_()) {
@@ -457,6 +_,7 @@
                ChunkPos chunkpos = new ChunkPos(i);
                serverlevel1.m_7726_().m_6692_(chunkpos, true);
             }
+            net.minecraftforge.common.world.ForgeChunkManager.reinstatePersistentChunks(serverlevel1, forcedchunkssaveddata);
          }
       }
 
@@ -527,6 +_,8 @@
    }
 
    public void m_7041_() {
+      if (m_130010_() && m_6982_()) net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.GameShuttingDownEvent());
+
       if (this.f_177872_.m_142763_()) {
          this.m_236737_();
       }
@@ -571,6 +_,7 @@
       for(ServerLevel serverlevel2 : this.m_129785_()) {
          if (serverlevel2 != null) {
             try {
+               net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.LevelEvent.Unload(serverlevel2));
                serverlevel2.close();
             } catch (IOException ioexception1) {
                f_129750_.error("Exception closing the level", (Throwable)ioexception1);
@@ -587,6 +_,9 @@
          f_129750_.error("Failed to unlock level {}", this.f_129744_.m_78277_(), ioexception);
       }
 
+      f_129750_.info("Flushing Chunk IO");
+      com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE.close(true, true); // Paper
+
    }
 
    public String m_130009_() {
@@ -613,12 +_,20 @@
 
    }
 
+   // Paper start - Further improve server tick loop
+   public static final int TICK_TIME = 1000000000 / MinecraftServer.TPS;
+   public static final int TPS = 20;
+   private static final long SEC_IN_NANO = 1000000000;
+   private static final long MAX_CATCHUP_BUFFER = TICK_TIME * TPS * 60L;
+   private long lastTick = 0;
+   private long catchupTime = 0;
    protected void m_130011_() {
       try {
          if (!this.m_7038_()) {
             throw new IllegalStateException("Failed to initialize server");
          }
 
+         net.minecraftforge.server.ServerLifecycleHooks.handleServerStarted(this);
          this.f_129726_ = Util.m_137550_();
          this.f_129757_.m_134908_(Component.m_237113_(this.f_129709_));
          this.f_129757_.m_134912_(new ServerStatus.Version(SharedConstants.m_183709_().getName(), SharedConstants.m_183709_().getProtocolVersion()));
@@ -626,20 +_,27 @@
          this.f_129757_.m_242958_(this.m_214005_());
          this.m_129878_(this.f_129757_);
 
+
+         long start = System.nanoTime(), curTime, tickSection = start; // Paper - Further improve server tick loop
+         lastTick = start - TICK_TIME; // Paper
          while(this.f_129764_) {
-            long i = Util.m_137550_() - this.f_129726_;
-            if (i > 2000L && this.f_129726_ - this.f_129718_ >= 15000L) {
+            long i = ((curTime = System.nanoTime()) / (1000L * 1000L)) - this.f_129726_; // Paper
+            if (i > 5000L && this.f_129726_ - this.f_129718_ >= 30000L) {
                long j = i / 50L;
                f_129750_.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
                this.f_129726_ += j * 50L;
                this.f_129718_ = this.f_129726_;
             }
 
+            ++MinecraftServer.currentTickLong; // Paper
+            ++MinecraftServer.currentTick;
+
             if (this.f_177877_) {
                this.f_177877_ = false;
                this.f_177876_ = new MinecraftServer.TimeProfiler(Util.m_137569_(), this.f_129766_);
             }
 
+            lastTick = curTime;
             this.f_129726_ += 50L;
             this.m_177945_();
             this.f_129754_.m_6180_("tick");
@@ -653,6 +_,8 @@
             this.f_129717_ = true;
             JvmProfiler.f_185340_.m_183597_(this.f_129737_);
          }
+         net.minecraftforge.server.ServerLifecycleHooks.handleServerStopping(this);
+         net.minecraftforge.server.ServerLifecycleHooks.expectServerStopped(); // Forge: Has to come before MinecraftServer#onServerCrash to avoid race conditions
       } catch (Throwable throwable1) {
          f_129750_.error("Encountered an unexpected exception", throwable1);
          CrashReport crashreport = m_206568_(throwable1);
@@ -664,6 +_,7 @@
             f_129750_.error("We were unable to save this crash report to disk.");
          }
 
+         net.minecraftforge.server.ServerLifecycleHooks.expectServerStopped(); // Forge: Has to come before MinecraftServer#onServerCrash to avoid race conditions
          this.m_7268_(crashreport);
       } finally {
          try {
@@ -676,6 +_,7 @@
                this.f_236721_.f_214336_().m_196559_();
             }
 
+            net.minecraftforge.server.ServerLifecycleHooks.handleServerStopped(this);
             this.m_6988_();
          }
 
@@ -706,9 +_,15 @@
    }
 
    private boolean m_129960_() {
+      if (isOversleep) return canOversleep();// Paper - because of our changes, this logic is broken
       return this.m_18767_() || Util.m_137550_() < (this.f_129728_ ? this.f_129727_ : this.f_129726_);
    }
 
+   boolean isOversleep = false;
+   private boolean canOversleep() {
+      return this.f_129728_ && Util.m_137550_() < this.f_129727_;
+   }
+
    protected void m_130012_() {
       this.m_18699_();
       this.m_18701_(() -> {
@@ -732,19 +_,85 @@
 
    private boolean m_129961_() {
       if (super.m_7245_()) {
+         this.executeMidTickTasks(); // Paper - execute chunk tasks mid tick
          return true;
       } else {
+         boolean ret = false; // Paper - force execution of all worlds, do not just bias the first
          if (this.m_129960_()) {
             for(ServerLevel serverlevel : this.m_129785_()) {
                if (serverlevel.m_7726_().m_8466_()) {
-                  return true;
+                  ret = true; // Paper - force execution of all worlds, do not just bias the first
                }
             }
          }
 
-         return false;
-      }
-   }
+         return ret;  // Paper - force execution of all worlds, do not just bias the first
+      }
+   }
+
+   // Paper start - execute chunk tasks mid tick
+   static final long CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME = 25L * 1000L; // 25us
+   static final long MAX_CHUNK_EXEC_TIME = 1000L; // 1us
+
+   static final long TASK_EXECUTION_FAILURE_BACKOFF = 5L * 1000L; // 5us
+
+   private static long lastMidTickExecute;
+   private static long lastMidTickExecuteFailure;
+
+   private boolean tickMidTickTasks() {
+      // give all worlds a fair chance at by targetting them all.
+      // if we execute too many tasks, that's fine - we have logic to correctly handle overuse of allocated time.
+      boolean executed = false;
+      for (ServerLevel world : this.m_129785_()) {
+         long currTime = System.nanoTime();
+         if (currTime - world.lastMidTickExecuteFailure <= TASK_EXECUTION_FAILURE_BACKOFF) {
+            continue;
+         }
+         if (!world.m_7726_().m_8466_()) {
+            // we need to back off if this fails
+            world.lastMidTickExecuteFailure = currTime;
+         } else {
+            executed = true;
+         }
+      }
+
+      return executed;
+   }
+
+   public final void executeMidTickTasks() {
+      long startTime = System.nanoTime();
+      if ((startTime - lastMidTickExecute) <= CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME || (startTime - lastMidTickExecuteFailure) <= TASK_EXECUTION_FAILURE_BACKOFF) {
+         // it's shown to be bad to constantly hit the queue (chunk loads slow to a crawl), even if no tasks are executed.
+         // so, backoff to prevent this
+         return;
+      }
+
+      for (;;) {
+         boolean moreTasks = this.tickMidTickTasks();
+         long currTime = System.nanoTime();
+         long diff = currTime - startTime;
+
+         if (!moreTasks || diff >= MAX_CHUNK_EXEC_TIME) {
+            if (!moreTasks) {
+               lastMidTickExecuteFailure = currTime;
+            }
+
+            // note: negative values reduce the time
+            long overuse = diff - MAX_CHUNK_EXEC_TIME;
+            if (overuse >= (10L * 1000L * 1000L)) { // 10ms
+               // make sure something like a GC or dumb plugin doesn't screw us over...
+               overuse = 10L * 1000L * 1000L; // 10ms
+            }
+
+            double overuseCount = (double)overuse/(double)MAX_CHUNK_EXEC_TIME;
+            long extraSleep = (long)Math.round(overuseCount*CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME);
+
+            lastMidTickExecute = currTime + extraSleep;
+            return;
+         }
+      }
+   }
+   // Paper end - execute chunk tasks mid tick
 
    public void m_6367_(TickTask p_129957_) {
       this.m_129905_().m_6174_("runTask");
@@ -789,6 +_,14 @@
 
    public void m_5705_(BooleanSupplier p_129871_) {
       long i = Util.m_137569_();
+      // Paper start - move oversleep into full server tick
+      isOversleep = true;
+      this.m_18701_(() -> {
+         return !this.canOversleep();
+      });
+      isOversleep = false;
+      // Paper end
+      net.minecraftforge.event.ForgeEventFactory.onPreServerTick(p_129871_, this);
       ++this.f_129766_;
       this.m_5703_(p_129871_);
       if (i - this.f_129724_ >= 5000000000L) {
@@ -810,15 +_,31 @@
             Collections.shuffle(Arrays.asList(agameprofile));
             this.f_129757_.m_134914_().m_134924_(agameprofile);
          }
+         this.f_129757_.invalidateJson();
       }
 
-      if (this.f_129766_ % 6000 == 0) {
-         f_129750_.debug("Autosave started");
-         this.f_129754_.m_6180_("save");
-         this.m_195514_(true, false, false);
-         this.f_129754_.m_7238_();
-         f_129750_.debug("Autosave finished");
-      }
+      // Paper start - incremental chunk and player saving
+      int playerSaveInterval = -1;
+      if (playerSaveInterval < 0) {
+         playerSaveInterval = autosavePeriod;
+      }
+      this.f_129754_.m_6180_("save");
+      final boolean fullSave = autosavePeriod > 0 && this.f_129766_ % autosavePeriod == 0;
+      try {
+         this.f_195494_ = true;
+         if (playerSaveInterval > 0) {
+            this.f_129763_.saveAll(playerSaveInterval);
+         }
+         for (ServerLevel level : this.m_129785_()) {
+            if (6000 > 0) {
+               level.saveIncrementally(fullSave);
+            }
+         }
+      } finally {
+         this.f_195494_ = false;
+      }
+      this.f_129754_.m_7238_();
+      // Paper end
 
       this.f_129754_.m_6180_("tallying");
       long l = this.f_129748_[this.f_129766_ % 100] = Util.m_137569_() - i;
@@ -826,14 +_,19 @@
       long i1 = Util.m_137569_();
       this.f_129735_.m_13755_(i1 - i);
       this.f_129754_.m_7238_();
+      net.minecraftforge.event.ForgeEventFactory.onPostServerTick(p_129871_, this);
    }
 
    public void m_5703_(BooleanSupplier p_129954_) {
       this.f_129754_.m_6180_("commandFunctions");
       this.m_129890_().m_136128_();
       this.f_129754_.m_6182_("levels");
+      while (!this.processQueue.isEmpty()) {
+         this.processQueue.remove().run();
+      }
 
-      for(ServerLevel serverlevel : this.m_129785_()) {
+      for(ServerLevel serverlevel : this.getWorldArray()) {
+         long tickStart = Util.m_137569_();
          this.f_129754_.m_6521_(() -> {
             return serverlevel + " " + serverlevel.m_46472_().m_135782_();
          });
@@ -844,24 +_,32 @@
          }
 
          this.f_129754_.m_6180_("tick");
+         net.minecraftforge.event.ForgeEventFactory.onPreLevelTick(serverlevel, p_129954_);
 
          try {
             serverlevel.m_8793_(p_129954_);
+            // Paper start
+            for (final io.papermc.paper.chunk.SingleThreadChunkRegionManager regionManager : serverlevel.m_7726_().f_8325_.regionManagers) {
+               regionManager.recalculateRegions();
+            }
+            // Paper end
          } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.m_127521_(throwable, "Exception ticking world");
             serverlevel.m_6026_(crashreport);
             throw new ReportedException(crashreport);
          }
+         net.minecraftforge.event.ForgeEventFactory.onPostLevelTick(serverlevel, p_129954_);
 
          this.f_129754_.m_7238_();
          this.f_129754_.m_7238_();
+         perWorldTickTimes.computeIfAbsent(serverlevel.m_46472_(), k -> new long[100])[this.f_129766_ % 100] = Util.m_137569_() - tickStart;
       }
 
       this.f_129754_.m_6182_("connection");
       this.m_129919_().m_9721_();
       this.f_129754_.m_6182_("players");
       this.f_129763_.m_11288_();
-      if (SharedConstants.f_136183_) {
+      if (net.minecraftforge.gametest.ForgeGameTestHooks.isGametestEnabled()) {
          GameTestTicker.f_177648_.m_127790_();
       }
 
@@ -929,7 +_,7 @@
 
    @DontObfuscate
    public String m_130001_() {
-      return "vanilla";
+      return net.minecraftforge.internal.BrandingControl.getServerBranding();
    }
 
    public SystemReport m_177935_(SystemReport p_177936_) {
@@ -1121,7 +_,7 @@
    }
 
    public boolean m_214000_() {
-      return false;
+      return net.minecraftforge.common.ForgeMod.isServerChatPreviewEnabled();
    }
 
    public boolean m_129918_() {
@@ -1287,6 +_,7 @@
          this.m_6846_().m_11315_();
          this.f_129734_.m_136120_(this.f_129740_.f_206585_.m_206860_());
          this.f_236720_.m_230370_(this.f_129740_.f_206584_);
+         this.m_6846_().m_11314_().forEach(this.m_6846_()::m_11289_); //Forge: Fix newly added/modified commands not being sent to the client when commands reload.
       }, this);
       if (this.m_18695_()) {
          this.m_18701_(completablefuture::isDone);
@@ -1296,10 +_,13 @@
    }
 
    public static DataPackConfig m_129819_(PackRepository p_129820_, DataPackConfig p_129821_, boolean p_129822_) {
+      net.minecraftforge.resource.ResourcePackLoader.loadResourcePacks(p_129820_, net.minecraftforge.server.ServerLifecycleHooks::buildPackFinder);
       p_129820_.m_10506_();
+      DataPackConfig.f_45842_.addModPacks(net.minecraftforge.common.ForgeHooks.getModPacks());
+      p_129821_.addModPacks(net.minecraftforge.common.ForgeHooks.getModPacks());
       if (p_129822_) {
-         p_129820_.m_10509_(Collections.singleton("vanilla"));
-         return DataPackConfig.f_45842_;
+         p_129820_.m_10509_(net.minecraftforge.common.ForgeHooks.getModPacksWithVanilla());
+         return new DataPackConfig(net.minecraftforge.common.ForgeHooks.getModPacksWithVanilla(), ImmutableList.of());
       } else {
          Set<String> set = Sets.newLinkedHashSet();
 
@@ -1450,6 +_,31 @@
 
    public abstract boolean m_7779_(GameProfile p_129840_);
 
+   private Map<ResourceKey<Level>, long[]> perWorldTickTimes = Maps.newIdentityHashMap();
+   @Nullable
+   public long[] getTickTime(ResourceKey<Level> dim) {
+      return perWorldTickTimes.get(dim);
+   }
+
+   @Deprecated //Forge Internal use Only, You can screw up a lot of things if you mess with this map.
+   public synchronized Map<ResourceKey<Level>, ServerLevel> forgeGetWorldMap() {
+      return this.f_129762_;
+   }
+   private int worldArrayMarker = 0;
+   private int worldArrayLast = -1;
+   private ServerLevel[] worldArray;
+   @Deprecated //Forge Internal use Only, use to protect against concurrent modifications in the world tick loop.
+   public synchronized void markWorldsDirty() {
+      worldArrayMarker++;
+   }
+   private ServerLevel[] getWorldArray() {
+      if (worldArrayMarker == worldArrayLast && worldArray != null)
+         return worldArray;
+      worldArray = this.f_129762_.values().stream().toArray(x -> new ServerLevel[x]);
+      worldArrayLast = worldArrayMarker;
+      return worldArray;
+   }
+
    public void m_142116_(Path p_177911_) throws IOException {
    }
 
@@ -1708,6 +_,10 @@
 
    public WorldData m_129910_() {
       return this.f_129749_;
+   }
+
+   public MinecraftServer.ReloadableResources getServerResources() {
+       return f_129740_;
    }
 
    public RegistryAccess.Frozen m_206579_() {
